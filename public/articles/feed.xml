<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azhar Khan - Articles</title>
    <link>https://azharkhan.in/articles/</link>
    <description>Azhar Khan – Articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>azhar932@icloud.com (Azhar Khan)</managingEditor>
    <webMaster>azhar932@icloud.com (Azhar Khan)</webMaster>
    <lastBuildDate>Fri, 05 Jun 2020 09:50:37 +0100</lastBuildDate>
    
        <atom:link href="https://azharkhan.in/articles/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
      <item>
        <title>Design tokens and styleguides with Eleventy</title>
        <link>https://azharkhan.in/articles/design-tokens-styleguides-eleventy/</link>
        <pubDate>Fri, 05 Jun 2020 09:50:37 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/design-tokens-styleguides-eleventy/</guid>
        <description>&lt;p&gt;Lately I’ve been exploring the concept of &lt;a href=&#34;https://24ways.org/2019/design-tokens-and-component-based-design/&#34;&gt;design tokens&lt;/a&gt; as a way to make design decisions more portable and easier to maintain.&lt;/p&gt;
&lt;p&gt;If you‘re new to design tokens, here’s &lt;a href=&#34;https://css-tricks.com/what-are-design-tokens/&#34;&gt;a good explanation from Robin Rendle&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”Design tokens are an agnostic way to store variables such as typography, color, and spacing so that your design system can be shared across platforms like iOS, Android, and regular ol’ websites.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There’s some great tools out there that help you generate design tokens. &lt;a href=&#34;https://github.com/salesforce-ux/theo&#34;&gt;Theo&lt;/a&gt; used by the Salesforce team is a popular choice, as is &lt;a href=&#34;https://github.com/ui-js/chromatic&#34;&gt;Chromatic&lt;/a&gt; and &lt;a href=&#34;https://amzn.github.io/style-dictionary/#/&#34;&gt;Style Dictionary&lt;/a&gt;. However, for my particular needs, most of theses solutions are either overkill or not exactly what I was looking for.&lt;/p&gt;
&lt;p&gt;All I want to do start is with some basic tokens which are stored in their own file, independent of whatever will eventually consume them. Then I’d like to make these tokens accessible in my stylesheets and templates. By doing this I’ll be able to use my tokens to style the website and build a styleguide to visually represent them.&lt;/p&gt;
&lt;p&gt;When my tokens are updated at the source, I want these changes to cascade down to the styleguide template, SCSS styles and whatever else in the website uses them.&lt;/p&gt;
&lt;p&gt;I’m not interested in generating tokens for IOS or Android, like a lot of these existing tools offer. This is one of the reasons I decided to roll my own. All I’m after is a simple workflow that does the above with minimal fuss.&lt;/p&gt;
&lt;p&gt;All this should be possible with a few NPM packages, NPM scripts and Eleventy.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-project&#34;&gt;Setting up the project&lt;/h2&gt;
&lt;p&gt;First thing’s first. I need to create a new directory for my website, then initialise NPM from inside the directory, so I can use some NPM packages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I now have a &lt;code&gt;package.json&lt;/code&gt; file at the root of my project.&lt;/p&gt;
&lt;p&gt;Next, I need to install Eleventy so I can process my templates when I add them. I won’t go through this in detail as I’ve already covered that in &lt;a href=&#34;https://harrycresswell.com/articles/getting-started-with-eleventy/&#34;&gt;Getting Started with Eleventy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But here are a few reminders.&lt;/p&gt;
&lt;p&gt;Install Eleventy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev @11ty/eleventy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run Eleventy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Start a local web server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy --serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You might want to add an &lt;code&gt;index.njk&lt;/code&gt; file at the root of the project with some boilerplate code. This will give Eleventy something to process.&lt;/p&gt;
&lt;h2 id=&#34;starting-with-yaml&#34;&gt;Starting with YAML&lt;/h2&gt;
&lt;p&gt;From what I’ve read it sounds like creating design tokens in YAML is a good place to start. Makes sense. YAML is easy to read and write by anyone, so I can see the benefits. Should also play nice with Forestry or Netlify CMS.&lt;/p&gt;
&lt;p&gt;Start by creating a file inside the project at &lt;code&gt;src/tokens/tokens.yaml&lt;/code&gt;. This will be the source of truth, where I’ll write my design tokens and manage any future changes before they are generated.&lt;/p&gt;
&lt;p&gt;To keep things simple I‘ll add a few color tokens and a sizing scale to the file. This should be more than enough to get going with for now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;primary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tomato&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#f1f1f1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#333&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;size-scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.8rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.4rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;xl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I’ll return to this file later. Now I need to think about how to convert these tokens into a format that can be consumed from inside Eleventy templates.&lt;/p&gt;
&lt;h2 id=&#34;converting-yaml-to-json&#34;&gt;Converting YAML to JSON&lt;/h2&gt;
&lt;p&gt;Eleventy works well with JSON. You can pass it to templates which is ideal. So next it makes sense to take these YAML tokens and convert them into JSON.&lt;/p&gt;
&lt;p&gt;You can do this with the &lt;a href=&#34;https://www.npmjs.com/package/yamljs&#34;&gt;YAMLJS&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install yamljs --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now inside &lt;code&gt;package.json&lt;/code&gt; file, write a quick NPM script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;tokens:json&amp;quot;: &amp;quot;yaml2json src/tokens/tokens.yaml &amp;gt; src/site/_data/tokens.json --pretty&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So what’s going on here? First, I’m telling Yaml2json the source folder of my tokens, then I specify the destination folder where the JSON output should be stored. I’m adding the &lt;code&gt;--pretty&lt;/code&gt; flag to make the JSON easier to read.&lt;/p&gt;
&lt;p&gt;For this to work out I need to add a &lt;code&gt;_data&lt;/code&gt; folder at &lt;code&gt;./src/data&lt;/code&gt;, so that the script will run and generate a &lt;code&gt;tokens.json&lt;/code&gt; file inside the folder.&lt;/p&gt;
&lt;p&gt;Now, when I type &lt;code&gt;npm run tokens:json&lt;/code&gt; in the command line, YAMLJS will take my &lt;code&gt;tokens.yaml&lt;/code&gt; file, process it as JSON, then chuck it in the &lt;code&gt;_data&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_data&lt;/code&gt; folder is where Eleventy suggests storing data files by default, but you could easily store this wherever you like. Just change the data location in your config file to do so.&lt;/p&gt;
&lt;h2 id=&#34;consuming-json-in-templates-to-crete-a-style-guide&#34;&gt;Consuming JSON in templates to crete a style guide&lt;/h2&gt;
&lt;p&gt;I now have a new file called &lt;code&gt;tokens.json&lt;/code&gt; inside my &lt;code&gt;_data&lt;/code&gt; folder that looks like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;colors&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;primary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#542bff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#f1f1f1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#333&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;size-scale&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.8rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;md&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1rem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.4rem&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is an exact representation of my tokens in JSON format. The next step is to consume these tokens in a template.&lt;/p&gt;
&lt;p&gt;You might want to do this for a number of reasons, but perhaps the most obvious one is to build a visual representation of your tokens. For the sake of simplicity, I’m refering to this as a styleguide.&lt;/p&gt;
&lt;p&gt;To keep things nice and modular, I start by creating a new file for my styleguide which I’ll be able to add to my index file (or wherverer I like) later as an include.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch src/_includes/styleguide.njk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I add the following code to loop through the JSON object, and return each item.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Loop through JSON object --&amp;gt;&lt;/span&gt;
  {% for key, item in tokens.colors %}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;color-palette&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;background-color: {{ item }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Some space&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;color-hex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ item }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can return a specific item value like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Grab the specific value --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;background-color:{{ tokens.colors.primary }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ tokens.colors.primary }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty simple.&lt;/p&gt;
&lt;h2 id=&#34;converting-json-to-scss&#34;&gt;Converting JSON to SCSS&lt;/h2&gt;
&lt;p&gt;Now I need a way to consume my tokens from within CSS files. That means turning this JSON output into SCSS.&lt;/p&gt;
&lt;p&gt;You can use the conveniently named &lt;a href=&#34;https://www.npmjs.com/package/json-to-scss&#34;&gt;json-to-scss&lt;/a&gt; package to make this happen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install json-to-scss --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With the package installed, write another NPM script inside the scripts object in &lt;code&gt;package.json&lt;/code&gt;, underneath the last one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;json:scss&amp;quot;: &amp;quot;json-to-scss src/_data/tokens.json src/scss/_tokens.scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here I’m telling &lt;code&gt;json-to-sass&lt;/code&gt; the source folder and the destination for the sass variables.&lt;/p&gt;
&lt;p&gt;Now I can run &lt;code&gt;npm run json:scss&lt;/code&gt; in the command line and &lt;code&gt;json-to-scss&lt;/code&gt; will take our JSON, convert it to SCSS and chuck it in &lt;code&gt;src/scss/_tokens.scss&lt;/code&gt; ready for my stylesheets to consume.&lt;/p&gt;
&lt;p&gt;Now I have a new file at &lt;code&gt;./src/scss/tokens.scss&lt;/code&gt; containing a Sass map of my tokens.&lt;/p&gt;
&lt;p&gt;That look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$tokens&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;primary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#542bff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;no&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#f1f1f1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#333&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;no&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.8&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;lg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.4&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far so good.&lt;/p&gt;
&lt;h2 id=&#34;mapping-through-scss-to-create-variables-and-styles&#34;&gt;Mapping through SCSS to create variables and styles&lt;/h2&gt;
&lt;p&gt;At this point I have a Sass map which stores my tokens. But I need to do something with the data so I can use it in my styles.&lt;/p&gt;
&lt;p&gt;It makes sense to extract the data and turn it into CSS custom properties. I’ll want to create a custom property for every single value in the map.&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;--color-primary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;542bff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;--color-background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;f1f1f1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;--color-body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;333&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;--size-scale-sm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;8rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;--size-scale-md&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;1rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;--size-scale-lg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;4rem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To do this I create a new Sass file at &lt;code&gt;src/scss/_config.scss&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From inside &lt;code&gt;_config.scss&lt;/code&gt;, first I import the tokens map, then grab each property type in the array and assign each to a corresponding variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span class=&#34;k&#34;&gt;@import&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tokens&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;$colors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;map-get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tokens&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;colors&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$size-scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;map-get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$tokens&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;size-scale&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to generate the custom properties.&lt;/p&gt;
&lt;p&gt;To do this I’ll loop through the map array, which can be done using the &lt;a href=&#34;http://www.thesassway.com/intermediate/if-for-each-while#each&#34;&gt;@each&lt;/a&gt; directive. I want to create these properties on the &lt;code&gt;:root&lt;/code&gt; element so I have them available throughout my website.&lt;/p&gt;
&lt;p&gt;There are a couple of methods you can use to make this happen.&lt;/p&gt;
&lt;p&gt;The first method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
  @each $color-name, $color-value in $colors {
    --color-#{$color-name}: #{$color-value};
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
  @each $color in $colors {
    #{&#39;--color-&#39; + nth($color, 1)}: #{nth($color, 2)};
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both methods produce the same results, so choose whichever approach you are more comfortable with and make most sense of.&lt;/p&gt;
&lt;p&gt;You can do exactly the same thing for the size scale.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
  @each $size in $size-scale {
    #{&#39;--size-&#39; + nth($size, 1)}: #{nth($size, 2)};
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;compiling-scss-to-css&#34;&gt;Compiling SCSS to CSS&lt;/h2&gt;
&lt;p&gt;Now I want to compile my SCSS to CSS, so that the browser can make use of my styles and I can see a visual output of my tokens as CSS custom properties.&lt;/p&gt;
&lt;p&gt;To do this I’m installing the &lt;a href=&#34;https://github.com/sass/node-sass&#34;&gt;node-sass&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install node-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then I’ll write a new NPM script to take the SCSS from &lt;code&gt;src/scss&lt;/code&gt; and compile it to CSS inside &lt;code&gt;src/site/_includes/css&lt;/code&gt; where Eleventy will be able to process it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;scss&amp;quot;: &amp;quot;node-sass --output-style expanded -o src/_includes/css src/scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to get a better understanding of what’s happening here, I cover this in detail in &lt;a href=&#34;https://harrycresswell.com/articles/getting-started-with-eleventy/#compiling-sass-to-css&#34;&gt;Getting Started with Eleventy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before testing the script I need to add an entry point for my SCSS. So I create a &lt;code&gt;main.scss&lt;/code&gt; file at &lt;code&gt;/src/scss/main.scss&lt;/code&gt; and import the config file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csss&#34; data-lang=&#34;csss&#34;&gt;@import &amp;quot;config&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now I can test the script by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run scss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A new file has now been created at &lt;code&gt;src/_includes/css/main.css&lt;/code&gt; containing my tokens as CSS custom properties.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--color-primary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;tomato&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--color-background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#f1f1f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--color-body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#333&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--size-sm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--size-md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--size-lg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.4&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;--size-xl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Exactly what I was after.&lt;/p&gt;
&lt;h2 id=&#34;watching-files-for-changes&#34;&gt;Watching files for changes&lt;/h2&gt;
&lt;p&gt;Theres a few final things left to do before this workflow is complete. The first thing is to set up a script that will watch for any changes made to SCSS files.&lt;/p&gt;
&lt;p&gt;When I make a change to my SCSS, I need a way to run the SCSS script I just wrote, so I don’t have to do it manually each time. You can use a package called &lt;a href=&#34;https://www.npmjs.com/package/onchange&#34;&gt;onchange&lt;/a&gt; to make this happen.&lt;/p&gt;
&lt;p&gt;First install the package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install onchange --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then write a script to run the SCSS script, when changes are made to SCSS files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;watch:css&amp;quot;: &amp;quot;onchange &#39;src/scss&#39; -- npm run scss&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All we’re saying here is when &lt;code&gt;npm run watch:css&lt;/code&gt; is run in the terminal, onchange will “watch” for changes in the &lt;code&gt;src/scss&lt;/code&gt; directory, then run the &lt;code&gt;scss&lt;/code&gt; script when it sees changes occur.&lt;/p&gt;
&lt;p&gt;Now there’s one final problem to solve. To get a development server running and the SCSS compiling to css onchange, right now you have to run two scripts: &lt;code&gt;watch:css&lt;/code&gt; (the one we just created) and &lt;code&gt;eleventy --serve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can combine these into one script to make life easier, but first create a simple serve script.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;serve&amp;quot;: &amp;quot;eleventy --serve&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice. That simplifies the Eleventy serve command. Now I need to install one final package and we’re good to go.&lt;/p&gt;
&lt;h2 id=&#34;run-all-scripts-in-parallel&#34;&gt;Run all scripts in parallel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npm-run-all&#34;&gt;npm-run-all&lt;/a&gt; will help you run &lt;code&gt;serve&lt;/code&gt; and &lt;code&gt;watch:css&lt;/code&gt; in parallel, alongside our other two scripts; &lt;code&gt;tokens:json&lt;/code&gt; and &lt;code&gt;json:scss&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First install the package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install npm-run-all --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then write a start script which runs all the scripts at the same time.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;start&amp;quot;: &amp;quot;run-p tokens:json json:scss serve watch:css&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you should be able to run &lt;code&gt;npm start&lt;/code&gt; in the terminal and everything should work as expected.&lt;/p&gt;
&lt;p&gt;One thing to note, if you make changes in your &lt;code&gt;tokens.yaml&lt;/code&gt; you will need to stop the server and re-run &lt;code&gt;npm start&lt;/code&gt; for the changes to propagate.&lt;/p&gt;
&lt;p&gt;If you wish you could write one another script to tell onchange to watch for changes to your YAML tokens.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So that’s pretty much it. How to take a simple set of YAML design tokens, convert them into JSON so they can be consumed inside Eleventy templates, then generate SCSS to use to style your website.&lt;/p&gt;
&lt;p&gt;Since writing this, Heydon published &lt;a href=&#34;https://heydonworks.com/article/design-tokens-in-eleventy/&#34;&gt;Easily Use Design Tokens In Eleventy&lt;/a&gt; which is well worth reading if you’re looking for a simple dependency free approach to a very similar problem.&lt;/p&gt;
&lt;p&gt;Haydon’s article shows you how to turn JSON tokens into CSS by using Nunjucks templating and setting a permalink in your &lt;code&gt;theme.njk&lt;/code&gt; template to &lt;code&gt;theme.css&lt;/code&gt;. It’s very elegant and you could easily adapted it to convert YAML to JSON.&lt;/p&gt;
&lt;p&gt;Haydon’s approach may well be a better way to go about all this, but I’ll leave that for you to decide.&lt;/p&gt;
&lt;p class=&#34;Message&#34;&gt;
    
You can find all the code from this article over on &lt;a href=&#34;https://github.com/harrycresswell/design-tokens-eleventy&#34;&gt;Github.com&lt;/a&gt;

&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Passing data to templates and tables in Hugo</title>
        <link>https://azharkhan.in/articles/passing-data-to-templates-hugo/</link>
        <pubDate>Fri, 15 May 2020 08:44:48 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/passing-data-to-templates-hugo/</guid>
        <description>&lt;p&gt;It often makes sense to abstract large datasets away from your templates and into their own files. This keeps your templates concise and easy to manage.&lt;/p&gt;
&lt;p&gt;You can store this type of data in the &lt;a href=&#34;https://gohugo.io/templates/data-templates/#the-data-folder&#34;&gt;Data folder&lt;/a&gt; at the root of your Hugo project, as either JSON, Yaml or Toml files. You can then pull this additional data into your templates and use it however you wish.&lt;/p&gt;
&lt;p&gt;This article looks at two approaches to consuming data in Hugo templates. The first approach uses the &lt;a href=&#34;https://gohugo.io/functions/range/#readout&#34;&gt;range&lt;/a&gt; function to display a list of data in a form select. Whilst the second approach looks at creating an &lt;a href=&#34;https://gohugo.io/functions/index-function/#readout&#34;&gt;index&lt;/a&gt; of data, as a way to extract specific values in your dataset and render those values as data in an HTML table.&lt;/p&gt;
&lt;h2 id=&#34;ranging-through-data&#34;&gt;Ranging through data&lt;/h2&gt;
&lt;p&gt;In a recent client project, I had to create a form select for every country organised by continent. This was essentially just a list of each and every country name.&lt;/p&gt;
&lt;p&gt;Rather than add this dataset directly to my template, I outsourced it to several &lt;code&gt;.yaml&lt;/code&gt; files, which split the countries of the world by continent. Each file was organised alphabetically by country name and each continent file was stored in the data directory, at the root of the Hugo project.&lt;/p&gt;
&lt;p&gt;To get an idea of what this looks like, here’s the structure of the data directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;└── countries
  └── continent
    ├── africa.yaml
    ├── asia.yaml
    ├── europe.yaml
    └── northamerica.yaml
    └── southamerica.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Within each &lt;code&gt;.yaml&lt;/code&gt; file, my data was represented in the the same format. Consider &lt;code&gt;southamerica.yaml&lt;/code&gt; to get an idea of the format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Argentina&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Bolivia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Brazil&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Chile&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Colombia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ecuador&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Guyana&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Paraguay&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Peru&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Uruguay&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Venezuela&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside my template I then used the range function to loop through every country and display the name of each country as an option in the form select.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ range .Site.Data.countries.continent.southamerica.country }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;south-america&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .name }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .name }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a great way to simplify your templates. In this particular case it prevents the need to have to enter each country manually inside an option tag.&lt;/p&gt;
&lt;p&gt;For a smaller dataset you may choose to do this by hand, directly inside the template. But there are disadvantages to this.&lt;/p&gt;
&lt;p&gt;First, there’s no way of editing hard coded values unless you dig into the template itself. This writes of the idea of making changes via a CMS, which a non-coding site administrator can manage.&lt;/p&gt;
&lt;p&gt;Second, I’d argue it’s much easier to maintain a separate &lt;code&gt;.yaml&lt;/code&gt; file for storing larger datasets like this one. The idea of combing through a bunch of HTML inside a template to add and update values by hand doesn’t exactly fill me with joy. Whatsamore it’s more fiddly and time consuming.&lt;/p&gt;
&lt;p&gt;Now let’s turn our focus to tabular data.&lt;/p&gt;
&lt;h2 id=&#34;tabular-data&#34;&gt;Tabular data&lt;/h2&gt;
&lt;p&gt;More recently I was faced with a slightly different problem. This time it involved rendering data inside a table, which could then be updated by my client.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://lauralucas.london/&#34;&gt;Laura&lt;/a&gt; is a personal trainer, who offers one-on-one training sessions and group sessions for a maximum of two people. These sessions are offered as a package of either 1 session, 5 sessions or 10 sessions.&lt;/p&gt;
&lt;p&gt;We needed a way to add this data to a table and display a breakdown of the total price, the price per session, and the price per session per person (based on two people sharing the session).&lt;/p&gt;
&lt;p&gt;If that sounds confusing, well it kind of is. It took me far longer than I care to admit to make sense of the data.&lt;/p&gt;
&lt;p&gt;So to make the data easier to visualise, have a quick look at &lt;a href=&#34;https://lauralucas.london/prices/&#34;&gt;Laura’s pricing page&lt;/a&gt; to see the final outcome of what we’re trying to achieve.&lt;/p&gt;
&lt;p&gt;Laura also needed a way to update these prices via a CMS. &lt;a href=&#34;https://forestry.io/&#34;&gt;Forestry&lt;/a&gt; makes this step easy, but more on that bit later. For now, let’s focus on the data structure.&lt;/p&gt;
&lt;p&gt;To structure the data in a suitable way, first I created a two yaml files in the data directory. One called &lt;code&gt;prices_for_one.yaml&lt;/code&gt; and one called &lt;code&gt;prices_for_two.yaml&lt;/code&gt;. Both files followed the exact same data format.&lt;/p&gt;
&lt;p&gt;To give you an idea of what the format looked like, here’s the &lt;code&gt;prices_for_two.yaml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;one_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;total_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£85&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;price_per_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;price_per_session_per_person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£42.5&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;five_sessions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;total_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£370&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;price_per_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£74&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;price_per_session_per_person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£37&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ten_sessions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;total_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£670&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;price_per_session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£67&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;price_per_session_per_person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;£33.5&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This dataset differs slightly from the first example, where listed countries by continent. You will have noticed the main bulk of data is nested under different parent keys.&lt;/p&gt;
&lt;p&gt;These three different parent keys represent each session package (one_session, five_sessions and ten_session) and each parent has three nested child data key value pairs associated with it. Each parent key is unique, but the nested keys are the same for each parent key.&lt;/p&gt;
&lt;p&gt;So how might you access this data from a template file?&lt;/p&gt;
&lt;p&gt;You could range through the child key data from your template file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ range $.Site.Data.prices }}
  {{ .total_price }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case &lt;a href=&#34;https://gohugo.io/functions/range/#readout&#34;&gt;range&lt;/a&gt; would loop through all the &lt;code&gt;.total_price&lt;/code&gt; keys and return their values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;£&lt;span class=&#34;m&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;£&lt;span class=&#34;m&#34;&gt;290&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;£&lt;span class=&#34;m&#34;&gt;540&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Likewise, we can do the same for the other keys:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ range $.Site.Data.prices }}
  {{ .price_per_session }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And return those values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;£&lt;span class=&#34;m&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;£&lt;span class=&#34;m&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, when it comes to tables, ranging through a set of data might not be the best option. It becomes apparent why, when we add the HTML markup to create the table.&lt;/p&gt;
&lt;p&gt;The obvious thing to do would be to think of this much like an unordered list and using range to list out the data in &lt;code&gt;&amp;lt;td&amp;gt;’s&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ range $.Site.Data.prices }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ .price_per_session }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But of course unless you change the fundamental layout of a table with CSS, table rows display inline by default. This would cause our three session prices to flow horizontally across the table in a single row. &lt;a href=&#34;https://lauralucas.london/prices/&#34;&gt;If you remember&lt;/a&gt; isn’t how we want to represent the data.&lt;/p&gt;
&lt;p&gt;Consider how the generated HTML would look if we used range on the &lt;code&gt;price_per_session&lt;/code&gt; as above. Hugo would create three &lt;code&gt;&amp;lt;td&amp;gt;’s&lt;/code&gt; in a single table row containing the price per session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;-&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;£58&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;£54&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not quite what we’re looking for.&lt;/p&gt;
&lt;p&gt;Whilst there are ways to achieve what we want using a range method, an easier approach might be to target an &lt;a href=&#34;https://gohugo.io/functions/index-function/#readout&#34;&gt;index&lt;/a&gt; of each set of session data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
  $prices_for_two &amp;#34;one_session&amp;#34; }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ end }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we target the &lt;code&gt;prices_for_two&lt;/code&gt; data and assign it to a variable. Next we create an index of the &lt;code&gt;one_session&lt;/code&gt; data within the dataset and the target each key within the index.&lt;/p&gt;
&lt;p&gt;Now we can access the specific nested keys value and return their value directly into the corresponding table data cell.&lt;/p&gt;
&lt;p&gt;We can use the exact same code for each session package and just update the index to target the right session package each time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
    $prices_for_two &amp;#34;one_session&amp;#34; }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
    $prices_for_two &amp;#34;five_sessions&amp;#34; }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;10&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
    $prices_for_two &amp;#34;ten_sessions&amp;#34; }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The complete table looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;thead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Session(s)&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Total price&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Price per session&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Price per session, per person&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;thead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
      $prices_for_two &amp;#34;one_session&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
      $prices_for_two &amp;#34;five_sessions&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;10&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ $prices_for_two := .Site.Data.prices_for_two }} {{ with index
      $prices_for_two &amp;#34;ten_sessions&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok. So it’s not the fewest lines of code we’ve ever written, but the solution works and it’s pretty easy to understand what’s going on.&lt;/p&gt;
&lt;p&gt;For my particular needs, I created another table for the &lt;code&gt;prices_for_one.yaml&lt;/code&gt; data and updated all instances of &lt;code&gt;prices_for_two&lt;/code&gt; to &lt;code&gt;prices_for_one&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;thead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Session(s)&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Total price&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Price per session&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Price per session, per person&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;th&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;thead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ $prices_for_one := .Site.Data.prices_for_one }} {{ with index
      $prices_for_one &amp;#34;one_session&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;5&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ $prices_for_one := .Site.Data.prices_for_one }} {{ with index
      $prices_for_one &amp;#34;five_sessions&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;10&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ $prices_for_one := .Site.Data.prices_for_one }} {{ with index
      $prices_for_one &amp;#34;ten_sessions&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .total_price }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .price_per_session_per_person }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;td&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tbody&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only thing left to do from here was to use some CSS to create a tabbed table, which was made accessible through clever use of radio buttons.&lt;/p&gt;
&lt;p&gt;To make this happen, I built a quick &lt;a href=&#34;https://codepen.io/harrycresswell/pen/zYxgeLJ&#34;&gt;Codepen prototype&lt;/a&gt;, taking most of my inspiration from &lt;a href=&#34;https://kyusuf.com/post/completely-css-tabs/&#34;&gt;this fantastic article by Kenan Yusuf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we’re at the final hurdle. We need to make it possible to edit the pricing datain our table without having to dig into the data directory and edit &lt;code&gt;.yaml&lt;/code&gt; files. This will make the data nice and easy to update and maintain.&lt;/p&gt;
&lt;p&gt;This is where Forestry CMS comes in.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-forestry-front-matter-for-use-with-table-data&#34;&gt;Setting up Forestry front matter for use with table data&lt;/h2&gt;
&lt;p&gt;With your code deployed to Github or a similar remote repository, the first step is to link your repository to &lt;a href=&#34;https://forestry.io/&#34;&gt;Forestry CMS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From your Forestry dashboard click &lt;strong&gt;Add Site&lt;/strong&gt;, select &lt;strong&gt;Hugo&lt;/strong&gt; and choose the &lt;strong&gt;Version&lt;/strong&gt; you have installed on your machine.&lt;/p&gt;
&lt;p&gt;If you are unsure which version of Hugo you are running, from the command line run the following command to find out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, back in Forestry, set your &lt;strong&gt;Git provider&lt;/strong&gt; and choose the &lt;strong&gt;Repository&lt;/strong&gt; you wish to connect, making sure the branch is set to &lt;strong&gt;Master&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Forestry will then import your website.&lt;/p&gt;
&lt;h3 id=&#34;create-a-front-matter-template&#34;&gt;Create a front matter template&lt;/h3&gt;
&lt;p&gt;Now create a new front matter template to represent the pricing data structure. To do this click &lt;strong&gt;Front Matter&lt;/strong&gt; in the Sidebar of your site from within Forestry, then click the &lt;strong&gt;Add Template&lt;/strong&gt; button. Call it something descriptive like &lt;em&gt;Pricing&lt;/em&gt; or &lt;em&gt;Prices&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Select &lt;strong&gt;Create based on existing document&lt;/strong&gt; then select either &lt;code&gt;prices_for_one.yaml&lt;/code&gt; or &lt;code&gt;prices_for_two.yaml&lt;/code&gt;. It doesn’t matter which one you choose, as both are the exact same structure.&lt;/p&gt;
&lt;p&gt;Forestry will now autogenerate the template form fields based on the document, saving us from having to set this up from scratch.&lt;/p&gt;
&lt;h3 id=&#34;configure-the-sidebar&#34;&gt;Configure the sidebar&lt;/h3&gt;
&lt;p&gt;The final step is to configure the sidebar in your Forestry site settings, to show the two pricing &lt;code&gt;yaml&lt;/code&gt; files stored in the data directory.&lt;/p&gt;
&lt;p&gt;Go to &lt;em&gt;Settings&lt;/em&gt;, then &lt;em&gt;Sidebar&lt;/em&gt; and click &lt;strong&gt;Add Section&lt;/strong&gt;. Select &lt;strong&gt;Directory&lt;/strong&gt; and add a &lt;strong&gt;Label&lt;/strong&gt; to identify the two files. Calling it &lt;em&gt;Data&lt;/em&gt; is probably a good idea.&lt;/p&gt;
&lt;p&gt;Then in the &lt;em&gt;Importing Content&lt;/em&gt; section, set &lt;strong&gt;Content Directory&lt;/strong&gt; to &lt;code&gt;data&lt;/code&gt;. This tell Forestry to add content from the data directory.&lt;/p&gt;
&lt;p&gt;Make sure &lt;strong&gt;File Match&lt;/strong&gt; is set to &lt;code&gt;**/*&lt;/code&gt;, then in the &lt;em&gt;Creating Content&lt;/em&gt; section make sure &lt;strong&gt;Content Types&lt;/strong&gt; is set to &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, in the &lt;em&gt;Available Templates&lt;/em&gt; section select the &lt;em&gt;Pricing&lt;/em&gt; template we made earlier. Click &lt;strong&gt;Save&lt;/strong&gt; and you should now see your data directory in the sidebar.&lt;/p&gt;
&lt;h2 id=&#34;editing-content-in-forestry&#34;&gt;Editing content in Forestry&lt;/h2&gt;
&lt;p&gt;Now everything should be set up correctly, so you can jump into Forestry any time. Just head to &lt;strong&gt;Data&lt;/strong&gt; in the sidebar, select either &lt;code&gt;prices_for_one.yaml&lt;/code&gt; or &lt;code&gt;prices_for_two.yaml&lt;/code&gt; – depending on which you want to edit – then make the necessary changes.&lt;/p&gt;
&lt;p&gt;When you click &lt;strong&gt;Save&lt;/strong&gt;, Forestry will push the changes directly to your Git repository.&lt;/p&gt;
&lt;p&gt;If you are using a tool like &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;, then auto-deploying your site is made trivial. When Forestry updates your Git Repository, Netlify will spot the changes and deploy a new version of your site, updating the content in the process.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Using the data directory is a great way to bring custom datasets into your Hugo site, which may not directly relate to a content type in your content directory.&lt;/p&gt;
&lt;p&gt;By abstracting this data away from the templates which use it, we can keep our templates concise and avoid hardcoding values. This is useful if we want to make the data editable via a CMS.&lt;/p&gt;
&lt;p&gt;Using data files to render options in a form select or cells in a table are just two ways to consume data, but there are many more things we could do with data.&lt;/p&gt;
&lt;p&gt;Currently data can only be consumed in templates, as demonstrated in this article. You can’t yet use data to generate standalone page content, which is a shame. But, I believe there are conversations happening about adding this as a future feature. It would make working with data in Hugo even more powerful.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have questions, you can reach me on &lt;a href=&#34;https://twitter.com/harrycresswell&#34;&gt;Twitter&lt;/a&gt;. If you spot any mistakes or factual inaccuracies, please &lt;a href=&#34;https://github.com/harrycresswell/harry/issues&#34;&gt;file a GitHub issue&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;Data templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/getting-specific-data-in-a-range/11597&#34;&gt;Getting specific data in a range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cdLNKUoMc6c&#34;&gt;YAML | In One Video&lt;/a&gt; from Mike Dane&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/extracting-specific-value-from-a-nested-json-data-file/21973&#34;&gt;Extracting Specific Value from a Nested JSON Data File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Getting started with Eleventy</title>
        <link>https://azharkhan.in/articles/getting-started-with-eleventy/</link>
        <pubDate>Fri, 08 May 2020 07:56:50 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/getting-started-with-eleventy/</guid>
        <description>&lt;p class=&#34;Message&#34;&gt;
    
You can find all the code from this article over on &lt;a href=&#34;https://github.com/harrycresswell/eleventy-starter&#34;&gt;Github.com&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;This article will get you up and running with a simple &lt;a href=&#34;https://www.11ty.dev/&#34;&gt;Eleventy&lt;/a&gt; powered website and Sass pipeline. It’s 100% beginner friendly and should give you a good introduction to working with this lightweight JavaScript based static site generator.&lt;/p&gt;
&lt;p&gt;We’ll cover templating, working with data, setting up collections, and compiling Sass to CSS using NPM Scripts. By the end you should have a solid foundation, ready to build upon for your next project.&lt;/p&gt;
&lt;p&gt;So what’s the big deal with Eleventy and why is it becoming so popular? You may be wondering why we even need another static site generator (SSG) when there’s literally hundreds of SSG’s out there. I had these questions too, so before we get into it I’ll do my best to answer some of them.&lt;/p&gt;
&lt;h2 id=&#34;why-eleventy&#34;&gt;Why Eleventy?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/zachleat/&#34;&gt;Zach Leatherman&lt;/a&gt; built Eleventy in 2017 as a JavaScript alternative to Jekyll. So it will appeal, if like me, you’d rather write JavaScript than Ruby, and you’re more familiar with the NPM package library than with Ruby Gems.&lt;/p&gt;
&lt;p&gt;Eleventy is extremely simple. Zach describes Eleventy as more of a utility, than a framework. At it’s core, all it does is take templates and outputs HTML. And it takes very few files and very little code to get all this working.&lt;/p&gt;
&lt;p&gt;Perhaps the biggest sell with Eleventy is flexibility. Eleventy is, by default, zero config. Which means you don’t need a config file or in fact need to do anything much to build a website.&lt;/p&gt;
&lt;p&gt;Unlike with many other SSG’s Eleventy holds no opinions about how your project should be structured. Just initiate Eleventy inside an existing project directory and Eleventy will start building your files. You tell Eleventy where your content lives and how you prefer to structure your project.&lt;/p&gt;
&lt;p&gt;Another cool feature of Eleventy is templating. Unlike most other SSG’s with Eleventy you can choose your own engine or mix and match as many as you wish. HTML, Liquid, Markdown, Nunjucks, Handlebars, moustache, EJS, Haml, Pug, JavaScript Template Literals – you decide.&lt;/p&gt;
&lt;p&gt;But it would be wrong to think of Eleventy as just another JavaScript framework, as fundamentally it isn’t one. There’s no Eleventy-specific client-side JavaScript. Eleventy only uses JavaScript to transform your template files into static content. Everything is pre-rendered, so in that sense it’s a true SSG.&lt;/p&gt;
&lt;p&gt;Ok, enough of the talk, the best way to learn about Eleventy is to build something with it. So let’s do that now.&lt;/p&gt;
&lt;p&gt;First up we need to install the required dependencies.&lt;/p&gt;
&lt;h2 id=&#34;install-dependencies&#34;&gt;Install dependencies&lt;/h2&gt;
&lt;p&gt;Before you can do anything with Eleventy you’ll need &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt; (version 8 or higher) installed on your machine.&lt;/p&gt;
&lt;p&gt;With Node comes Node Package Manager (NPM), which we’ll use to install Eleventy.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Unlike other static site generators, which often scaffold a project when you create a new site, Eleventy requires you to make a new project directory first, then install Eleventy into that directory. Doing this will turn your directory into an Eleventy powered website.&lt;/p&gt;
&lt;p&gt;Start by making a new project directory wherever you like to keep your websites and call it something descriptive.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir eleventy-blog
cd eleventy-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;initialise-the-project-and-install-eleventy&#34;&gt;Initialise the project and install Eleventy&lt;/h3&gt;
&lt;p&gt;From inside your new project directory, create a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now install Eleventy into the directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev @11ty/eleventy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point you should have a &lt;code&gt;package.json&lt;/code&gt; file, a &lt;code&gt;package-lock.json&lt;/code&gt; file and a &lt;code&gt;node_modules&lt;/code&gt; folder in the directory.&lt;/p&gt;
&lt;h3 id=&#34;run-eleventy&#34;&gt;Run Eleventy&lt;/h3&gt;
&lt;p&gt;Next, using npx run Eleventy by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If Eleventy installed correctly, you should see a single line returned in your terminal similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Wrote 0 files in 0.01 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Everything seems to be working as expected. We don’t have any files yet, so nothing builds and &lt;code&gt;Wrote 0 files&lt;/code&gt; checks out.&lt;/p&gt;
&lt;h3 id=&#34;create-an-index-page&#34;&gt;Create an index page&lt;/h3&gt;
&lt;p&gt;Now create an &lt;code&gt;index.njk&lt;/code&gt; file at the root of your project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch index.njk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whilst it’s perfectly fine to create HTML templates with the &lt;code&gt;.html&lt;/code&gt; extension, for the scope of this tutorial we’ll be using &lt;code&gt;.njk&lt;/code&gt;, which is the extension for the Nunjucks templating language.&lt;/p&gt;
&lt;p&gt;Nunjucks is basically Liquid, but for JavaScript. So make sure you use the &lt;code&gt;.njk&lt;/code&gt; extension if you want to follow along.&lt;/p&gt;
&lt;p&gt;Inside our &lt;code&gt;index.njk&lt;/code&gt; we’ll add some basic boilerplate HTML.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My new Eleventy Blog&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To set this up I used the &lt;code&gt;! + Tab&lt;/code&gt; in VSCode. This tells the &lt;a href=&#34;https://code.visualstudio.com/docs/editor/emmet&#34;&gt;Emmet extension&lt;/a&gt; to scaffold a basic HTML document.&lt;/p&gt;
&lt;p&gt;I then updated the page title and added &lt;code&gt;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&lt;/code&gt; to the body, so we have something visible on the page.&lt;/p&gt;
&lt;p&gt;Now Eleventy has something to build. So from back in the terminal restart Eleventy to generate the template.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy
Wrote 1 file in 0.04 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This time Eleventy builds 1 file and outputs it to a new folder called &lt;code&gt;_site&lt;/code&gt; in the root directory.&lt;/p&gt;
&lt;p&gt;It looks like everything is working correctly.&lt;/p&gt;
&lt;h3 id=&#34;start-local-web-server&#34;&gt;Start local web server&lt;/h3&gt;
&lt;p&gt;To see our site in the browser we need to start the server. This will start hot-reloading our pages anytime we make changes to our code. We can do this by adding the &lt;code&gt;--serve&lt;/code&gt; flag to our original command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy --serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now the server is running you should see &lt;code&gt;Hello World!&lt;/code&gt; in the browser when you navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt; in a web browser.&lt;/p&gt;
&lt;p&gt;Nice. We have a website up and running.&lt;/p&gt;
&lt;p&gt;Anytime you need to stop Eleventy from serving your website, type &lt;code&gt;ctrl + c&lt;/code&gt; in the command line to exit the server.&lt;/p&gt;
&lt;h2 id=&#34;project-structure-and-configuration&#34;&gt;Project structure and configuration&lt;/h2&gt;
&lt;p&gt;As mentioned, Eleventy is zero config by default. As we just discovered, this means you don&amp;rsquo;t actually need a configuration file for Eleventy to work.&lt;/p&gt;
&lt;p&gt;However, if you want to organise your files in a custom folder structure, you’ll need to tell Eleventy where to find those files. To do this we’ll need to add a config file.&lt;/p&gt;
&lt;p&gt;Before we create our config file, let’s make a &lt;code&gt;src&lt;/code&gt; directory in the root of the project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the “source“ directory where we’ll store all our development related code. When we’re working on our project this is where we will spend most of our time. It’s the code Eleventy will build into html templates, ready for the web.&lt;/p&gt;
&lt;p&gt;From the project root, make another directory inside &lt;code&gt;src&lt;/code&gt; called &lt;code&gt;site&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src/site
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now move your &lt;code&gt;index.njk&lt;/code&gt; file from the root into the newly created &lt;code&gt;src/site&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Next create a new file called &lt;code&gt;.eleventy.js&lt;/code&gt; at the root of your project. This is our config file which we’ll use to tell Eleventy where to locate our files and directories.&lt;/p&gt;
&lt;p&gt;From the project root type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .eleventy.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have a new &lt;code&gt;.eleventy.js&lt;/code&gt; file at the project root.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;.eleventy.js&lt;/code&gt; add custom input and output options to reflect the changes we just made to our directory structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;src/site&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_site&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here? First we create a function as an exportable module, then we pass in a config argument and return the current configuration data as an object.&lt;/p&gt;
&lt;p&gt;By setting input to &lt;code&gt;src/site&lt;/code&gt;, we’re telling Eleventy to find our files in the &lt;code&gt;src/site&lt;/code&gt; directory. If we don’t do this, then Eleventy won’t process any of our files. The input location can be anywhere you like, providing you set the location in your &lt;code&gt;eleventy.js&lt;/code&gt; config.&lt;/p&gt;
&lt;p&gt;The output directory is set to &lt;code&gt;_site&lt;/code&gt;, so Eleventy will build the project to this folder. However you could easily change this to something like &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;dist&lt;/code&gt; if you prefer, and Eleventy will build the project there instead. This is totally optional and more a personal preference than anything else.&lt;/p&gt;
&lt;p&gt;Next restart the server by running the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy --serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will re-build the project and serve it in the browser.&lt;/p&gt;
&lt;p&gt;If all went well you should still see “Hello World” in the browser at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Currently our website is just a simple single page site. So, let’s make some improvements by building our first template.&lt;/p&gt;
&lt;h2 id=&#34;building-a-layout-template&#34;&gt;Building a layout template&lt;/h2&gt;
&lt;p&gt;Making a base layout template for our website is a good place to start. Our base template will act as the default layout for all the pages we create. In other words, it will store any code that will be globally applied to every page of our website.&lt;/p&gt;
&lt;p&gt;By creating this template we’re saving ourselves from having to manually copy and paste code each time we create a new page, which is one of the main advantages of creating templates.&lt;/p&gt;
&lt;p&gt;To set up a base template, first create a new directory called &lt;code&gt;_includes&lt;/code&gt; inside the &lt;code&gt;src/site&lt;/code&gt; folder. Then. inside &lt;code&gt;_includes&lt;/code&gt;, create another new directory called &lt;code&gt;layouts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can do this from the project root by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src/site/_includes src/site/_includes/layouts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Change directory into the layouts directory and create a file called &lt;code&gt;base.njk&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd src/site/_includes/layouts
touch base.njk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, move the contents of &lt;code&gt;index.njk&lt;/code&gt; into &lt;code&gt;base.njk&lt;/code&gt;. Your base file should now look like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My new Eleventy Blog&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now replace &lt;code&gt;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&lt;/code&gt; in the body with the &lt;code&gt;{{ content | safe }}&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My new Eleventy Blog&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ content | safe }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tells Eleventy where we want the content from markdown files and other data sources to display in our template. Now we can use &lt;code&gt;base.njk&lt;/code&gt; as the template for any other page we create.&lt;/p&gt;
&lt;p&gt;Back inside &lt;code&gt;.eleventy.js&lt;/code&gt; we can update our directory structure to include the location of our includes folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;src/site&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_includes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_site&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we’re using the default location for our includes folder, this step isn’t 100% necessary and everything will work fine without adding the directory to our config.&lt;/p&gt;
&lt;p&gt;However should we wish to change the location in the future, we can now simple head into our config and update the directory.&lt;/p&gt;
&lt;h2 id=&#34;updating-the-homepage&#34;&gt;Updating the homepage&lt;/h2&gt;
&lt;p&gt;Now we have our base template, but our &lt;code&gt;index.njk&lt;/code&gt; file is empty, as we moved all the content into the template.&lt;/p&gt;
&lt;p&gt;Back inside &lt;code&gt;index.njk&lt;/code&gt;, we can use front matter to add useful data to the page.&lt;/p&gt;
&lt;p&gt;If you’re new to front matter, think of it as data associated with the document in which it resides. Front matter takes the form of key value pairs set between two sets of triple dashes, at the top of the file.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
data: this is front matter!
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In our front matter, we can use the layout property to tell Eleventy which template to use for our &lt;code&gt;index.njk&lt;/code&gt; page. In this case we want to use our new &lt;code&gt;base.njk&lt;/code&gt; template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;layouts/base.njk&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next add some content to the page.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;---
layout: layouts/base.njk
---

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Welcome to my new Eleventy Blog!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are still in the layouts directory, move back up to the project root by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ../../../../
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now from the project root, restart the server using &lt;code&gt;npx @11ty/eleventy --serve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If everything worked correctly, you should see the following in the browser:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Welcome to my new Eleventy Blog!
Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That means &lt;code&gt;index.njk&lt;/code&gt; is now using the &lt;code&gt;base.njk&lt;/code&gt; template for its layout. This is exactly what we want.&lt;/p&gt;
&lt;p&gt;Now let’s look at some other sources of data.&lt;/p&gt;
&lt;h2 id=&#34;working-with-data-collections&#34;&gt;Working with data collections&lt;/h2&gt;
&lt;p&gt;Collections provide a way to group content together.&lt;/p&gt;
&lt;p&gt;There are two ways to create collections of documents in Eleventy. You can either use the &lt;code&gt;tag&lt;/code&gt; property in the front matter of content files, or you can create collections programatically, via the config file. We’ll use the latter approach.&lt;/p&gt;
&lt;p&gt;Let’s add a collection of posts, by creating a new directory called posts inside the &lt;code&gt;src/site&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src/site/posts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, create a new markdown file for your first post. We’ll use markdown as it’s a simple format for long-form written content.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch src/site/posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inside the post file, add front matter data for a title, date and layout. We’ll use the base layout as we did before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is my first post&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-05-08&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;layouts/base.njk&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to add some content to the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is my first post&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-08-24&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;layouts/base.njk&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;This&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;is&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;paragraph.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can render front matter data in the post content by specifying the variable name that stores the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;This is my first post&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-08-24&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;layouts/base.njk&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# {{ title }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;This&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;is&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;paragraph.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;{{ title }}&lt;/code&gt; will render our title in our post. We’re using the &lt;code&gt;#&lt;/code&gt; markdown symbol to set the title as a top level &lt;code&gt;h1&lt;/code&gt; heading.&lt;/p&gt;
&lt;p&gt;For more on writing markdown check out Adam Pritchard’s &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;Markdown Cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before you continue, create a few more posts, so you have more than one post in your collection. You can do this by duplicating the first post and updating the file name and post title. This will help us render a list of posts a bit later on.&lt;/p&gt;
&lt;h2 id=&#34;register-a-collection&#34;&gt;Register a collection&lt;/h2&gt;
&lt;p&gt;Now we have a post collection we need to return to our &lt;code&gt;.eleventy.js&lt;/code&gt; config and register the collection. Doing this will allow us to render the content somewhere on our website.&lt;/p&gt;
&lt;p&gt;We can register the post collection by adding a collection called posts onto the config object and using the &lt;code&gt;addCollection&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Pass in the collection name (in this case “posts”), which takes a new &lt;code&gt;collection&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Now we need to return the collection object and add a method called &lt;code&gt;getFilteredByGlob&lt;/code&gt;. This provides us with a way to specify the path in our source directory where the post markdown files can be found.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addCollection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getFilteredByGlob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;src/site/posts/*.md&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;src/site&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_includes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_site&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we’re using the universal &lt;code&gt;*&lt;/code&gt; selector to look for all markdown files inside the posts directory.&lt;/p&gt;
&lt;p&gt;With our new posts collection registered, next we’ll want to render the posts somewhere on our website, so we can actually see them in the browser.&lt;/p&gt;
&lt;p&gt;But before we do that, make sure you re-run the server to propagate the changes we just made to our configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx @11ty/eleventy --serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Anytime you make a change to your &lt;code&gt;eleventy.js&lt;/code&gt; config file you will need to restart the server to propagate the changes.&lt;/p&gt;
&lt;h2 id=&#34;list-a-collection-on-the-homepage&#34;&gt;List a collection on the homepage&lt;/h2&gt;
&lt;p&gt;Back in our &lt;code&gt;index.njk&lt;/code&gt; file, we’ll use Nunjucks templating syntax and a &lt;code&gt;for&lt;/code&gt; loop to iterate over all of the posts in our posts collection.&lt;/p&gt;
&lt;p&gt;Then inside the for loop we can add &lt;code&gt;{{ post.data.title }}&lt;/code&gt; to target the title in the front matter and render it on the page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% for post in collections.posts %}
	{{ post.data.title }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we can add some HTML tags to semantically style our code, adding &lt;code&gt;| reverse&lt;/code&gt; to make sure the loop displays the most recent posts first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {% for post in collections.posts | reverse %}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ post.data.title }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have a list of our posts, but we need a way to click through to each individual post. To do this we can add an anchor tag and add &lt;code&gt;{{ post.url }}&lt;/code&gt; to the &lt;code&gt;href&lt;/code&gt; attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {% for post in collections.posts %}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ post.url }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ post.data.title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when you open the browser you should see your posts rendered on the homepage. You can also click on the post titles to open the corresponding post pages.&lt;/p&gt;
&lt;p&gt;Seeing as we now have more than one page it’s might be a good idea to add a navigation, so we don’t have to use the browser back button the whole time.&lt;/p&gt;
&lt;h2 id=&#34;include-a-navigation&#34;&gt;Include a navigation&lt;/h2&gt;
&lt;p&gt;We want our navigation to consistently feature on every page of our website, so we can either add it directly to the &lt;code&gt;base.njk&lt;/code&gt; template. Or create a partial file called &lt;code&gt;nav.njk&lt;/code&gt; and include it in our &lt;code&gt;base.njk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Personally I prefer the second method as it’s more modular and keeps files small and simple. The advantages of doing this will become apparent as your website grows, or as you create different projects and want to re-use your code.&lt;/p&gt;
&lt;p&gt;Make a new file called &lt;code&gt;nav.njk&lt;/code&gt; in the includes directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch src/site/_includes/nav.njk
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inside &lt;code&gt;nav.njk&lt;/code&gt; create a &lt;code&gt;nav&lt;/code&gt; element and add an anchor tag that links to the homepage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now back in &lt;code&gt;base.njk&lt;/code&gt;, use the include syntax to render your new navigation file in the template.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% include &amp;quot;nav.njk&amp;quot; %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your base template should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My new Eleventy Blog&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {% include &amp;#34;nav.njk&amp;#34; %}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

    {{ content | safe }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And if all went well your navigation should now display on each page in the browser.&lt;/p&gt;
&lt;p&gt;You can apply the exact same process when creating other include files such as a &lt;code&gt;footer.njk&lt;/code&gt; or a &lt;code&gt;sidebar.njk&lt;/code&gt;. But that’s for you to decide.&lt;/p&gt;
&lt;p&gt;Now let’s take a look at working with some other types of data.&lt;/p&gt;
&lt;h2 id=&#34;working-with-globally-scoped-data-files&#34;&gt;Working with globally scoped data files&lt;/h2&gt;
&lt;p&gt;So far we’ve looked at scoping data locally by using front matter in our post pages and on our index page.&lt;/p&gt;
&lt;p&gt;Front matter data is directly associated with the page or template in which it resides, so it’s quite specific in that sense.&lt;/p&gt;
&lt;p&gt;However, sometimes we may want to scope data globally and expose data to all of our template files. This is useful for data associated with our entire website. We can store this type of data in a data directory and work with either JSON data or JavaScript.&lt;/p&gt;
&lt;p&gt;To see this in action, lets create a new file called &lt;code&gt;site.json&lt;/code&gt; in &lt;code&gt;.src/site/_data&lt;/code&gt; and define some site wide variables which we can use globally across our website.&lt;/p&gt;
&lt;p&gt;First create the directory and file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src/site/_data &amp;amp;&amp;amp; touch src/site/_data/site.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To keep things simple, start by adding a title and description for your website to the new &lt;code&gt;site.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;My first Eleventy Blog&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A simple website built with Eleventy&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This data can now be accessed in any template by using the file name followed by one of the object keys.&lt;/p&gt;
&lt;p&gt;To demonstrate this, let’s change the site title in our base template to use the data from our new &lt;code&gt;site.json&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ site.title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {% include &amp;#34;nav.njk&amp;#34; %}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

    {{ content | safe }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see we are now using &lt;code&gt;{{ site.title }}&lt;/code&gt; to render the site title from the JSON object stored in &lt;code&gt;_data/site.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What you decide to store in this file is very much up to you, but consider things like site language, url, repository, navigation items and social links as a few possible ideas.&lt;/p&gt;
&lt;p&gt;Now we have our basic site up and running let’s take a look at a building an assets pipeline with NPM Scripts so we can work with Sass and automate some parts of our workflow.&lt;/p&gt;
&lt;h2 id=&#34;npm-scripts&#34;&gt;NPM Scripts&lt;/h2&gt;
&lt;p&gt;NPM Scripts provide a simple way to write commands that will run functions from NPM packages. By installing certain packages and writing a script, we can automate certain tasks such as watching for changes to our code or compiling Sass styles to regular CSS.&lt;/p&gt;
&lt;p&gt;Unlike other build tools such as Gulp or Grunt, which require a dedicated file and their own dependencies, NPM Scripts work natively with NPM and run directly from the scripts object within a &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Further down the line we can use NPM scripts to perform other tasks such as minifying JavaScript and automating an assets pipeline, but let’s not get ahead of ourselves just yet.&lt;/p&gt;
&lt;h3 id=&#34;compiling-sass-to-css&#34;&gt;Compiling Sass to CSS&lt;/h3&gt;
&lt;p&gt;Let’s start by installing the &lt;a href=&#34;https://github.com/sass/node-sass&#34;&gt;node-sass&lt;/a&gt; dependency which will compile any &lt;code&gt;.scss&lt;/code&gt; file to regular CSS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install node-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We include the &lt;code&gt;--save-dev&lt;/code&gt; flag with our command to list our new package under &lt;strong&gt;devDependencies&lt;/strong&gt; in &lt;em&gt;package.json&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;@11ty/eleventy&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^0.8.3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^4.13.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the package is installed we need to write a script to compile our Sass to CSS. We do this in the &lt;em&gt;scripts&lt;/em&gt; object inside our &lt;em&gt;package.json&lt;/em&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass --output-style compressed -o src/site/_includes/css src/scss&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here?&lt;/p&gt;
&lt;p&gt;First we give our script a name, in this case &lt;em&gt;scss&lt;/em&gt;. We’ll use the name when we write the command in the terminal, for example &lt;code&gt;npm run scss&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next we specify the package that our script will use, in this case that’s &lt;code&gt;node-sass&lt;/code&gt; (the one we just installed). Then we set some parameters, using the &lt;code&gt;--&lt;/code&gt; flag notation. First we tell &lt;em&gt;node-sass&lt;/em&gt; that we want the output style compressed`, as we want our final CSS file size as small as possible.&lt;/p&gt;
&lt;p&gt;Next we add the output directory, &lt;code&gt;src/site/_includes/css&lt;/code&gt;. This is where &lt;em&gt;node-sass&lt;/em&gt; will auto-generate our CSS. Finally we specify the source directory. This is where our Sass will live and where we will spend our time writing our styles.&lt;/p&gt;
&lt;p&gt;At this point, running the command won’t do much. To change that we’ll need write some Sass, so that &lt;em&gt;node-sass&lt;/em&gt; has something to compile and compress.&lt;/p&gt;
&lt;p&gt;So let’s make a new directory for our Sass and add a source file so we can write some styles.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir src/scss &amp;amp;&amp;amp; touch src/scss/main.scss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inside &lt;em&gt;main.scss&lt;/em&gt; add some basic styles so we have something to compile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#333&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sans-serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;tomato&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run scss
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now see a file called &lt;em&gt;main.css&lt;/em&gt; at &lt;code&gt;src/site/_includes/css&lt;/code&gt;, which contains your minified styles.&lt;/p&gt;
&lt;p&gt;It’s worth pointing out that we’re using the source includes folder as the destination for our compiled CSS so we can make use of Eleventy’s built-in features.&lt;/p&gt;
&lt;p&gt;Remember, we set &lt;code&gt;includes: &amp;quot;_includes&amp;quot;&lt;/code&gt; inside our config file, so Eleventy will watch this folder for changes and process any files it finds inside, before it live reloads the page.&lt;/p&gt;
&lt;p&gt;By doing this we avoid the need to install further NPM packages such as &lt;a href=&#34;https://www.browsersync.io/&#34;&gt;Browsersync&lt;/a&gt; and keep our dependencies to a minimum.&lt;/p&gt;
&lt;h3 id=&#34;watching-for-changes&#34;&gt;Watching for changes&lt;/h3&gt;
&lt;p&gt;Although Eleventy will watch for changes to our CSS, we still need a way to watch for changes to our SCSS, so we don’t have to run our &lt;em&gt;scss&lt;/em&gt; script every single time we add styles or make a change.&lt;/p&gt;
&lt;p&gt;Essentially, we want to do two things. First, watch our &lt;code&gt;src/scss&lt;/code&gt; folder for changes, then run our &lt;em&gt;scss&lt;/em&gt; script when those changes occur.&lt;/p&gt;
&lt;p&gt;Let’s start by installing &lt;a href=&#34;https://www.npmjs.com/package/onchange&#34;&gt;onchange&lt;/a&gt;, a helpful package that will watch file sets and run a command when anything is added, changed or deleted.&lt;/p&gt;
&lt;p&gt;From the project root run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install onchange --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now see something like &lt;code&gt;&amp;quot;onchange&amp;quot;: &amp;quot;^6.1.0&amp;quot;&lt;/code&gt; listed in the &lt;strong&gt;devDependencies&lt;/strong&gt; object inside &lt;em&gt;package.json&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;@11ty/eleventy&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^0.8.3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^4.13.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;onchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^6.1.0&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to write a script to watch for our Sass changes and run our &lt;em&gt;scss&lt;/em&gt; script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;watch:css&amp;quot;: &amp;quot;onchange &#39;src/scss&#39; -- npm run scss&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now run the following command in the terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run watch:css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By doing so, &lt;em&gt;onchange&lt;/em&gt; will watch our &lt;code&gt;src/scss&lt;/code&gt; directory for changes, then run our &lt;em&gt;scss&lt;/em&gt; script any time we make a change to a SCSS file. This will then compiling our Sass to CSS.&lt;/p&gt;
&lt;p&gt;This is great and exactly what we want. But now we have a new problem. We want to run the server at the same time, so we can reload the page and see those changes as and when they happen in real-time, without having to manually reload the browser.&lt;/p&gt;
&lt;h3 id=&#34;running-scripts-in-parallel&#34;&gt;Running scripts in parallel&lt;/h3&gt;
&lt;p&gt;If you remember, we can run the server with the command &lt;code&gt;npx @11ty/eleventy --serve&lt;/code&gt; or &lt;code&gt;eleventy --serve&lt;/code&gt;. Let’s first create a script to make this easier.&lt;/p&gt;
&lt;p&gt;Inside the scripts object in &lt;em&gt;package.json&lt;/em&gt; create a new script called &lt;em&gt;serve&lt;/em&gt; which runs the command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass --output-style compressed -o src/site/_includes/css src/scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;watch:css&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;onchange &amp;#39;src/scss&amp;#39; -- npm run scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;serve&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eleventy --serve&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have two scripts that we want to run at the same time, &lt;em&gt;serve&lt;/em&gt; to run the server and &lt;em&gt;watch:css&lt;/em&gt; to compile our Sass to CSS. Doing this will allow us to see changes we make to our Sass appear in real-time in the browser.&lt;/p&gt;
&lt;p&gt;To do this we can install one more script called &lt;a href=&#34;https://www.npmjs.com/package/npm-run-all&#34;&gt;npm-run-all&lt;/a&gt; which will allow us to run two scripts in parallel.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install npm-run-all --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Inside your &lt;code&gt;package.json&lt;/code&gt; file you should now see &lt;em&gt;npm-run-all&lt;/em&gt; listed under the &lt;em&gt;devDependecies&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;@11ty/eleventy&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^0.8.3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^4.13.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;npm-run-all&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^4.1.5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;onchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^6.1.0&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, create another script and call it &lt;em&gt;start&lt;/em&gt;. We’ll run this script whenever we start development. The &lt;em&gt;npm-run-all&lt;/em&gt; package has an option called &lt;code&gt;run-p&lt;/code&gt; which stands for ‘run-parallel‘. We can use it to run both scripts at the same time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass --output-style compressed -o src/site/_includes/css src/scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;watch:css&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;onchange &amp;#39;src/scss&amp;#39; -- npm run scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;serve&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eleventy --serve&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;run-p serve watch:css&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we run &lt;code&gt;npm start&lt;/code&gt; everything is working as intended. Our site is served locally in the browser and Eleventy will live reload the page anytime we make changes to our Sass.&lt;/p&gt;
&lt;p&gt;We’re almost there.&lt;/p&gt;
&lt;h2 id=&#34;clean-and-build&#34;&gt;Clean and build&lt;/h2&gt;
&lt;p&gt;Now we need a way to build a fresh production version of the site ready to publish on the web. To do this, first we want to remove the existing contents of &lt;code&gt;_site&lt;/code&gt;, so that nothing is unintentionally carried over from a previous build.&lt;/p&gt;
&lt;p&gt;Let’s write a &lt;em&gt;clean&lt;/em&gt; script and use the &lt;a href=&#34;https://www.ibm.com/support/knowledgecenter/en/ssw_aix_72/r_commands/rm.html&#34;&gt;rm&lt;/a&gt; command, which removes the entries for the specified file parameter from a directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;clean&amp;quot;: &amp;quot;rm -rf _site/*&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice we’re using the &lt;code&gt;-rf&lt;/code&gt; flag, where &lt;code&gt;r&lt;/code&gt; permits recursive removal of directories and &lt;code&gt;f&lt;/code&gt; prevents a prompt before removing a write-protected file. Next we specify the folder name, &lt;code&gt;_site/&lt;/code&gt; and use the global operator, &lt;code&gt;*&lt;/code&gt;, to target all files.&lt;/p&gt;
&lt;p&gt;Now we have our &lt;em&gt;clean&lt;/em&gt; script which removed the contents of our &lt;code&gt;_site&lt;/code&gt; folder, the final thing left to do is create a &lt;em&gt;build&lt;/em&gt; script which runs our &lt;em&gt;clean&lt;/em&gt; script, then builds our production ready site.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;build&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; eleventy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our scripts object now looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-sass --output-style compressed -o src/site/_includes/css src/scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;watch:css&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;onchange &amp;#39;src/scss&amp;#39; -- npm run scss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;serve&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eleventy --serve&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;run-p serve watch:css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;clean&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rm -rf _site/*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;npm run clean &amp;amp;&amp;amp; eleventy&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have six scripts, however in most cases we’ll only ever need to run our &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;build&lt;/em&gt; script, as these act as the entry point to the others.&lt;/p&gt;
&lt;p&gt;We can now use the command &lt;code&gt;npm run build&lt;/code&gt; anytime we want to build a fresh copy of the site to the &lt;code&gt;_site&lt;/code&gt; folder.&lt;/p&gt;
&lt;h2 id=&#34;adding-the-finishing-touches&#34;&gt;Adding the finishing touches&lt;/h2&gt;
&lt;p&gt;Before we finish we still need to do a couple of things. If you haven’t already done so, you will want to initiate Git, so you can keep track of changes in your project and push your work to Github.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next let’s add a &lt;code&gt;.gitignore&lt;/code&gt; file at the project root. Inside the file add the following two lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node_modules
_site
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first line will prevent Git from tracking our &lt;em&gt;node modules&lt;/em&gt; directory. Our project only requires dev dependencies, which help us with the development stage of our our website, so we don’t want to accidentally upload them to the server when the time comes to upload our site.&lt;/p&gt;
&lt;p&gt;Likewise we don’t want to upload our &lt;em&gt;_site&lt;/em&gt; directory to Github as this will be created when we run our scripts or automated by a deployment tool such as Netlify. So the second line takes care of that.&lt;/p&gt;
&lt;p&gt;Finally, let’s create a &lt;a href=&#34;https://github.com/harrycresswell/eleventy-starter/blob/master/README.md&#34;&gt;README.md&lt;/a&gt; file. This acts as helpful documentation, both for us – so we remember how to install and use our project – and for other developers who might want to &lt;a href=&#34;https://github.com/harrycresswell/eleventy-starter&#34;&gt;clone a copy from Github&lt;/a&gt; and build something with it.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;What we’ve built here is far from a complete website, but the concepts covered, such as templating, working with data, setting up collections and building a Sass pipeline should provide a good starting point to help you hit the ground running with Eleventy powered websites.&lt;/p&gt;
&lt;p&gt;What I love most about Eleventy is it’s simplicity and lack of opinion. Structuring your project however you wish and not having to rely on a framework to do it is satisfying. While writing HTML, CSS and JavaScript, in conjunction with your preferred templating language feels like the way it should be.&lt;/p&gt;
&lt;p&gt;With the addition of a few NPM Scripts we can maintain a minimal build process which relies on very few dependencies. As our project matures this should hopefully mean less time spent fixing broken dependencies and more time improving our website.&lt;/p&gt;
&lt;p&gt;Until recently &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; has been my go-to SSG of choice, primarily because it’s super fast and has zero dependencies, which makes it a solid choice. But writing JavaScript over Go is certainly appealing, and perhaps the more familiar language for many of us.&lt;/p&gt;
&lt;p&gt;Web development has become increasingly complex over the years, but it doesn’t have to be. There are some great tools out there to help you &lt;a href=&#34;https://harrycresswell.com/articles/intentions-2020/#keep-it-simple&#34;&gt;keep it simple&lt;/a&gt; and Eleventy sure fits that bill.&lt;/p&gt;
&lt;h2 id=&#34;further-reading-and-credits&#34;&gt;Further reading and credits&lt;/h2&gt;
&lt;p&gt;I wanted to add this last part to give credit where credit is due. Most of what I know about Eleventy I’ve learnt from the following resources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zachleat.com/web/introducing-eleventy/&#34;&gt;Introducing Eleventy&lt;/a&gt; by Zach Letherman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.11ty.io/docs/&#34;&gt;Official Eleventy Docs&lt;/a&gt; by Zach Letherman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://daverupert.com/2019/08/what-i-like-about-eleventy/&#34;&gt;What I like about Eleventy&lt;/a&gt; from Dave Rupert&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keepinguptodate.com/pages/2019/06/creating-blog-with-eleventy/&#34;&gt;Creating a blog with Eleventy&lt;/a&gt; from Jon Keeping&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24ways.org/2018/turn-jekyll-up-to-eleventy/&#34;&gt;Turn Jekyll up to Eleventy&lt;/a&gt; from Paul Lloyd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also found Brian Robinson’s video series &lt;a href=&#34;https://www.youtube.com/watch?v=p7TkCS01lI8&amp;amp;t=1358s&#34;&gt;Building a Static Site with Eleventy&lt;/a&gt; helpful, and generally just poking around in a ton of Git repos to see how things are done.&lt;/p&gt;
&lt;p&gt;There’s a great list of &lt;a href=&#34;https://www.11ty.io/docs/sites/&#34;&gt;sites using Eleventy&lt;/a&gt; in the docs. Some include links to their source code, so make sure you check a few out.&lt;/p&gt;
&lt;p&gt;My understanding of NPM Scripts and the script workflow I used was heavily inspired by two fantastic articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://css-irl.info/a-modern-front-end-workflow-part-1/&#34;&gt;A modern front-end workflow&lt;/a&gt; by Michelle Barker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/why-npm-scripts/&#34;&gt;Why NPM Scripts&lt;/a&gt; by Damon Bauer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;I’ve done my best to crosscheck everything in this article, but if you spot any mistakes or have any issues &lt;a href=&#34;mailto:studio@harrycresswell.com&#34;&gt;please let me know&lt;/a&gt; and I will endeavor to make the necessary changes or help you out where I can.&lt;/em&gt;&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Accessibility check your writing on macOS</title>
        <link>https://azharkhan.in/articles/accessibility-checking-writing-mac-os/</link>
        <pubDate>Thu, 30 Apr 2020 11:08:58 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/accessibility-checking-writing-mac-os/</guid>
        <description>&lt;p&gt;Your macOS machine will read any document out loud to you. Did you know that? Until only a few weeks ago, I honestly had no idea about most of the accessibility features Mac ships with.&lt;/p&gt;
&lt;p&gt;I found myself watching &lt;a href=&#34;https://www.youtube.com/watch?v=TiP7aantnvE&amp;amp;t=248s&#34;&gt;Molly Burke&lt;/a&gt;, a partially sighted Youtuber, explain how she uses her laptop on a daily basis. Molly, like many, depends on a screen reader and accessibility features to do simple things that most of us take for granted, like surfing the internet.&lt;/p&gt;
&lt;p&gt;Not long after that I heard Amruta Ranade mention a macOS tool called ”text to speech” in her video on &lt;a href=&#34;https://dev.to/amrutaranade/how-to-write-a-blog-post-the-four-drafts-method-1k7b&#34;&gt;The four-drafts&lt;/a&gt; method. In short, Amruta uses Text to Speech to listen for any awkward phrasing or weird sentence structure in her writing.&lt;/p&gt;
&lt;p&gt;This totally blew my mind. Why wasn’t I doing this? After giving it some thought, I had one of those real ”ahah” moments.&lt;/p&gt;
&lt;p&gt;It went something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your writing doesn’t make sense when you hear it read by a screen reader, then it’s simply not accessible to everyone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I’ve written it down it seems kinda obvious. But I’m ashamed to say it something I’ve failed to appreciate until very recently. I’m sure I’m not the only one either.&lt;/p&gt;
&lt;p&gt;So I want to show you how to change that.&lt;/p&gt;
&lt;p&gt;Text to Speech is super easy to set up. You don’t need to install any fancy software, you just need to be a Mac user running Mac Sierra or above.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-text-to-speech&#34;&gt;Setting up Text to Speech&lt;/h2&gt;
&lt;p&gt;Here’s the 5 steps to setting up Text to Speech on your Mac, so you can cross check your writing with accessibility in mind, and make sure it’s easy to read for as many people as possible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;System Preferences&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Accessibility&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Now select &lt;strong&gt;Speech&lt;/strong&gt; from the left panel&lt;/li&gt;
&lt;li&gt;Check the box that says &lt;em&gt;Speak selected text when the key is pressed&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Default key should be set to &lt;code&gt;Option+Esc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can select the text you want macOS to read back to you, and press &lt;code&gt;Option + Esc&lt;/code&gt; to activate.&lt;/p&gt;
&lt;p&gt;That’s it. You should now here you text read back to you.&lt;/p&gt;
&lt;p&gt;This should work pretty much with any text you select. Whether you’re using a writing app or in a browser, it works the same.&lt;/p&gt;
&lt;h2 id=&#34;customising-your-reader-voice&#34;&gt;Customising your reader voice&lt;/h2&gt;
&lt;p&gt;There are a ton of different system voices to choose from. Just head back to the &lt;strong&gt;Speech&lt;/strong&gt; panel and choose a new one from the &lt;em&gt;system voice&lt;/em&gt; select options.&lt;/p&gt;
&lt;p&gt;If you’re not happy with the installed choices, then select &lt;em&gt;customize&lt;/em&gt; in the dropdown list and download a new one based on your prefered country and accent.&lt;/p&gt;
&lt;p&gt;It’s a good bit of fun listening to all the different voices and finding one you like.&lt;/p&gt;
&lt;p&gt;As a native English speaker, the English voice feels a bit too robotic for my liking. I guess I know it too well. So I usually stick with an accent I’m less familiar with, as it feels a bit more natural.&lt;/p&gt;
&lt;p&gt;Right now my favourite is Scottish Fiona. But you might find Chinese Ting-Ting or Danish Magnus more to your liking.&lt;/p&gt;
&lt;h2 id=&#34;customising-speaking-rate&#34;&gt;Customising speaking rate&lt;/h2&gt;
&lt;p&gt;To change the speed of your speaker voice, you will find a slider where you can adjust the speaking rate from slow to fast.&lt;/p&gt;
&lt;p&gt;To me, some voices feel much slower than others, so I find myself adjusting the speed accordingly, depending on which voice I choose.&lt;/p&gt;
&lt;p&gt;As you get more familiar with your chosen voice, no doubt you’ll want to speed things up a bit.&lt;/p&gt;
&lt;p&gt;Ok, that’s all from me for now. Go have some fun with it.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techuntold.com/convert-text-to-speech-mac/&#34;&gt;How to Convert Text to Speech on Mac&lt;/a&gt; by Hemant Mendiratta&lt;/li&gt;
&lt;li&gt;Molly Burke &lt;a href=&#34;https://www.youtube.com/watch?v=TiP7aantnvE&amp;amp;t=248s&#34;&gt;How I use technology as a blind person&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/amrutaranade/how-to-write-a-blog-post-the-four-drafts-method-1k7b&#34;&gt;How to write a blog post: The four-drafts method&lt;/a&gt; from Amruta Ranade&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Taking notes while you’re out running</title>
        <link>https://azharkhan.in/articles/taking-notes-while-running/</link>
        <pubDate>Wed, 22 Apr 2020 11:01:05 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/taking-notes-while-running/</guid>
        <description>&lt;p&gt;In a ideal world good ideas arrive just at the right time, when you’re sat at a desk with a pen in hand and paper to write on (or writing software to take notes in). But the reality is that it doesn’t always work this way.&lt;/p&gt;
&lt;p&gt;I have a lot of ideas while I’m out running. Running clears my head, it’s a great time think. But it‘s a problem.&lt;/p&gt;
&lt;p&gt;How do you write your ideas down without stopping?&lt;/p&gt;
&lt;p&gt;Maybe you don’t bother. You could just run faster. Maybe you’ll make it home before you forget your idea. Sometimes this works. And as a nice little bonus you usually record a pretty quick run.&lt;/p&gt;
&lt;p&gt;But if your brain is in overdrive and the ideas keep coming, it doesn’t work so well. Ideas start stacking up, you replace one with another and soon enough you’ve forgotten all the ”good” ones.&lt;/p&gt;
&lt;p&gt;So here’s a dirt simple approach, which you might have more luck with. It involves an iPhone (sorry Android friends, this is where we part ways).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buy a &lt;a href=&#34;https://www.amazon.co.uk/Mobile-Phone-Armbands/b?node=4913455031&#34;&gt;mobile phone armband&lt;/a&gt;, they’re super cheap and make you look like you know what you’re doing&lt;/li&gt;
&lt;li&gt;Set up Siri, so you can voice activate with ”Hey Siri“&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://support.apple.com/en-us/HT205773&#34;&gt;Notes&lt;/a&gt; app, then use the command ”Hey Siri, take a note”&lt;/li&gt;
&lt;li&gt;Siri wakes up and asks you what you’d like to say&lt;/li&gt;
&lt;li&gt;You speak your idea and Siri creates a new note&lt;/li&gt;
&lt;li&gt;You carry on thinking up ideas while you run&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I told you it was simple. &lt;a href=&#34;https://harrycresswell.com/articles/intentions-2020/#keep-it-simple&#34;&gt;I like to keep it simple&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, if this worked with &lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt; then we’d really be in business. I wouldn’t have to transfer notes manually and that would be awesome. Maybe that time will come.&lt;/p&gt;
&lt;p&gt;But for now, it’s a pretty good solution and a small price to pay to remember an idea which could turn into something great. Or not.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Listing page content in Hugo</title>
        <link>https://azharkhan.in/articles/listing-page-content-in-hugo/</link>
        <pubDate>Wed, 15 Apr 2020 10:50:11 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/listing-page-content-in-hugo/</guid>
        <description>&lt;p&gt;In Hugo, &lt;a href=&#34;https://bepsays.com/en/2016/12/19/hugo-018/&#34;&gt;everything is a page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common thing to do with these pages is make lists of them. By doing so you make your content easily accessible to readers.&lt;/p&gt;
&lt;p&gt;A list of pages, at the very least, might look like a collection of page titles, which hyperlink to the pages themselves.&lt;/p&gt;
&lt;p&gt;In plain old HTML that might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #2&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #3&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that’s just the basics. You can create a list of any data associated with your content.&lt;/p&gt;
&lt;p&gt;In Hugo, unfortunately there’s no one size fits all approach to rending content.&lt;/p&gt;
&lt;p&gt;The context of the code you write changes depending on which template you’re working in. This can often produce unexpected results.&lt;/p&gt;
&lt;p&gt;In this piece we’ll learn about the specific functions and variables you can use to create lists of different content types and look at how context effects the content rendered on a page.&lt;/p&gt;
&lt;p&gt;Let’s start by considering how we create lists of data, from a technical perspective, when using a static site generator like Hugo.&lt;/p&gt;
&lt;h2 id=&#34;what-does-it-mean-to-list-content&#34;&gt;What does it mean to list content?&lt;/h2&gt;
&lt;p&gt;When we programatically create a list of anything, essentially all we’re doing is iterating over a map of data.&lt;/p&gt;
&lt;p&gt;In other words, looping through an array – a list of items – which, in other programming languages, you might do with a for loop, or a map function.&lt;/p&gt;
&lt;p&gt;In Hugo, in the context of pages, you do this with the range function.&lt;/p&gt;
&lt;h2 id=&#34;understanding-range&#34;&gt;Understanding range&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/range/&#34;&gt;range&lt;/a&gt; function provides an easy way to iterate over a map, array or slice of data. Think of it as grabbing a collection of pages, or a “range” of pages.&lt;/p&gt;
&lt;p&gt;Range is fundamental to templating in Hugo and it’s the only function we’ll need to return a lists of pages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But using range alone won&amp;rsquo;t return any data.&lt;/p&gt;
&lt;p&gt;To get hold of our pages, we need to pass a &lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;page variable&lt;/a&gt; to the range function. This variable will give you access to different collections of content, depending on which variable you pass in and which template you write the code in.&lt;/p&gt;
&lt;p&gt;There’s quite a few different variables you can choose from, but for now, let’s focus on some of the main ones.&lt;/p&gt;
&lt;h2 id=&#34;combining-site-and-pages&#34;&gt;Combining .Site and .Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/variables/site/&#34;&gt;.Site&lt;/a&gt; gives you access to global values in your templates.&lt;/p&gt;
&lt;p&gt;So regardless of where you are writing your code, with &lt;code&gt;.Site&lt;/code&gt; you can get hold of all site-wide variables. These are either defined in your site’s configuration or directly built-in to Hugo.&lt;/p&gt;
&lt;p&gt;In the interest of listing page content, we can combine &lt;code&gt;.Site&lt;/code&gt; with a built-in variable called &lt;code&gt;.Pages&lt;/code&gt; to access all pages across our website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Hugo docs describe &lt;a href=&#34;https://gohugo.io/variables/site/#site-pages&#34;&gt;.Site.Pages&lt;/a&gt; as a super set of everything.&lt;/p&gt;
&lt;p&gt;This means by passing &lt;code&gt;.Site.Pages&lt;/code&gt; to the range function we can grab data associated with every single page on our site. It will return regular pages, collections, taxonomies, and so on.&lt;/p&gt;
&lt;p&gt;In the case above, we’re rendering all page titles, with a permalink to those pages.&lt;/p&gt;
&lt;p&gt;A few things to note.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; doesn’t care if you store your content in subdirectories, for example posts in &lt;code&gt;./content/posts&lt;/code&gt; or pages inside &lt;code&gt;./content/pages&lt;/code&gt;. It will render all content types regardless of your content directory structure.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; also doesn’t care which template you use it in. The object returned will always be the same.&lt;/p&gt;
&lt;h2 id=&#34;pages-without-site&#34;&gt;.Pages without .Site&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.Pages&lt;/code&gt; can be used without &lt;code&gt;.Site&lt;/code&gt;, but the content returned will be different, depending on where you use it.&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;.Site&lt;/code&gt; gives you access to the global values in your templates, &lt;code&gt;.Pages&lt;/code&gt; only returns a collection of regular pages and only first-level section pages under the current list page.&lt;/p&gt;
&lt;p&gt;To make sense of this let’s turn now to list templates, and talk a bit about what they are and how you can use them.&lt;/p&gt;
&lt;h2 id=&#34;the-list-template&#34;&gt;The list template&lt;/h2&gt;
&lt;p&gt;List templates are key part of rendering specific collections of pages. For the sake of clarity, let’s call these ”lists” of pages.&lt;/p&gt;
&lt;p&gt;The only &lt;code&gt;list.html&lt;/code&gt; template you need to render a list of pages in Hugo is kept at &lt;code&gt;.layouts/_default/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This acts as the default template for all collections, sections, taxonomies and terms. It’s the first list template Hugo will look for when it tries to render lists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/_default/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we’re no longer using &lt;code&gt;.Site.Pages&lt;/code&gt;, but just &lt;code&gt;.Pages&lt;/code&gt;. It will soon become clear why.&lt;/p&gt;
&lt;p&gt;Now let’s say you have a content collection at &lt;code&gt;./content/posts&lt;/code&gt; and you want to create a specific list template for this collection, which renders the posts on the &lt;code&gt;/posts&lt;/code&gt; page of your website.&lt;/p&gt;
&lt;p&gt;To do this you might want to override the default list template by adding another list template, using the exact same code, but this time located at &lt;code&gt;./layouts/posts/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/posts/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the location of this list template mirrors the content directory structure.&lt;/p&gt;
&lt;p&gt;Now we can customise the template however we like and Hugo will only return content from the corresponding folder at &lt;code&gt;./content/posts&lt;/code&gt;. Whilst all other pages will continue to use the default list template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/posts/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;intro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Summary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s important to note that if we used &lt;code&gt;.Site.Pages&lt;/code&gt;, as we have done previously, Hugo will return an object of all our site pages, which isn’t what we want in this case.&lt;/p&gt;
&lt;p&gt;We’re specifically interesed in the collection of post pages, so we use the &lt;code&gt;.Page&lt;/code&gt; variable in a new list template, kept in a directory which mirrors our content structure.&lt;/p&gt;
&lt;p&gt;Now we’re starting to see how context effects the results of the code we write.&lt;/p&gt;
&lt;p&gt;Let’s look at another example to make this absolutely clear.&lt;/p&gt;
&lt;p&gt;Say we have another template with the exact same code at &lt;code&gt;./layouts/notes/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/notes/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time &lt;code&gt;list.html&lt;/code&gt; will only return content from the corresponding content folder located at &lt;code&gt;./content/notes&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We can see now that the context of &lt;code&gt;.Pages&lt;/code&gt; changes, depending on the location of your list template. And it’s something to keep in mind, as it can be confusing at first.&lt;/p&gt;
&lt;p&gt;Ok, so how does Hugo know which template to use?&lt;/p&gt;
&lt;p&gt;Hugo picks the template it uses to render content based on something called the lookup order.&lt;/p&gt;
&lt;p&gt;Let’s get into that next.&lt;/p&gt;
&lt;h2 id=&#34;the-lookup-order&#34;&gt;The lookup order&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34;&gt;The lookup order&lt;/a&gt; is how Hugo decides which layout template to use for a given page, based on a well defined order of priority.&lt;/p&gt;
&lt;p&gt;The default list template (that one at &lt;code&gt;./layouts/_default/list.html&lt;/code&gt;) will serve all content, unless it is overridden by another template, with a higher priority in the lookup order.&lt;/p&gt;
&lt;p&gt;This is what is happening with our list template at &lt;code&gt;./layouts/posts/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Understanding the lookup order, and how context changes, will help you understand which variables to use in certain situations and why the same variable can produce different results.&lt;/p&gt;
&lt;p&gt;Ok, let’s move on to a few other interesting things we can do.&lt;/p&gt;
&lt;h2 id=&#34;using-the-first-function&#34;&gt;Using the first function&lt;/h2&gt;
&lt;p&gt;Now let’s try something a bit different, this time with &lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;the first function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can add the first function to range, to reduce the array of data returned to only the first N elements. Where N is the value you set.&lt;/p&gt;
&lt;p&gt;Think of first as an argument which you pass in alongside your page variables.&lt;/p&gt;
&lt;p&gt;Here we’re returning the first 10 pages across all our content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if you want to loop through a specific collection of content? Let’s use our example of a collection posts stored inside &lt;code&gt;./content/posts&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;Let’s say now we want to list our posts on the &lt;code&gt;index.html&lt;/code&gt; page. We can’t just use &lt;code&gt;.Pages&lt;/code&gt; in this case, as we’re no longer in our post specific &lt;code&gt;list.html&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;.Site.RegularPages&lt;/code&gt; is helpful.&lt;/p&gt;
&lt;h2 id=&#34;understanding-siteregularpages&#34;&gt;Understanding .Site.RegularPages&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.Site.RegularPages&lt;/code&gt; variable is similar to &lt;code&gt;.Site.Pages&lt;/code&gt;, but instead of returning all pages, it returns all collections.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RegularPages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Hugo, collections are known as &lt;a href=&#34;https://gohugo.io/content-management/types/&#34;&gt;Content Types&lt;/a&gt;, which basically means anything stored within the &lt;code&gt;./content&lt;/code&gt; directory or inside subdirectories within.&lt;/p&gt;
&lt;p&gt;To give you an example, on this site I have three collections of content. &lt;code&gt;./content/articles&lt;/code&gt;, &lt;code&gt;./content/notes&lt;/code&gt; and &lt;code&gt;./content/projects&lt;/code&gt;. Each directory contains pages created in markdown.&lt;/p&gt;
&lt;p&gt;Here, the &lt;code&gt;.Site.RegularPages&lt;/code&gt; variable would return all pages from across these three collections, and ignore any else, such as pages inside &lt;code&gt;./content/pages&lt;/code&gt; or taxonomy pages.&lt;/p&gt;
&lt;p&gt;But what if you only want to loop through your &lt;code&gt;./content/articles&lt;/code&gt; collection? How might you handle this kind of behaviour?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.Type&lt;/code&gt; variable is useful in the scenario.&lt;/p&gt;
&lt;h2 id=&#34;filtering-pages-by-type&#34;&gt;Filtering pages by .Type&lt;/h2&gt;
&lt;p&gt;As per the docs; “Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path.” So what does this mean, exactly?&lt;/p&gt;
&lt;p&gt;It means that if we want to render specific content types, we have two options.&lt;/p&gt;
&lt;p&gt;We can either a), set &lt;code&gt;type&lt;/code&gt; inline in the front matter of our pages, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;My&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or b), make directories within &lt;code&gt;./content&lt;/code&gt; to mirror how we want to filter our content, as we’ve already seen in the earlier examples.&lt;/p&gt;
&lt;p&gt;So for our post example, this approach means we have to keep our posts inside &lt;code&gt;./content/post&lt;/code&gt; for it to work.&lt;/p&gt;
&lt;p&gt;Regardless of whether you go with a) the frontmatter method or b) the directory structure method, you use the same code to render the content.&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we combine range with the conditional &lt;a href=&#34;https://gohugo.io/functions/where/&#34;&gt;where&lt;/a&gt; function. This allows us to filter our array to only the elements containing a matching value of “type” &lt;em&gt;post&lt;/em&gt;. In this case, only our posts will be returned.&lt;/p&gt;
&lt;p&gt;This is a useful snippet. The frontmatter approach is particular useful when you want to group together a selection of pages, perhaps as featured content.&lt;/p&gt;
&lt;p&gt;You’ll also find this approach useful when you want to render specific content outside of the context of a list template, for example on the homepage of your website, as we’ve imagined here.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a quick introduction to the functions and variables in Hugo that help you list different pages of content, in different places on a Hugo website.&lt;/p&gt;
&lt;p&gt;At times it can be confusing to know which variable to use in a given situation to effectively render the content you wish. But with some practice it will start to sink in.&lt;/p&gt;
&lt;p&gt;I hope this has made things a bit clearer and given you a few ideas for your next project. We’ve only just scratched the surface, but what we’ve covered should help get you off to a good start, with a good idea of some of what’s possible.&lt;/p&gt;
&lt;p&gt;As always, if you spot any mistakes or something doesn’t look quite right, please let me know and I will make sure I make changes.&lt;/p&gt;
&lt;p&gt;I’m aiming to keep this post updated with new examples and scenarios, as I come across them and use them in my own projects. In the meantime, here’s a list of articles which should help give you a better understanding of what we’ve covered.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/range/&#34;&gt;The Range Function&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/lists/&#34;&gt;Lists of content in Hugo&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;Page Variables&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regisphilibert.com/blog/2018/02/hugo-the-scope-the-context-and-the-dot/&#34;&gt;Hugo, the scope, the context and the dot&lt;/a&gt; from Regis Philibert&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;The First function&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/types&#34;&gt;Content types&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/where/&#34;&gt;The Where function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%EF%BF%BChttps://gohugo.io/templates/homepage/%EF%BF%BC&#34;&gt;Homepage Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/different-page-types-without-organising-into-subdirectories/558/3&#34;&gt;Different page types without organising into subdirectories&lt;/a&gt; from Stiobhart&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Building a navigation schema with Sanity</title>
        <link>https://azharkhan.in/articles/sanity-building-naigation-schema/</link>
        <pubDate>Wed, 25 Mar 2020 06:40:37 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/sanity-building-naigation-schema/</guid>
        <description>&lt;p&gt;&lt;a href=&#34;https://www.sanity.io/&#34;&gt;Sanity&lt;/a&gt; is a platform for structured content, built in React. It’s headless, meaning your content is decoupled from whatever front-end you decide to choose.&lt;/p&gt;
&lt;p&gt;Sanity stores your content and compiles it to an API, which you can then query and render on the front-end of your website using &lt;a href=&#34;https://azharkhan.in/tags/graphql&#34;&gt;GraphQL&lt;/a&gt; or Sanity’s own query language GROQ.&lt;/p&gt;
&lt;p&gt;Unlike many monolithic CMS’, Sanity holds no opinions about your content. So, to create content, you first have to build a schema. This means you have to tell Sanity how your content should be structured. This is known as &lt;a href=&#34;https://www.sanity.io/docs/content-modelling&#34;&gt;Content Modelling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Content modeling happens in &lt;a href=&#34;https://www.sanity.io/docs/sanity-studio&#34;&gt;Sanity Studio&lt;/a&gt;, which is basically Sanity’s content management system (CMS). For most projects, you’ll find yourself building a content schema from scratch by writing JSON objects. How your content is structured is very much up to you. You are in full control of the content types — and fields associate with those types — that will appear in the CMS.&lt;/p&gt;
&lt;p&gt;If you’re new to modelling data in Sanity, make sure you read the &lt;a href=&#34;https://www.sanity.io/docs/content-modelling&#34;&gt;the documentation&lt;/a&gt;, it’s detailed and well thought out. For my take on modelling content, read my notes; &lt;a href=&#34;https://azharkhan.in/notes/til-02-content-schema-in-sanity/&#34;&gt;Content schema in Sanity&lt;/a&gt;. This will help you hit the ground running.&lt;/p&gt;
&lt;p&gt;In this article we’ll build a content schema for a modular navigation. Modular, because you’ll be able to use this content type to create any number of navigations, to use in a website or application. In a later article we’ll query the navigation we create, and render it on a Gatsby powered front-end.&lt;/p&gt;
&lt;p&gt;To begin, let’s consider the content schema, so we know what we’re building.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-schema-structure&#34;&gt;Understanding the schema structure&lt;/h2&gt;
&lt;p&gt;Before we jump in, we need to figure out how best to structure our content schema. To figure this out, it makes sense to understand the project requirements. So, what functionality do we want in our navigation?&lt;/p&gt;
&lt;p&gt;We want the ability to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create multiple navigations (e.g. main, footer, etc)&lt;/li&gt;
&lt;li&gt;Add any number of items (links) to each navigation&lt;/li&gt;
&lt;li&gt;Add either internal or external links to navigation items&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Sanity, the ”document” content type allows you to create repeatable content. Much like a post or a page. This will give us the ability to create multiple navigations.&lt;/p&gt;
&lt;p&gt;That’s our first requirement sorted.&lt;/p&gt;
&lt;p&gt;If we want to add any number of “nav items” to the navigations we create, we could do this by creating an array of links. More on this later.&lt;/p&gt;
&lt;p&gt;For each nav item in the array, we then need a way to set whether or not the link is an internal link or an external link.&lt;/p&gt;
&lt;p&gt;The reason we need to determine the source of the link is because the code in our front-end will be different, depending on the source of the link. We can use Sanity’s built in boolean type (essentially a toggle switch), which provides a simple way to make something &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. This will allow us to write a condition in the front-end (when we get to it), to render the correct code.&lt;/p&gt;
&lt;p&gt;Now we understand what we’re trying to build, let’s get on and build the schema.&lt;/p&gt;
&lt;h2 id=&#34;building-the-schema&#34;&gt;Building the schema&lt;/h2&gt;
&lt;p&gt;Assuming you have a Sanity project on the go (you can try out &lt;a href=&#34;https://www.sanity.io/docs/starters-on-sanity-io-create&#34;&gt;a starter project&lt;/a&gt; if you haven’t), open your project in your text editor and locate the studio directory.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;schemas/documents&lt;/code&gt; create a new document type called &lt;code&gt;Navigation.js&lt;/code&gt;, or &lt;code&gt;Nav.js&lt;/code&gt;, for something short but descriptive.&lt;/p&gt;
&lt;p&gt;Inside this file, we want to export a default object with three key value pairs: a &lt;em&gt;name&lt;/em&gt;, a &lt;em&gt;type&lt;/em&gt; and a &lt;em&gt;title&lt;/em&gt;. Make sure you provide a descriptive name, reflective of the file name. In this case “nav”. This will determine how our API is structured later.&lt;/p&gt;
&lt;p&gt;Next make sure &lt;em&gt;type&lt;/em&gt; is set to “document”. This tells Sanity that our navigation is a top level content type, so it will appear in the Studio under Content. Finally, &lt;em&gt;title&lt;/em&gt; is the text we will actually see in Sanity Studio. In our case it will say “Navigation.”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nav&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Navigation&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can head to &lt;code&gt;schema.js&lt;/code&gt;, and register our new content type, by importing our document schema and passing it to the builder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// First, we must import the schema creator
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createSchema&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;part:@sanity/base/schema-creator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Then import schema types from any plugins that might expose them
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schemaTypes&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;all:part:@sanity/base/schema-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/page&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;siteSettings&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/siteSettings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nav&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/nav&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Object types
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bodyPortableText&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./objects/bodyPortableText&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bioPortableText&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./objects/bioPortableText&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Then we give our schema to the builder and provide the result to Sanity
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// We name our schema
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Then proceed to concatenate our our document type
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// to the ones provided by any plugins that are installed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schemaTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// The following are document types which will appear
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// in the studio.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;siteSettings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;nav&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// When added to this list, object types can be used as
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// { type: &amp;#39;typename&amp;#39; } in other document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you save the file with the development server running, Sanity Studio will refresh in the browser and you should now see “Navigation” listed under the Content panel.&lt;/p&gt;
&lt;p&gt;Right now, our content type isn&amp;rsquo;t much use. We need some fields, so we can give the navigations we create a &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;. The &lt;em&gt;title&lt;/em&gt; is for our own reference, so we can easily identify the navigations we build. We’ll use the &lt;em&gt;id&lt;/em&gt; when we query the data in the front-end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nav&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Navigation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have an input field in Sanity Studio to provide a &lt;em&gt;title&lt;/em&gt; and an &lt;em&gt;id&lt;/em&gt; for a navigation. But we still need a way to add our nav item links.&lt;/p&gt;
&lt;p&gt;If we give it some thought, a nav item is essentially another very simple object type with a few fields. One field for &lt;code&gt;text&lt;/code&gt; — what our nav item says — and another field for a &lt;code&gt;link&lt;/code&gt; — the source of the content.&lt;/p&gt;
&lt;p&gt;Don’t forget, we also need a boolean switch. This will give our friends managing content an easy way to specify whether the link is linking to an internal page, or to a page somewhere else on the web.&lt;/p&gt;
&lt;p&gt;Now create a new schema inside &lt;code&gt;schemas/objects&lt;/code&gt; called &lt;code&gt;navItem.js&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NavItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItemUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// references link object
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Nav Item URL&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s break down what’s going on here.&lt;/p&gt;
&lt;p&gt;We’ve given &lt;em&gt;type&lt;/em&gt; the value of &lt;code&gt;object&lt;/code&gt;, as this schema will only ever be a reference from a document, in this case our &lt;code&gt;nav.js&lt;/code&gt; document. And we’ve set a descriptive &lt;em&gt;name&lt;/em&gt;, and &lt;em&gt;title&lt;/em&gt; to identify our object in Sanity.&lt;/p&gt;
&lt;p&gt;We’re also adding two fields. The first has the &lt;em&gt;name&lt;/em&gt; &lt;code&gt;text&lt;/code&gt;. This is a &lt;em&gt;string&lt;/em&gt; set to &lt;code&gt;type&lt;/code&gt;, which gives us a text input field so we can name each nav item.&lt;/p&gt;
&lt;p&gt;The other has the &lt;em&gt;name&lt;/em&gt; &lt;code&gt;navItemUrl&lt;/code&gt;, and it has a &lt;em&gt;type&lt;/em&gt; of &lt;code&gt;link&lt;/code&gt;. I’ve added a comment to make it clear exactly what this is. Link is actually a reference to another object type called &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ok, we’re going all Inception here, but we’ll thank ourselves later. Let’s create this link object now, so we have something to&amp;hellip; um&amp;hellip; link to.&lt;/p&gt;
&lt;p&gt;Create a new file called &lt;code&gt;link.js&lt;/code&gt; inside &lt;code&gt;schemas/objects&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;externalContent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content is from an external source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;linkUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Link URL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;Use this field to add a link to the source. For external links use full url e.g. ‘https://google.com/’. For internal links use the page path e.g. ‘companies’&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, our link object takes care of the boolean (a switch to set whether the link is external or not) via a field named &lt;code&gt;externalContent&lt;/code&gt;, which has a &lt;em&gt;type&lt;/em&gt; with the value &lt;code&gt;boolean&lt;/code&gt;. It also handles the &lt;code&gt;linkUrl&lt;/code&gt;, which is the URL our nav item will link to. This can be any link, internal or external.&lt;/p&gt;
&lt;p&gt;Now we could have handled the link complexity directly in our &lt;code&gt;navItem&lt;/code&gt; object, but by creating a new link object, we’ve made our schema modular. We can now use our link object in other documents and object types, should be wish to.&lt;/p&gt;
&lt;p&gt;Ok, we’re almost there. All that’s left to do now is to register our new object types in &lt;code&gt;schema.js&lt;/code&gt;, and add our new &lt;code&gt;navItem&lt;/code&gt; object to our &lt;code&gt;navigation.js&lt;/code&gt; document type. Let’s don that now.&lt;/p&gt;
&lt;p&gt;Head back to &lt;code&gt;schema.js&lt;/code&gt; and register &lt;code&gt;navItem&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// First, we must import the schema creator
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createSchema&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;part:@sanity/base/schema-creator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Then import schema types from any plugins that might expose them
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schemaTypes&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;all:part:@sanity/base/schema-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/page&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;siteSettings&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/siteSettings&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nav&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./documents/nav&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Object types
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bodyPortableText&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./objects/bodyPortableText&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bioPortableText&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./objects/bioPortableText&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;navItem&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./objects/navItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./objects/link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Then we give our schema to the builder and provide the result to Sanity
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// We name our schema
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Then proceed to concatenate our our document type
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// to the ones provided by any plugins that are installed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schemaTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// The following are document types which will appear
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// in the studio.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;siteSettings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;navItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// When added to this list, object types can be used as
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// { type: &amp;#39;typename&amp;#39; } in other document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, inside &lt;code&gt;nav.js&lt;/code&gt; we can add a new field for our &lt;code&gt;navItems&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nav&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Navigation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItems&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Navigation items&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItem&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we’ve given &lt;em&gt;type&lt;/em&gt; the value of &lt;code&gt;array&lt;/code&gt;, as we want to be able to create what’s essentially a list of nav items.&lt;/p&gt;
&lt;p&gt;Finally we need to use the &lt;code&gt;of&lt;/code&gt; keyword to set &lt;em&gt;type&lt;/em&gt; to &lt;code&gt;navItem&lt;/code&gt;. This is a reference to our &lt;code&gt;navItem.js&lt;/code&gt; object type and tells our &lt;code&gt;nav.js&lt;/code&gt; object to use it.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;Now our navigation schema is set up and usable. But there are a few things we can do to our schema, to help clarify it’s purpose and make it visually identifiable.&lt;/p&gt;
&lt;p&gt;The first is to add an icon to our document type, and the second is to configure the preview. This will change how Sanity renders our document type and navigation items in the studio.&lt;/p&gt;
&lt;h3 id=&#34;adding-an-icon&#34;&gt;Adding an icon&lt;/h3&gt;
&lt;p&gt;The easiest way to add an icon to a document type in Sanity Studio is by using the NPM package &lt;a href=&#34;https://react-icons.netlify.com/#/&#34;&gt;React Icons&lt;/a&gt;. This will allow you to use SVG icons from many of the most popular icon libraries.&lt;/p&gt;
&lt;p&gt;Inside the root of your Sanity Studio project run &lt;code&gt;yarn add react-icons&lt;/code&gt; to add React Icons to your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can &lt;a href=&#34;https://react-icons.netlify.com/#/&#34;&gt;choose the icon you wish to use&lt;/a&gt; and import the icon at the top of your component file.&lt;/p&gt;
&lt;p&gt;Make sure to specify the library name and the icon name. For example &lt;code&gt;md&lt;/code&gt; from material design and &lt;code&gt;navigation&lt;/code&gt; for the icon name.&lt;/p&gt;
&lt;p&gt;In this case we want to import an icon to our &lt;code&gt;nav.js&lt;/code&gt; document. Use the key value pair &lt;em&gt;icon&lt;/em&gt; and &lt;code&gt;ICON_IMPORT_NAME&lt;/code&gt; to render the icon in the Studio.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Nav&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react-icons/lib/md/navigation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NavItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;icon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItemUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// references link object
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Nav Item URL&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more on icons in Sanity read up on &lt;a href=&#34;https://www.sanity.io/docs/the-schema/icons-for-data-types&#34;&gt;Icons for data types&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;configure-the-preview&#34;&gt;Configure the preview&lt;/h3&gt;
&lt;p&gt;A content preview is the representation of a document or object type in Sanity studio. Sanity will try to render the preview by default, based on the fields used in your content type. But you also have the option to customise which fields should be used to generate the preview.&lt;/p&gt;
&lt;p&gt;You can do this using the &lt;code&gt;preview&lt;/code&gt; key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Nav&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react-icons/lib/md/navigation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NavItem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;icon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItemUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// references link object
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Nav Item URL&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;preview&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;subtitle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItemUrl&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Back in Sanity, we can see that the title is no longer undefined, but now rendering the value of &lt;code&gt;text&lt;/code&gt;. Likewise, the subtitle is rendering the &lt;code&gt;navItemUrl&lt;/code&gt;. We follow the same pattern for our navigation document.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nav&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Navigation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Id&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItems&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Navigation items&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;navItem&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;preview&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;subtitle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more on content previews check out &lt;a href=&#34;https://sanity.io/docs/the-schema/previews-list-views&#34;&gt;Previews / List Views&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;We now have a schema set up which allows us to build any number of custom navigations in Sanity Studio, and add nav items that allow for both internal and external linking.&lt;/p&gt;
&lt;p&gt;In a follow up article we’ll take a look at building the front-end, and learn how to query our navigation schema, grab the data for a navigation we’ve created and render it on a website. For this part we’ll use &lt;a href=&#34;https://azharkhan.in/tags/gatsby&#34;&gt;Gatsby&lt;/a&gt; and &lt;a href=&#34;https://azharkhan.in/tags/graphql&#34;&gt;GraphQL&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Filtering content in Gatsby by date and deadline</title>
        <link>https://azharkhan.in/articles/filtering-content-in-gatsby-by-date-and-deadline/</link>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/filtering-content-in-gatsby-by-date-and-deadline/</guid>
        <description>&lt;p&gt;On &lt;a href=&#34;https://www.jobs.angelinvestmentnetwork.co.uk/&#34;&gt;the jobs board prototype&lt;/a&gt; I’ve been working on, all jobs have a deadline. As you might expect, the idea is that whenever a deadline is reached, the job listing is no longer active and therefore should no longer display on the website.&lt;/p&gt;
&lt;p&gt;This presents us with an interesting problem. We need a way to remove any piece of content (in this case a job) from the site that has reached it’s deadline.&lt;/p&gt;
&lt;p&gt;But this isn’t a dynamic site built with PHP or whatever else, this is Gatsby, and for all the fun React-what-not used to build these sites, the output is still very much static HTML. So removing these jobs dynamically isn’t as easy as it sounds.&lt;/p&gt;
&lt;p&gt;We could just remove this content manually. It’s a viable option for a small site. But as the site grows, which we expect it will, this will involve sifting through every single job post, checking to see whether the deadline has expired or not. Tedious stuff.&lt;/p&gt;
&lt;p&gt;A better alternative is to create a filter at query time, that remove this content when we build the site. This filter will remove any content that has reached the deadline, by checking whether the deadline (set in the front matter of the document) exceeds the current date.&lt;/p&gt;
&lt;p&gt;However, this still leaves us with one final problem. Running the build is still a manual process. Ideally, we’d like to automate this step, so that the site rebuilds itself every time a deadline expires. I have an idea for this, but let’s leave that until we get to it.&lt;/p&gt;
&lt;p&gt;First things first. Let’s recap these steps, to get a clear picture of what we want to do.&lt;/p&gt;
&lt;h2 id=&#34;steps-to-reproduce&#34;&gt;Steps to reproduce&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; &lt;a href=&#34;#add-deadline-to-content-frontmatter&#34;&gt;Add deadline to content frontmatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; &lt;a href=&#34;#create-a-function-to-get-current-date&#34;&gt;Create a function to get current date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; &lt;a href=&#34;#pass-current-date-to-component-to-use-in-query&#34;&gt;Pass current date to component to use in query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; &lt;a href=&#34;#filter-content-where-deadline-is-greater-than-current-date&#34;&gt;Filter content where deadline is greater than current date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; &lt;a href=&#34;#build-site-to-run-query-and-update-output&#34;&gt;Build site to run query and update output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; &lt;a href=&#34;#automate-the-build-process&#34;&gt;Automate the build process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;add-deadline-to-content-frontmatter&#34;&gt;Add deadline to content frontmatter&lt;/h2&gt;
&lt;p&gt;First, we need to add a &lt;code&gt;deadline&lt;/code&gt; to the front matter of every content markdown file that we might want to filter. Use a key value pair, where the value is a date.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Marketing&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Director&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;company&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Buengo&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;marketing-director-at-buengo&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2019-12-03T13:00:00.000&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;published&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;deadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-02-06T13:39:59Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have a way to filter the document based on the deadline date. Easy enough.&lt;/p&gt;
&lt;h2 id=&#34;create-a-function-to-get-current-date&#34;&gt;Create a function to get current date&lt;/h2&gt;
&lt;p&gt;The next step is to create a function which grabs the current date. We’ll need to pass this to the page template, so we can use it in the query.&lt;/p&gt;
&lt;p&gt;Luckily for us, &lt;a href=&#34;https://stevenmercatante.com/publish-posts-after-date-in-gatsby&#34;&gt;Steven Mercatante has written a great article&lt;/a&gt; where he does something similar, but in his case for scheduling posts. We can use Steven’s &lt;code&gt;getCurrentDate&lt;/code&gt; function, as it’s exactly what we need.&lt;/p&gt;
&lt;p&gt;Full credit to Steven for this. Without his article I’d probably be scrounging around still looking for answers.&lt;/p&gt;
&lt;p&gt;As Steven comments; the function “Returns the current date in YYYY-MM-DD format.” This is what we want.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// gatsby-node.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; * Returns the current date in YYYY-MM-DD format
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getCurrentDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getMonth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`0&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`0&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getFullYear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to add this function to our &lt;em&gt;gatsby-node.js&lt;/em&gt; file, so it’s available to use as &lt;code&gt;context&lt;/code&gt; when we create content pages.&lt;/p&gt;
&lt;h2 id=&#34;pass-current-date-to-component-to-use-in-query&#34;&gt;Pass current date to component to use in query&lt;/h2&gt;
&lt;p&gt;Now we need to pass the &lt;code&gt;currentDate&lt;/code&gt; data to the page layout. We can do this using &lt;a href=&#34;https://www.gatsbyjs.org/docs/gatsby-internals-terminology/#pagecontext&#34;&gt;context object&lt;/a&gt;, which is created by calls to &lt;a href=&#34;https://www.gatsbyjs.org/docs/actions/#createPage&#34;&gt;createPage&lt;/a&gt;. This is what Gatsby uses to generate pages on the website.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;context&lt;/em&gt; object is passed to GraphQL queries as the context parameter. But more on this later.&lt;/p&gt;
&lt;p&gt;Depending on how your project is set up this might look slightly different. Perhaps you want to pass context to a different page layout. Either way, the process is the same. This is what it looks like in our case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// gatsby-node.js
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createPages&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;graphql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;actions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createPage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;actions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;createPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frontmatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;/`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./src/components/postLayout.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;frontmatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;currentDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getCurrentDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the value of &lt;code&gt;currentDate&lt;/code&gt; in the &lt;em&gt;context&lt;/em&gt; object is a call to the &lt;code&gt;getCurrentDate()&lt;/code&gt; function we created earlier.&lt;/p&gt;
&lt;p&gt;This will pass &lt;code&gt;currentDate&lt;/code&gt; as a parameter to our &lt;em&gt;postLayout.js&lt;/em&gt; component, so we can use it in our GraphQL query.&lt;/p&gt;
&lt;h2 id=&#34;filter-content-where-deadline-is-greater-than-current-date&#34;&gt;Filter content where deadline is greater than current date&lt;/h2&gt;
&lt;p&gt;Now we’ve done the hard work, this step should be fairly easy.&lt;/p&gt;
&lt;p&gt;We need to add the filter to our GraphQL query (found inside the page layout), to check if &lt;code&gt;deadline&lt;/code&gt; is &lt;em&gt;greater than or equal to&lt;/em&gt; the current date. Remember the current date is held in the &lt;code&gt;currentDate&lt;/code&gt; parameter, which we just passed into the component using the &lt;em&gt;context&lt;/em&gt; object.&lt;/p&gt;
&lt;p&gt;Here’s the full query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span class=&#34;kd&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$company&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$currentDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;allMarkdownRemark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;frontmatter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;company&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$company&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;published&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;deadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;gte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$currentDate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;frontmatter___date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;DESC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;frontmatter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;company&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;formatString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MMMM DD, YYYY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;slug&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, let’s break this down.&lt;/p&gt;
&lt;p&gt;The first part to pay close attention to is where it says &lt;code&gt;deadline: { gte: $currentDate }&lt;/code&gt;, found in the filter part of the query.&lt;/p&gt;
&lt;p&gt;We’re using the &lt;a href=&#34;https://www.gatsbyjs.org/docs/graphql-reference/#complete-list-of-possible-operators&#34;&gt;gte operator&lt;/a&gt;, meaning ”greater than or equal to”, and passing in the current date parameter. We do this by setting it as the value of deadline.&lt;/p&gt;
&lt;p&gt;In other words, we’re telling GraphQL to filter any content where &lt;code&gt;deadline&lt;/code&gt; is greater than or equal to the current date.&lt;/p&gt;
&lt;p&gt;Makes sense.&lt;/p&gt;
&lt;p&gt;The second thing we need to do is make sure we pass the parameter into the query itself. We do this by passing the query an argument: &lt;code&gt;$currentDate: Date!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we’re ready to rebuild our site and run the query.&lt;/p&gt;
&lt;h2 id=&#34;build-site-to-run-query-and-update-output&#34;&gt;Build site to run query and update output&lt;/h2&gt;
&lt;p&gt;Depending on how you’re set up, you should be able to build your site by running &lt;code&gt;gatsby build&lt;/code&gt; in the terminal.&lt;/p&gt;
&lt;p&gt;Gatsby will rebuild the site, the query will run and any jobs where the deadline has expired will be filtered out of the content that’s returned.&lt;/p&gt;
&lt;p&gt;Restart your local development server (usually &lt;code&gt;gatsby develop&lt;/code&gt;, &lt;code&gt;gatsby serve&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt;), so you can see the changes.&lt;/p&gt;
&lt;p&gt;Though nice and easy, this step is still very manual, at this stage. So the final part is to figure out how we can automate this process, so the site rebuilds itself when deadlines expire.&lt;/p&gt;
&lt;h2 id=&#34;automate-the-build-process&#34;&gt;Automate the build process&lt;/h2&gt;
&lt;p&gt;There are a bunch of ways to trigger a build, but the easiest way is using a Webhook.&lt;/p&gt;
&lt;p&gt;If you’re using Netlify, this is straight forward. Head to &lt;a href=&#34;https://docs.netlify.com/configure-builds/build-hooks/&#34;&gt;Netlify’s site settings&lt;/a&gt; and select &lt;em&gt;Build &amp;amp; Deploy&lt;/em&gt;. Now scroll down to &lt;em&gt;Build Hooks&lt;/em&gt; and hit the &lt;em&gt;Add build hook&lt;/em&gt; button.&lt;/p&gt;
&lt;p&gt;Give your new build hook a name – I called mine ”Filter expired deadlines” – then choose the branch (most likely master) that your site is deploying from.&lt;/p&gt;
&lt;p&gt;Netlify will generate a unique URL, which you can use to send a POST request to, and trigger a deploy. Now to figure out a way to trigger this Webhook.&lt;/p&gt;
&lt;p&gt;For this we can look to an automation tool called &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt;, which connects different apps and services so they can pass data to one another.&lt;/p&gt;
&lt;p&gt;IFTTT has a service called &lt;a href=&#34;https://ifttt.com/date_and_time&#34;&gt;Date &amp;amp; Time&lt;/a&gt; which we can set up to run on an hourly, daily, weekly, monthly or yearly basis. By choosing the daily option and setting the time to 12.00am, we can run our build at a time that makes sense.&lt;/p&gt;
&lt;p&gt;Next we need to connect this to the &lt;a href=&#34;https://ifttt.com/maker_webhooks&#34;&gt;Webhook&lt;/a&gt; service, so we can provide IFTTT with our Webhook URL and trigger a build using the POST method.&lt;/p&gt;
&lt;p&gt;You can even tell IFTTT to send you a notification when the automation completes. Not bad, it gets the job done.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stevenmercatante.com/publish-posts-after-date-in-gatsby&#34;&gt;Publish Posts After a Date in Gatsby&lt;/a&gt; by Steven Mercatante&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/docs/gatsby-internals-terminology/#pagecontext&#34;&gt;page.context&lt;/a&gt; from the Gatsby docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/docs/actions/#createPage&#34;&gt;createPage&lt;/a&gt; from the Gatsby docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/docs/graphql-reference/#complete-list-of-possible-operators&#34;&gt;Complete list of possible operators&lt;/a&gt; from the Gatsby docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;(https://docs.netlify.com/configure-builds/build-hooks/)&#34;&gt;Netlify Build hooks&lt;/a&gt; from the Netlify docs&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>The just ‘show up every day’ conundrum</title>
        <link>https://azharkhan.in/articles/show-up-every-day-conundrum/</link>
        <pubDate>Sat, 29 Feb 2020 13:14:02 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/show-up-every-day-conundrum/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    You often read that the best way to make progress and achieve your goals is to just show up every day and put in the hours.
&lt;/p&gt;

&lt;p&gt;Whether you’re working towards writing a book, running a marathon or something else, it works the same, regardless of your goals.&lt;/p&gt;
&lt;p&gt;Success is largely based on repetition. It’s the result of what you choose to commit to and practice on a regular basis. It’s the total sum of your habits.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Show up every day&lt;/em&gt; is generally very good advice, but often it leaves me feeling like I want more from it. Let me explain what I mean.&lt;/p&gt;
&lt;p&gt;When you read about the importance of ‘showing up every day’, rarely do you read on to discover any actionable advice to help you make it happen. You’re just told that you need to ‘show up’, if you want to succeed. But like most things, showing up is easier said than done.&lt;/p&gt;
&lt;p&gt;In addition to this, by saying ‘just show up every day’ you’re not offering any practical solutions to help whoever you’re advising make progress with variety of different commitments. It offers no framework to ensure you make progress in equal measures. And this is what I find myself searching for more than anything.&lt;/p&gt;
&lt;p&gt;So these are my questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if I want to write a book and run a marathon?&lt;/li&gt;
&lt;li&gt;What if I have client commitments and side projects?&lt;/li&gt;
&lt;li&gt;What if there are courses I want to take?&lt;/li&gt;
&lt;li&gt;What if I have financial goals too?&lt;/li&gt;
&lt;li&gt;And, what if there’s more still, that I’m working towards?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do I stay committed to each and every one of these things, and invest my time in equal measures?&lt;/p&gt;
&lt;p&gt;There’s lots we all want to achieve with the time we have each day, and not enough is written about the strategies to help us get there. Strategies that can help us manage a whole range of commitments without feeling overwhelmed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://azharkhan.in/articles/implementation-intentions/&#34;&gt;Staying committed&lt;/a&gt; isn’t always easy. The more you take on, the harder it becomes to prioritise your commitments and juggle your time. It’s like having too many tabs open in your browser. The more you have open, the harder it becomes to make decisions and focus on your next actions.&lt;/p&gt;
&lt;p&gt;This leads to procrastination. You struggle to make progress. You end up focusing your energy on all the wrong things, or you give more attention to one project over another. In some cases you loose sight of your &lt;a href=&#34;https://azharkhan.in/articles/intentions-2020/&#34;&gt;intentions&lt;/a&gt; entirely.&lt;/p&gt;
&lt;p&gt;But you continue to read the same old advice; if you want to to reach your goals you must &lt;em&gt;show up every day&lt;/em&gt; and consistently put in the work. And that seems to be the extent of it. I’m not saying this is bad advice. Quite the opposite, in fact. But without any practical guidance on how to actually ‘show up’, this advice isn’t particularly helpful.&lt;/p&gt;
&lt;p&gt;I’ve written previously about how &lt;a href=&#34;https://azharkhan.in/articles/implementation-intentions/&#34;&gt;implementation intentions&lt;/a&gt; can help you stick with your commitments. The formula it provides, works by applying situational cues to a specific commitment. But, now I’m looking for a strategy that helps apply this formula to a variety of commitments, rather than treating each commitment independently. Think &lt;a href=&#34;https://jamesclear.com/habit-stacking&#34;&gt;habit stacking&lt;/a&gt;, if it helps you make sense of it.&lt;/p&gt;
&lt;p&gt;I need a solid framework to help achieve these things. A solution that helps you show up daily and make progress towards all of your goals, not just one. A method you can apply to your process, that helps you prioritise your schedule and structure your days to make the most of your time.&lt;/p&gt;
&lt;p&gt;We all want to get the most out of the time we have available. And we’re all trying our best to manage a variety commitments, which in most cases we’d like to stay committed to. But the hardest part is just that.&lt;/p&gt;
&lt;p&gt;So rather than relying on the just &lt;em&gt;show up every day&lt;/em&gt; conundrum, and calling it our best advice. We should think more about the strategies we can use to turn this advice into something more actionable. And look for a better approach to help manage our commitments, that ensures we make balanced progress, day after day.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Sticking with your commitments</title>
        <link>https://azharkhan.in/articles/implementation-intentions/</link>
        <pubDate>Wed, 12 Feb 2020 10:39:01 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/implementation-intentions/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    How do you increase your chances of sticking with the things you say you’ll do? I’ve been thinking about this question a lot.
&lt;/p&gt;

&lt;p&gt;We all have things we want to achieve, but staying committed and making progress towards those things can be difficult. It requires dedication – showing up day after day, investing time and energy, and continually chipping away – which isn’t exactly easy.&lt;/p&gt;
&lt;p&gt;But you can make it easier by &lt;a href=&#34;https://twitter.com/JamesClear/status/1226551114935472129&#34;&gt;creating a strategy&lt;/a&gt;. A simple plan of action to help you stay committed and achieve your goals.&lt;/p&gt;
&lt;p&gt;I find that whenever I lean on a strategy or systematic process in my work, everything gets a whole lot easier. By planning your actions, you remove barriers preventing progress and things become autonomous. It’s no different for your long-term commitments.&lt;/p&gt;
&lt;p&gt;Sticking with the things you say you’ll do is actually down to having a good strategy. And one I’ve started to use with more conscious attention is called &lt;em&gt;implementation intentions&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementation-intentions&#34;&gt;Implementation Intentions&lt;/h2&gt;
&lt;p&gt;In research conducted by psychologist Peter Gollwitzer on goal striving, results showed that by assigning specific situational cues to a goal – a strategy know as ”implementation intentions” – you enhance the rate of goal attainment.&lt;/p&gt;
&lt;p&gt;Implementation intentions uses something called the ”goal-specificity effect”, which shows that a person will perform better when set goals are challenging and specific, compared to those that are challenging but vague.&lt;/p&gt;
&lt;p&gt;In other words, you’re more likely to act on your intentions, &lt;em&gt;if&lt;/em&gt; you form a concrete plan involving specific situational cues. These situational cues define the &lt;em&gt;when&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, and &lt;em&gt;how&lt;/em&gt; you plan to act on your intentions.&lt;/p&gt;
&lt;p&gt;Peter Gollwitzer calls this an “if-then plan”; where you select an “if” cue, that’s linked to a “then” response.&lt;/p&gt;
&lt;p&gt;With this idea in mind, let’s look at a few examples.&lt;/p&gt;
&lt;h2 id=&#34;implementation-intentions-in-action&#34;&gt;Implementation intentions in action&lt;/h2&gt;
&lt;p&gt;Say your goal is to &lt;em&gt;write a book&lt;/em&gt;. To achieve your goal you might decide to &lt;em&gt;build a daily writing habit&lt;/em&gt;. Makes sense. It’s less intimidating to focus on a regular commitment, than fixating on an end goal, which feels impossible to achieve.&lt;/p&gt;
&lt;p&gt;To build your daily writing habit, you might employ an “if-then plan,” to increase your changes of staying committed and achieving your goal.&lt;/p&gt;
&lt;p&gt;Your ”if-then plan” may look something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If&lt;/em&gt; the time is 6 am, &lt;em&gt;then&lt;/em&gt; I will sit down to write in the study.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, 6 am is the &lt;em&gt;cue&lt;/em&gt;, which prompts a &lt;em&gt;response&lt;/em&gt; – sitting down to write in the study.&lt;/p&gt;
&lt;p&gt;In reality this is probably over simplified. &lt;em&gt;If&lt;/em&gt; the time is 6 am &lt;em&gt;then&lt;/em&gt; your alarm would likely go off, &lt;em&gt;then&lt;/em&gt; you would wake up, &lt;em&gt;then&lt;/em&gt; sit down to write. But that’s beside the point, you get the general idea.&lt;/p&gt;
&lt;p&gt;Let’s take a look at another example.&lt;/p&gt;
&lt;p&gt;This time, lets say your goal is to run a marathon. To help you schedule your training and stay committed, again, you might use an ”if-then plan”.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If&lt;/em&gt; the time is 8 am, &lt;em&gt;then&lt;/em&gt; I will put on my running gear and go for a run outside.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By defining the when, where, and how you want to act on your goal intentions, you affirm a concrete strategy to make your goals more attainable and your behaviour easier to stick with.&lt;/p&gt;
&lt;p&gt;Now let’s look at a slightly different formula for applying implementation intentions.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-formula-for-implementation-intentions&#34;&gt;A simple formula for implementation intentions&lt;/h2&gt;
&lt;p&gt;In his book Atomic Habits, James Clear suggests that an implementation intention is ”a plan you make beforehand about when and where to act. That is, how you &lt;em&gt;intend to implement&lt;/em&gt; a particular habit.”&lt;/p&gt;
&lt;p&gt;James’ formula for creating implementation intentions makes use of two of the most common cues that help trigger a habit; &lt;em&gt;time&lt;/em&gt; and &lt;em&gt;location&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The formula looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will [BEHAVIOUR] at [TIME] in [LOCATION].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a simple, easy to remember way of expressing our “if-then plan”. So let’s revisit our previous example for absolute clarity, but this time apply James’ formula instead.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will write at 6 am in the study.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, &lt;em&gt;write&lt;/em&gt; is our chosen behaviour. It defines &lt;em&gt;how&lt;/em&gt; we will act. The time &lt;em&gt;6 am&lt;/em&gt; specifies ‘when’ we will act. And &lt;em&gt;the study&lt;/em&gt; provides a location. It clarifies ’where’ we will act.&lt;/p&gt;
&lt;p&gt;What I like most about James’ formula is that it makes it so simple and clear. It literally spells it out for you and makes your commitment feel so easy to accomplish.&lt;/p&gt;
&lt;p&gt;But ‘feeling easy’ isn’t exactly a great explanation for why implementation intentions work. So now, let’s put these fomulas to one side, and talk about at what make this strategy such a powerful tool for goal attainment.&lt;/p&gt;
&lt;h2 id=&#34;why-implementation-intentions-work&#34;&gt;Why implementation intentions work&lt;/h2&gt;
&lt;p&gt;By defining a concrete plan of when, where, and how to act, you improve your mental representation of a situation, making it highly active and accessible.&lt;/p&gt;
&lt;p&gt;In other words, by using cues to trigger your actions, you improve your perception, attention and memory concerning the situation. You create a strong associative link between a cue and the response, making your behaviour more likely to occur in the given situation.&lt;/p&gt;
&lt;p&gt;This associative link helps make your behaviour automatic and you begin to perform your actions with very little conscious effort. Your behaviour becomes subconscious, making it easier to show up and practice often.&lt;/p&gt;
&lt;p&gt;Without the need for decision making about your next actions, you’re left with plenty of energy for what really matters.&lt;/p&gt;
&lt;h3 id=&#34;keep-in-mind&#34;&gt;Keep in mind&lt;/h3&gt;
&lt;p&gt;Goal attainment is down to having a good strategy.&lt;/p&gt;
&lt;p&gt;Creating situational cues – for when and where you will act – improves your chances of sticking with your commitments and reaching your goals.&lt;/p&gt;
&lt;p&gt;Assigning specific cues to a chosen behaviour, creates clarity in your mind and a concrete plan of action. This is a strategy know as &lt;em&gt;implementation intentions&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Having a concrete plan for your commitments makes your decisions more autonomous. You spend less time thinking about your actions or fixating on the end goal, and more time being productive. You make things easy.&lt;/p&gt;
&lt;h3 id=&#34;further-reading&#34;&gt;Further reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://psych.nyu.edu/oettingen/Gollwitzer,%20P.%20M.,%20&amp;amp;%20Oettingen,%20G.%20%282013%29.%20In%20%20M.%20Gellman%20&amp;amp;%20J.%20R.%20Turner%20%28Eds.%29.pdf&#34;&gt;Implementation Intentions&lt;/a&gt;, Peter M. Gollwitzer and Gabriele Oettingen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jamesclear.com/implementation-intentions&#34;&gt;Achieve Your Goals&lt;/a&gt; from James Clear&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://daringtolivefully.com/implementation-intentions&#34;&gt;The Key To Goal Success&lt;/a&gt; by Marelisa Fabrega&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thinkinglifter.com/implementation-intentions/&#34;&gt;Implementation Intentions: How to Get Consistent Results&lt;/a&gt; Philip Stefanov&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Intentions 2020</title>
        <link>https://azharkhan.in/articles/intentions-2020/</link>
        <pubDate>Fri, 10 Jan 2020 11:16:15 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/intentions-2020/</guid>
        <description>&lt;p&gt;No unrealistic goals for this year. Instead, all I want to do is outline the things I’m keen to focus regular time and energy on in 2020. I’ve also chosen a set of principles which I plan to use on a daily basis, to help guide my behaviour throughout the year.&lt;/p&gt;
&lt;p&gt;I’m sure not all this will work out, and I’m ok with that. This exercise is about finding clarity in how I wish to spend my time. It’s a rough plan of action that provides myself with a sense of direction, and ensures I make some progress towards positive long-term results.&lt;/p&gt;
&lt;p&gt;To kick things off, here are the areas I’ll focus on.&lt;/p&gt;
&lt;h2 id=&#34;client-work&#34;&gt;Client Work&lt;/h2&gt;
&lt;p&gt;Client work is still the source of most of my income and this will stay the same for 2020.&lt;/p&gt;
&lt;p&gt;This will be the first year working exclusively with JAMStack technology. That means a lot more Hugo, Gatsby, Netlify and Sanity, which I’m pretty excited about. I’m keen to give 11ty a go too. I’ll do my best to record and share what I can.&lt;/p&gt;
&lt;p&gt;I’m keeping my client list small. Working on longer projects with fewer clients seems to be the sweet spot. It keeps the quality of work high and the stress levels low.&lt;/p&gt;
&lt;h3 id=&#34;in-detail&#34;&gt;In Detail&lt;/h3&gt;
&lt;p&gt;We worked hard on the evolution of &lt;a href=&#34;https://indtl.com/&#34;&gt;In Detail&lt;/a&gt; last year. This will continue. We’re launching quite a few changes to the website later this month and plan to focus on three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content creation&lt;/li&gt;
&lt;li&gt;Client acquisition&lt;/li&gt;
&lt;li&gt;Marketing funnel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We plan to work on internal tooling to improve the efficiency of our process and spend time working on our inbound marketing strategy. I’m excited to see what else is in store for In Detail this year.&lt;/p&gt;
&lt;h2 id=&#34;learning&#34;&gt;Learning&lt;/h2&gt;
&lt;p&gt;This year I’m allocating specific blocks in my week dedicated to studying and taking courses. Work-related subjects that I’m choosing to focus on are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vanilla JavasScript&lt;/li&gt;
&lt;li&gt;JAMstack&lt;/li&gt;
&lt;li&gt;IndieWeb&lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;New technologies I’m interested in exploring include Svelte, Vue and KeystoneJS.&lt;/p&gt;
&lt;p&gt;Other non-work related subjects I’m interested in include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;German (I’m on the hunt for an online tutor to supplement my Duolingo practice)&lt;/li&gt;
&lt;li&gt;Designing variable fonts&lt;/li&gt;
&lt;li&gt;Generative art / p5.js / Processing&lt;/li&gt;
&lt;li&gt;Abelton Live&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reading&#34;&gt;Reading&lt;/h2&gt;
&lt;p&gt;I’m going to read more books on design in 2020. A few books I’m particularly interested in reading are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Layout by Andy Bell and Haydon Pickering&lt;/li&gt;
&lt;li&gt;Inclusive Components by Haydon Pickering&lt;/li&gt;
&lt;li&gt;Ruined by Design by Mike Monteiro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also have a few on my non-design related list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Factfulness by Hans Rosling&lt;/li&gt;
&lt;li&gt;12 Rules for Life by Jordan B. Peterson&lt;/li&gt;
&lt;li&gt;Future Ethics by Cennydd Bowles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’d like to read more non-fiction, it’s something I’m not very good at. I promised Rebekka I’ll give Harry Potter a shot (in German) a while back, so it’s time to fulfill that promise.&lt;/p&gt;
&lt;h2 id=&#34;writing&#34;&gt;Writing&lt;/h2&gt;
&lt;p&gt;I didn’t write enough in 2019. I want to change that in 2020 and get back into a daily writing habit. Here are some rough plans for my writing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make part of my morning routine&lt;/li&gt;
&lt;li&gt;Block out at least 1 hour each day&lt;/li&gt;
&lt;li&gt;Document as I learn new things&lt;/li&gt;
&lt;li&gt;keep writing simple and concise&lt;/li&gt;
&lt;li&gt;Avoid long convoluted articles, which are easy to lose interest in&lt;/li&gt;
&lt;li&gt;Focus on short, insightful reads&lt;/li&gt;
&lt;li&gt;Break longer articles into a series of shorter posts&lt;/li&gt;
&lt;li&gt;Consider writing a course (a few people have suggested Hugo might be a good place to start)&lt;/li&gt;
&lt;li&gt;Share new articles on social media&lt;/li&gt;
&lt;li&gt;Re-post coding tutorials on dev.to&lt;/li&gt;
&lt;li&gt;Provide an article image for RSS feeds and social&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;newsletter&#34;&gt;Newsletter&lt;/h2&gt;
&lt;p&gt;I plan on keeping my newsletter much the same for now. I am keen to work on a microsite that archives past issues. I find myself referring back to old emails often, so this will be a useful tool. I’m sure it might be useful for everyone subscribing too.&lt;/p&gt;
&lt;p&gt;I’d like to pick up where I left off with the spreadsheet that accompanies the newsletter. The aim is to index all the content into a searchable format. It’s time-consuming to build but will be a powerful addition to the newsletter.&lt;/p&gt;
&lt;h2 id=&#34;health&#34;&gt;Health&lt;/h2&gt;
&lt;p&gt;In 2019 I managed to stick to a regular weekly routine of running, meditation and yoga. I plan to keep this up in 2020, with the addition of a few new plans:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Climb more&lt;/li&gt;
&lt;li&gt;Get better at batch meal prep&lt;/li&gt;
&lt;li&gt;Increase my headstand practice to 2min/day&lt;/li&gt;
&lt;li&gt;Fermentation (I started making my own Sauerkraut last year, which is good fun and much cheaper than buying it)&lt;/li&gt;
&lt;li&gt;Find a new meditation app (I’ve used Headspace for years so it’s time for a change). Right now I’m trying out Waking Up by Sam Harris and Insight Timer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;travel&#34;&gt;Travel&lt;/h2&gt;
&lt;p&gt;I’m going for 4 countries this year. That’s two on top of the usual (UK and Germany), which will include France and I expect one other (?).&lt;/p&gt;
&lt;p&gt;Rebekka and I have a few summer road trip ideas. We’re thinking of driving the van either down to the Alps or possibly to Slovenia, Denmark or Sweden. We’re still undecided.&lt;/p&gt;
&lt;h2 id=&#34;networking&#34;&gt;Networking&lt;/h2&gt;
&lt;p&gt;I’d like to make more of an effort to meet up with other designers and developers this year. Finding an interesting Meetup to join is a top priority. I’d also like to make it to an industry conference. I’ve not done much of this in the past, so need to work on this.&lt;/p&gt;
&lt;h2 id=&#34;side-projects&#34;&gt;Side projects&lt;/h2&gt;
&lt;p&gt;I’m trying to be more conscious about the time I spend on side projects in 2020. I’ve dedicated specific time blocks for side projects on Mondays and Fridays. I failed to do this in 2019, so the time I spent on side projects suffered.&lt;/p&gt;
&lt;p&gt;A few of the projects I’m interested in pursuing this year are:&lt;/p&gt;
&lt;h3 id=&#34;type-design&#34;&gt;Type Design&lt;/h3&gt;
&lt;p&gt;It’s time to evolve &lt;a href=&#34;https://typeservices.co/&#34;&gt;Type Services&lt;/a&gt; in a new direction to better reflect my current interests in typography.&lt;/p&gt;
&lt;p&gt;This year I’d like to create at least one new typeface. Something simple like a geometric monospaced font could be a good place to start. I’ll stick to Latin letters for now, but I’d like to build something systematic, which I can expand in the future.&lt;/p&gt;
&lt;p&gt;Something else I’m keen to look into more is variable fonts. I haven’t found much out there in the way of learning material, but I’m up for the challenge.&lt;/p&gt;
&lt;p&gt;I expect this will include rebranding the project and building a new website.&lt;/p&gt;
&lt;h3 id=&#34;generative-art&#34;&gt;Generative Art&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://soundcloud.com/dark-sky&#34;&gt;Matt&lt;/a&gt; and I had a few discussions about generative art towards the end of last year. We talked about making graphics that connect with the music he creates, in the literal sense. Coding graphics that interface with music is something that interests me a lot.&lt;/p&gt;
&lt;p&gt;Lately I’ve been playing around with &lt;a href=&#34;https://p5js.org/&#34;&gt;P5.js&lt;/a&gt;, following videos from &lt;a href=&#34;https://www.youtube.com/thecodingtrain/&#34;&gt;Daniel Shiffman&lt;/a&gt;, who I discover through &lt;a href=&#34;https://daneden.me/2016/11/02/drawing-with-numbers/&#34;&gt;Dan Eden&lt;/a&gt;. Daniel’s videos are a great introduction to processing and I’m keen to see how this evolves.&lt;/p&gt;
&lt;h3 id=&#34;moodboard&#34;&gt;Moodboard&lt;/h3&gt;
&lt;p&gt;I used to create personal mood boards to spot themes in my interests. I’ve not been doing this so much lately and I’d like to get back into it. A while back I set up a &lt;a href=&#34;https://mood.harrycresswell.com/&#34;&gt;mood board&lt;/a&gt; but have since let it fall by the wayside. It’s time to pick this up again and start posting some ideas.&lt;/p&gt;
&lt;h3 id=&#34;music&#34;&gt;Music&lt;/h3&gt;
&lt;p&gt;If time permits I’d like to get back into making some music. It’s been over 10 years since I made anything notable. I dug out a few old tracks towards the end of last year which reminded me how much fun it is to play around with sound.&lt;/p&gt;
&lt;h3 id=&#34;other-ideas&#34;&gt;Other ideas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Course creation. This is something I will be considering more in 2020. Particularly when I find myself tempted to write long articles. I’ll ask myself whether I can make a series of articles or whether it would make sense to create a course.&lt;/li&gt;
&lt;li&gt;Aggregation sites. I have a few spreadsheets collating tools, open-source fonts, and UX resources. I figured it could be helpful to build these out into searchable websites.&lt;/li&gt;
&lt;li&gt;Printmaking. I used to screen print and I have to say I miss it a lot. Mono printing might be a simple alternative that I could do at home without needing a studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;principles-for-2020&#34;&gt;Principles for 2020&lt;/h2&gt;
&lt;p&gt;Ok, on to the principles. To recap, this year I’m setting myself a few principles to follow over the next 12 months.&lt;/p&gt;
&lt;p&gt;I’ll use these simple ways of thinking to guide my process and apply to various aspects of my commitments. By affirming these principles I hope to make some progress towards the person I wish to become.&lt;/p&gt;
&lt;h3 id=&#34;keep-it-simple&#34;&gt;Keep it simple&lt;/h3&gt;
&lt;p&gt;Avoid complexity when it makes sense to do so. This could mean any number of things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;focus on less&lt;/li&gt;
&lt;li&gt;reduce to only what’s necessary&lt;/li&gt;
&lt;li&gt;make writing more concise&lt;/li&gt;
&lt;li&gt;subtract not add&lt;/li&gt;
&lt;li&gt;simplify&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Through simplification we remove things standing in the way of progression. By simplifying we find clarity in our thoughts. Focusing on less can reduce cognitive load and lead to an increase in productivity.&lt;/p&gt;
&lt;p&gt;A few question I’ve been asking myself a lot lately; “What constraints are preventing you from getting X done?” and “What can you remove to make things easier?”&lt;/p&gt;
&lt;p&gt;To be clear, constraints of this type shouldn’t be confused with design constraints, which often have the opposite effect.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Occam%27s_razor&#34;&gt;Occam’s Razor&lt;/a&gt; is a useful mental model to apply to this way of thinking. To paraphrase; “the simplest solution is more likely to be the correct than the complicated one”.&lt;/p&gt;
&lt;h3 id=&#34;be-consistent&#34;&gt;Be Consistent&lt;/h3&gt;
&lt;p&gt;Consistency comes up for a second year running. Ironic maybe, but important nonetheless. Generally speaking, the more consistent I am with commitments, the more I seem to create good habits. With time, good habits result in positive improvement.&lt;/p&gt;
&lt;p&gt;I continue to remind myself each day that “consistency is key”.&lt;/p&gt;
&lt;h3 id=&#34;consider-the-impact&#34;&gt;Consider the impact&lt;/h3&gt;
&lt;p&gt;“Are the things you’re doing having a positive impact on the people around you and the world we live in?”&lt;/p&gt;
&lt;p&gt;It’s an important time to consider the impact of the work we create. I will be more conscious of my actions in 2020.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a rough outline of how I wish to spend my time in 2020, and the principles I have chosen to keep myself on track. It’s a simple way of improving my chances of living the life I want to lead over the next 12 months.&lt;/p&gt;
&lt;p&gt;I decided against setting any fixed outcome goals this year. Strict weekly, monthly or even quarterly planning seems to stress me out. Instead, I’ll follow whatever course my energy chooses to take me and keep these affirmations at the front of my mind.&lt;/p&gt;
&lt;p&gt;This way I remain flexible with my commitments, as things change throughout the year. Providing I put regular time and effort into a few of these things, I’ll make good progress in the right direction.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>2019 in Review</title>
        <link>https://azharkhan.in/articles/2019-review/</link>
        <pubDate>Tue, 31 Dec 2019 14:17:30 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/2019-review/</guid>
        <description>&lt;p&gt;With 2019 almost over, it’s time to reflect on what have been another busy 12 months. This is a chance to take note of my successes and failures and pinpoint potential areas for improvement. I’ll do so by asking three simple questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What went well this year?&lt;/li&gt;
&lt;li&gt;What didn’t go so well this year?&lt;/li&gt;
&lt;li&gt;What did I learn this year?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’ve ever read Atomic Habits by James Clear, then these questions will sound familiar.&lt;/p&gt;
&lt;p&gt;By reflecting on these questions I hope to better understand where I need to focus my time and energy in the year ahead. Life moves fast and I find time and time again that slowing down is the best way to stay ahead.&lt;/p&gt;
&lt;h2 id=&#34;what-went-well-this-year&#34;&gt;What went well this year?&lt;/h2&gt;
&lt;p&gt;Ok, let’s start with the good stuff that has happened this year.&lt;/p&gt;
&lt;h3 id=&#34;work&#34;&gt;Work&lt;/h3&gt;
&lt;p&gt;This year I’ve been lucky enough to work with a select few clients who allow me to work on the things I’m most interesting in and learn new technologies whilst doing so.&lt;/p&gt;
&lt;p&gt;I built two new websites I’m particularly pleased with – &lt;a href=&#34;https://hub.seedtribe.com/&#34;&gt;SeedTribe Hub&lt;/a&gt; and &lt;a href=&#34;https://www.jobs.angelinvestmentnetwork.co.uk/&#34;&gt;AIN Jobs&lt;/a&gt; – both using a new tech stack (React, Gatsby, GraphQL and Sanity). I’ve learned much more about programming in JavaScript in the process.&lt;/p&gt;
&lt;p&gt;I really wasn’t expecting to pick up basic React concepts and GraphQL so quickly. Testament to the Gatsby and Sanity docs and the many Slack channels I’ve joined this year. Everyone in the Sanity Slack Group and in particular &lt;a href=&#34;https://twitter.com/kmelve&#34;&gt;Knut&lt;/a&gt; from the Sanity core team have been incredibly helpful.&lt;/p&gt;
&lt;h3 id=&#34;newsletter&#34;&gt;Newsletter&lt;/h3&gt;
&lt;p&gt;I had a good year with &lt;a href=&#34;https://harrycresswell.com/newsletter/&#34;&gt;my weekly newsletter&lt;/a&gt; which I published consistently, only missing four weeks due to holiday. I’ve started to notice the impact of this commitment. Although the number of you subscribing is still modest that number has increased substantially. I haven’t done much at all in the way of marketing, so I’m pleased so many of you are enjoying it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/ashleyo_brien/status/1180073230809419776?s=20&#34;&gt;Ash was kind enough to Tweet about it&lt;/a&gt; and several of you have emailed with positive feedback and questions. I’ve no doubt it’s been a great way to connect with other designers and developers and start conversations about common interests.&lt;/p&gt;
&lt;h3 id=&#34;in-detail&#34;&gt;In Detail&lt;/h3&gt;
&lt;p&gt;Last year one of my intentions was to move In Detail forward and together with &lt;a href=&#34;https://www.instagram.com/beaniemajor/&#34;&gt;Beanie&lt;/a&gt; and &lt;a href=&#34;https://lukeharvey.co.uk/&#34;&gt;Luke&lt;/a&gt; we’ve successfully done that.&lt;/p&gt;
&lt;p&gt;We made a big decision to pivot the business model by narrowing our focus to helping our clients collaborate with designers to design bespoke engagement rings. It’s was a bit of a no brainer, as this is what most of our clients are coming to us for help with. It just took some courage to drop the jewellery box content which we’d become well known for and change direction.&lt;/p&gt;
&lt;p&gt;Our transition was heavily inspired by a simple idea – ‘do one thing and do it well’ – which we borrowed from a concept called &lt;a href=&#34;https://www.ted.com/talks/rory_sutherland_perspective_is_everything&#34;&gt;goal dilution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the business modal simplified, we have clarity in our focus and a clear direction for our content. The business now feels more aligned with our current values concerning consumerism and the environment – buy less and make what you do buy last a lifetime.&lt;/p&gt;
&lt;h3 id=&#34;health&#34;&gt;Health&lt;/h3&gt;
&lt;p&gt;This years been a good year for health. Since last year I’ve doubled my number of runs and I’m now tracking all my sessions. Alternating run days with yoga days has reduced the strain on my body and keep my knees happy. By tracking sessions I can now spot where I’m doing well and where I need to focus more time and effort.&lt;/p&gt;
&lt;p&gt;I also started climbing again which feels good. It’s fun to solve problems unrelated to design and code for a change. For me climbing creates mind space, it’s calming and methodical, which I like. I’m sure it must improve capacity to work in some way too.&lt;/p&gt;
&lt;p&gt;On that note I continued to meditate most mornings. I’ve no doubt meditation helps with focus and improves my ability to think clearly, particularly in more stressful situations or when I’ve had a lot on my plate.&lt;/p&gt;
&lt;h3 id=&#34;travel-and-family&#34;&gt;Travel and family&lt;/h3&gt;
&lt;p&gt;In February I spent a few days in France skiing with my dad and sister. It’s not often we spend time together so it was a real treat. We also took a family trip to Corfu in the summer which was a lot of fun. It’s the first time we’ve all been away together since I was small.&lt;/p&gt;
&lt;p&gt;Rebekka and I took the van to England for a road trip and headed up to Northumberland and The Lake District. I have to admit, after initially feeling slightly underwhelmed by the idea of a holiday in my own country I couldn&amp;rsquo;t have enjoyed it more. England is a magical place, full of history, incredible people and beautiful landscapes. I’m proud to call it my home country.&lt;/p&gt;
&lt;h3 id=&#34;finance&#34;&gt;Finance&lt;/h3&gt;
&lt;p&gt;I finally paid off my student loan. I should have done it years ago but kept putting it off. It feels good to be debt free.&lt;/p&gt;
&lt;p&gt;Because of this I also took the time to set up a self invested personal pension (SIPP). I’ve realised how important it is to think about your future when you work for yourself. After all, nobody else will do it for you. With the power of &lt;a href=&#34;https://en.wikipedia.org/wiki/Compound_interest&#34;&gt;compound interest&lt;/a&gt; it makes sense to do this stuff sooner rather than later. The more time you have the more your money can make.&lt;/p&gt;
&lt;h3 id=&#34;dark-sky-collab&#34;&gt;Dark Sky Collab&lt;/h3&gt;
&lt;p&gt;Matt and I collaborated again on &lt;a href=&#34;https://soundcloud.com/dark-sky/sets/cold-harbour-ep&#34;&gt;the latest Dark Sky release&lt;/a&gt;. Really pleased with how this one turned out. It’s been 8 years since we first joined forces for Black Rainbows EP and we’ve worked on pretty much every release since.&lt;/p&gt;
&lt;p&gt;Matt’s music is the source of so much inspiration and I’m proud to work on this project together with him. It’s given me a platform to think more conceptually, work with complete creative freedom and do something totally different from building websites, for a change.&lt;/p&gt;
&lt;h2 id=&#34;what-didnt-go-so-well-this-year&#34;&gt;What didn’t go so well this year?&lt;/h2&gt;
&lt;p&gt;Now for the things that didn’t quite go to plan.&lt;/p&gt;
&lt;h3 id=&#34;writing&#34;&gt;Writing&lt;/h3&gt;
&lt;p&gt;I wrote a fair amount this year but didn’t publish much of it, particularly in the way of articles. I felt the pressure to replicate and improve the writing I had some success with in 2018.&lt;/p&gt;
&lt;p&gt;I also began thinking more about the impact of my writing. I questioned the quality of what I had written and wondered if I was just adding to the noise with transient words of little value.&lt;/p&gt;
&lt;p&gt;Overthinking can hold you back but at the same time I feel it’s important to be responsible for what we put out into the world and make a conscious contribution for the right reasons.&lt;/p&gt;
&lt;p&gt;I felt more comfortable writing short technical notes that do away with design opinions. It’s felt more like keeping a wiki and they’re much easier to write. I’d like to write more about design in 2020 but most likely from more of a technical/coding perspective.&lt;/p&gt;
&lt;h3 id=&#34;courses&#34;&gt;Courses&lt;/h3&gt;
&lt;p&gt;I dipped in and out of a few courses but didn’t get fully into anything, so I want to make this a priority for 2020. This year felt busier than most and because of that I found less time for structured learning.&lt;/p&gt;
&lt;p&gt;To start the year on the right foot I picked up &lt;a href=&#34;https://beginnerjavascript.com/&#34;&gt;Beginner JavaScript by Wes Bos&lt;/a&gt; which I hope to use it to fill the gaps in some of my knowledge, particularly on ES6 and practice building more with vanilla JavaScript.&lt;/p&gt;
&lt;p&gt;I also bought &lt;a href=&#34;https://scrimba.com/g/greact&#34;&gt;Advanced React Bootcamp&lt;/a&gt; on Scrimba for the same reason. Although I’ve been working with React quite a bit this year, some of the more advanced concepts still leave me scratching my head. This is something else I need to work on in 2020.&lt;/p&gt;
&lt;h3 id=&#34;german&#34;&gt;German&lt;/h3&gt;
&lt;p&gt;I thought having a German girlfriend might help me pick up the language relatively quickly, but it turns out it’s far more difficult than I had anticipated. Potentially more so than JavaScript, for me anyway! I found the basics pretty easy but the conjugations and incessant changing of words caused by the article completely throw me.&lt;/p&gt;
&lt;p&gt;Although I’ve stuck with my daily 30 minutes of Duolingo this year, I need to work on my understanding of the grammar and find an environment where I can speak more.&lt;/p&gt;
&lt;p&gt;I didn’t make that happen this year so I’m planning on finding an online tutor, perhaps from &lt;a href=&#34;https://preply.com/&#34;&gt;Preply&lt;/a&gt; to help me out. It seems more realistic than going back to to the classroom to study as it takes up less time in the day. Either way I’m committed, my progress is just much slower than expected.&lt;/p&gt;
&lt;h3 id=&#34;type-design&#34;&gt;Type design&lt;/h3&gt;
&lt;p&gt;It’s not been a great year for my side project Type Services. I haven’t worked on the project at all this year and I’ve been trying to pin-point why that is.&lt;/p&gt;
&lt;p&gt;I realise that perhaps I’ve moved on from the style of type I was creating and feel the world of variable fonts and type designed for screens is more where I’m at. It’s certainly more in line with the rest of my work.&lt;/p&gt;
&lt;p&gt;With that it feels like a good time to re-align my aim for the project and evolve it into something new. I think about typography and type design a lot so I’ve no plans to stop designing type, I just think a new direction might help reignite my passion for it.&lt;/p&gt;
&lt;h3 id=&#34;networking&#34;&gt;Networking&lt;/h3&gt;
&lt;p&gt;I’ve never been a great one for networking. I’m quite happy spending time on my own which can be both good and bad. This year was the first time I’ve felt like my lack of networking might be holding me back.&lt;/p&gt;
&lt;p&gt;I’d like to get out there a bit more next year by joining a Meetup or making at least one industry event. I plan to make more of an effort in 2020 and hope to meet more creative folk in the real world.&lt;/p&gt;
&lt;h3 id=&#34;social-media&#34;&gt;Social media&lt;/h3&gt;
&lt;p&gt;I’m a big fan of Twitter but I still can’t seem to make a habit of posting regularly. It always comes as an afterthought and I rarely feel I have anything interesting to add to the conversation. Like a lot of things I’m sure this is down to my own lack of self confidence.&lt;/p&gt;
&lt;p&gt;Generally I find it helps to plan content ahead, but with social media that somehow feels a bit contrived and not spontaneous enough. Perhaps some form of scheduling could help. Or some sort of content plan where I stick to &lt;a href=&#34;https://twitter.com/harrycresswell/status/1200881854703972352?s=20&#34;&gt;sharing helpful tips&lt;/a&gt; and leave it at that.&lt;/p&gt;
&lt;p&gt;I’ve found my feet more in Slack channels this year. I feel more comfortable asking questions and helping others in that format. Perhaps that’s because it feels slightly more private and less like the whole world is watching.&lt;/p&gt;
&lt;h2 id=&#34;what-did-i-learn-in-2019&#34;&gt;What did I learn in 2019?&lt;/h2&gt;
&lt;p&gt;Technical skills aside, next I’ll outline some of the helpful ways of thinking I adopted this year which I feel have made a big impact to my progress.&lt;/p&gt;
&lt;h3 id=&#34;simplify-to-avoid-setbacks&#34;&gt;Simplify to avoid setbacks&lt;/h3&gt;
&lt;p&gt;Some of my biggest setbacks came from complexity. I spent far too much time fixing things like broken dependencies, trying to write monster articles then loosing interest, or using too many different tools that I didn’t actually need. That really held me back.&lt;/p&gt;
&lt;p&gt;I learned that by making things as easy as possible it’s far more likely you’ll achieve your goals. Often this comes from simplifying your process, taking on less obligations or focusing on fewer things. It’s well worth taking the time to think about what you can &lt;a href=&#34;https://sivers.org/subtract&#34;&gt;Subtract&lt;/a&gt; in order to improve.&lt;/p&gt;
&lt;p&gt;With this in mind I made a number of big changes to my design and productivity workflow. I switched to Figma for UI prototyping, which allowed me to ditch 3 tools in Sketch, Invision and Abstract. I also jumped on the Notion bandwagon which replaces Evernote, Airtable, Trello and Pocket. Notion, is literally an all-in-one tool, it’s fantastic. Because of these changes I’m now far more focused and productive and I save money too.&lt;/p&gt;
&lt;p&gt;I also went back to basics with my build process, replacing Gulp in many of my project starters with NPM scripts. In the case of Hugo I switched to using the built in assets pipeline. I’m trying to think more consciously about dependencies and whether they are absolutely necessary.&lt;/p&gt;
&lt;p&gt;This has reduced the number of issue I’m having. It’s saved me time as it’s made my build times quicker. And it’s allowed me to focus more on doing stuff and less on fixing things. Taking the time to think about ways I can improve my processes instead of jumping in with little thought has been invaluable.&lt;/p&gt;
&lt;h3 id=&#34;consistency-is-still-the-key&#34;&gt;Consistency is still the key&lt;/h3&gt;
&lt;p&gt;Consistency is an amazing thing. Whilst its importance is arguably be over played in UI design, it’s incredibly powerful for making improvements to your daily life and work.&lt;/p&gt;
&lt;p&gt;Most of the improvements I made this year – particularly in my health, my newsletter and through learning new skills – were down to one thing, I was more consistent. I kept track of my habits and workouts in Notion and kept an eye on areas I was falling down so I could make improvements. A little bit each day definitely seems to go a long way.&lt;/p&gt;
&lt;h3 id=&#34;the-power-of-inversion&#34;&gt;The power of inversion&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://fs.blog/2013/10/inversion/&#34;&gt;Inversion&lt;/a&gt; is a powerful mental model which I’ve begun using more consciously. The idea is you turn a problem on its head, start with the desired outcome and work backwards to find the solution.&lt;/p&gt;
&lt;p&gt;This is a great way to remove obstacles which may be standing in the way, and avoid obvious stupid mistakes. Often it starts with the simple question – ”what is my goal?” Then, consider the question - “what is preventing me from achieving this goal?”.&lt;/p&gt;
&lt;p&gt;Thinking about what you want to avoid can be more effective for making progress than simply asking asking yourself – “what can I do to solve this problem?”&lt;/p&gt;
&lt;h3 id=&#34;you-are-what-you-eat&#34;&gt;You are what you eat&lt;/h3&gt;
&lt;p&gt;It’s been a long time since my body has felt as good as it has this year. I’ve spent a lot of time on my health and my diet and I’ve finally started to master what I need to put into my body and how to look after it properly.&lt;/p&gt;
&lt;p&gt;For me, much of this is based on the gut. IBS has plagued me for years, but since discovering the power of fermented foods, by reading &lt;a href=&#34;https://www.goodreads.com/book/show/23013953-gut?from_search=true&amp;amp;qid=mVZRHNHpBT&amp;amp;rank=5&#34;&gt;Gut&lt;/a&gt; and &lt;a href=&#34;https://www.goodreads.com/book/show/24886264-cultured-food-for-health?ac=1&amp;amp;from_search=true&amp;amp;qid=FT9nTVtfqm&amp;amp;rank=2&#34;&gt;Cultured Food for Health&lt;/a&gt;, I’ve started to get a hold of these issue.&lt;/p&gt;
&lt;p&gt;The 3 K’s (as I like to call them) – Kimchi, Kombucha and Kefir – have been a real game changer. And whilst this might not work for everyone they’ve certainly helped me. I only wish I’d discovered this stuff sooner.&lt;/p&gt;
&lt;p&gt;In 2020 I’d like to spend more time learning about fermentation and giving it a go myself.&lt;/p&gt;
&lt;h2 id=&#34;2019-in-numbers&#34;&gt;2019 in numbers&lt;/h2&gt;
&lt;p&gt;Now for the numbers. I wish I’d recorded more but it’s not always easy to keep track of everything. Here’s what I have managed to keep track off this year.&lt;/p&gt;
&lt;h3 id=&#34;health-stats&#34;&gt;Health stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;104 recorded runs&lt;/li&gt;
&lt;li&gt;217 recorded yoga sessions&lt;/li&gt;
&lt;li&gt;33 hours and 92 minutes meditated&lt;/li&gt;
&lt;li&gt;9,580 press-ups&lt;/li&gt;
&lt;li&gt;131.5 recorded minutes in a headstand&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;work-stats&#34;&gt;Work stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;48 newsletters sent&lt;/li&gt;
&lt;li&gt;4 articles published&lt;/li&gt;
&lt;li&gt;12 notes published&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;learning-stats&#34;&gt;Learning stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;18 books read&lt;/li&gt;
&lt;li&gt;56 hours of German on Duolingo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;environment-stats&#34;&gt;Environment stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;23.87 trees planted via Ecosia&lt;/li&gt;
&lt;li&gt;18 trees planted via donation to TreesforCities&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;travel-stats&#34;&gt;Travel stats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;6 countries visited – England, Germany, Netherlands, Belgium, France and Greece (Corfu)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recommendations-for-2019&#34;&gt;Recommendations for 2019&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Best Documentary&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=aCv29JKmHNY&#34;&gt;Inside Bill’s Brain: Decoding Bill Gates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best Documentary runner-up&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=iX8GxLP1FHo&#34;&gt;The Great Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite article&lt;/strong&gt;: &lt;a href=&#34;https://ethanmarcotte.com/wrote/the-world-wide-work/&#34;&gt;The World-Wide Work&lt;/a&gt; by Ethan Marcotte&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite book&lt;/strong&gt;: &lt;a href=&#34;https://www.goodreads.com/book/show/48419903-brief-answers-to-the-big-questions&#34;&gt;Brief answers to the big questions&lt;/a&gt; by Stephen Hawking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite book runner-up&lt;/strong&gt;: &lt;a href=&#34;https://www.goodreads.com/book/show/21083719-human-universe&#34;&gt;Human Universe&lt;/a&gt; by Brian Cox&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite Series&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=XrC4vDcWmxk&#34;&gt;One Strange Rock&lt;/a&gt; by Darren Aronofsky&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite Series runner-up&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=s9APLXM9Ei8&#34;&gt;Chernobyl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite quote&lt;/strong&gt;: “The only thing I know is that I know nothing” - Socrates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Music most listened to&lt;/strong&gt;: &lt;a href=&#34;https://soundcloud.com/dark-sky/sets/cold-harbour-ep&#34;&gt;Cold Harbour EP&lt;/a&gt; by Dark Sky&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Favourite exhibition&lt;/strong&gt;: &lt;a href=&#34;https://www.barbican.org.uk/whats-on/2019/event/ai-more-than-human&#34;&gt;AI: More than Human&lt;/a&gt; at the Barbican&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;final-words&#34;&gt;Final words&lt;/h2&gt;
&lt;p&gt;This was my second time &lt;a href=&#34;https://harrycresswell.com/articles/year-in-review/&#34;&gt;writing a year in review&lt;/a&gt; and once again it’s been a valuable exercise. It’s helped me to put my foot on the brakes and take stock of my accomplishments or lack thereof. In some way or another it’s helped me better understand myself, in terms of what I care most about, what no longer serves me, where I can improve and where I should focus my efforts.&lt;/p&gt;
&lt;p&gt;I referred to my &lt;a href=&#34;https://harrycresswell.com/articles/2018-review/&#34;&gt;2018 in review&lt;/a&gt; throughout this year, using it to keep tabs on my progress. In 2020 I hope to do the same with this one, using it to move more consciously through life, make better decisions and practice gratitude wherever possible.&lt;/p&gt;
&lt;p&gt;To that end I’d like to say thanks to everyone who has helped make this year a great success, I’m grateful to you all. Wishing you all a very happy new year and here’s to the next decade. Thanks for reading!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Performant syntax highlighting in Hugo</title>
        <link>https://azharkhan.in/articles/performant-syntax-highlighting-in-hugo/</link>
        <pubDate>Mon, 02 Dec 2019 12:56:26 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/performant-syntax-highlighting-in-hugo/</guid>
        <description>&lt;p&gt;The quickest way to use syntax highlighting in Hugo is with &lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;Chroma&lt;/a&gt;, the default syntax highlighter. Without any config, you can wrap a code block in the built in &lt;code&gt;highlight&lt;/code&gt; Shortcode, pass in the language as a variable and you’re code will be highlighted:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;lt; highlight go &amp;gt;}
	// Html code to highlight
{&amp;lt; / highlight &amp;gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note: to render the example above on the page I have used single curly braces. You will need to use double curly braces.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The advantage of using Chroma over other JavaScript libraries like &lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; or &lt;a href=&#34;https://prismjs.com/&#34;&gt;Prisma.js&lt;/a&gt; is that it’s built right into Hugo and doesn’t require any external dependencies. This make it extremely fast and reliable.&lt;/p&gt;
&lt;p&gt;Out of the box, however, Chroma doesn’t give us much control over the style of our highlighted code. To change that all we need to do is add one line of code to the top level of our &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Enable for syntax highlighting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;pygmentsUseClasses&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: It’s important you add this line to the top level and not under &lt;code&gt;[params]&lt;/code&gt; if you want it to work. Something like this should do it:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;baseurl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:1313/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;theme=&lt;span class=&#34;s2&#34;&gt;&amp;#34;theme name&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;languageCode&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;title&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your site title&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable for syntax highlighting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;pygmentsUseClasses&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-option-for-code-fencing&#34;&gt;Adding option for code fencing&lt;/h2&gt;
&lt;p&gt;It is also possible to add syntax highlighting to code within code fences. To enable this add the following to your &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;pygmentsCodefences&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can wrap your code in two sets of triple backticks (```) and specify the language after the opening set to highlight the code correctly. Make sure you check the &lt;a href=&#34;https://github.com/alecthomas/chroma#supported-languages&#34;&gt;list of supported langauges&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(```) yaml
pygmentsUseClasses = true
pygmentsCodeFences = true
(```)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note: Make sure you omit the parentheses as seen above. This is just to show you the code without it rendering.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now you can highlight any syntax inside of code fences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;customising-your-syntax-theme&#34;&gt;Customising your syntax theme&lt;/h2&gt;
&lt;p&gt;To change the theme of your syntax highlighting generate &lt;code&gt;chromastyles&lt;/code&gt;. Then set the name of the theme you want using the &lt;code&gt;--style&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;From the command line run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo gen chromastyles --style=lovelace &amp;gt; syntax.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will generate the &lt;code&gt;syntax.css&lt;/code&gt; file at the root of your project.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://xyproto.github.io/splash/docs/&#34;&gt;https://xyproto.github.io/splash/docs/&lt;/a&gt; for available themes. You can also run &lt;code&gt;hugo gen chromastyles -h&lt;/code&gt; to see more options.&lt;/p&gt;
&lt;p&gt;Don’t forget to link to the stylesheet from the &lt;!-- raw HTML omitted --&gt; of your document otherwise your theme won’t work!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Expert and beginner</title>
        <link>https://azharkhan.in/articles/expert-beginner/</link>
        <pubDate>Fri, 29 Nov 2019 09:30:13 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/expert-beginner/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Recently, my girlfriend showed me a new way to make responsive grids without media queries. The technique uses repeat, auto-fit and min-max and until that point I wasn’t aware of it. Rebekka’s only been coding for a few months, but she’s already teaching me so much that I don’t already know. 
&lt;/p&gt;

&lt;p&gt;What excites me most about building things for the web is that it’s constantly evolving and because of this, we’re continuously learning new methods. It seems like every day there’s an exciting new way of doing something and it’s almost always an improvement on the techniques we know or that we’ve relied on for years. At times you find yourself learning these techniques from someone just starting out. Someone you might think of as a beginner. But regardless of their inexperience, you can guarantee they know something you don’t. Just as they might be keen to learn from you, you can learn something just as valuable from them, becoming a better developer in the process.&lt;/p&gt;
&lt;p&gt;Rachel Andrew summed this up perfectly in &lt;a href=&#34;https://twitter.com/rachelandrew/status/1096807596462403584&#34;&gt;a recent tweet&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I love that in this industry you get to be an expert and a beginner at the same time. Learning new things, being a beginner, reminds me what that is like and makes me a better teacher of the things I am expert in.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The constant need to learn and start over can feel overwhelming at times, we all feel it, regardless of our experience or lack there of. It’s the way we frame our mindset and approach our work which is the most important thing to master.&lt;/p&gt;
&lt;p&gt;Some people let it get to them, becoming despondent with their attitude and outdated in their approach. They form what you might call a ‘fixed‘ mindset, preventing themselves from developing further. Others choose to grow, seeing this as an exciting opportunity. They embrace the attitude of a life long learner and learn continuously from whoever they can.&lt;/p&gt;
&lt;p&gt;As so-called inexperienced developers it’s important to value what little we may know. Be confident knowing that though we may refer to ourselves as beginners, we are in fact experts alike. We have something just as important to teach as we have to learn, regardless of how long we’ve been building things for the web. The vastness and complexity of this industry means it’s impossible know it all. There’s a very good chance what we choose to focus on is different to that of our more experienced co-worker. We must use this to our advantage every way we can.&lt;/p&gt;
&lt;p&gt;You may have read Frank Chimero’s seminal article &lt;a href=&#34;https://frankchimero.com/writing/everything-easy-is-hard-again/%7C&#34;&gt;Everything easy is hard again&lt;/a&gt; in which he says;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”In one way, it is easier to be inexperienced: you don’t have to learn what is no longer relevant. Experience, on the other hand, creates two distinct struggles: the first is to identify and unlearn what is no longer necessary (that’s work, too). The second is to remain open-minded, patient, and willing to engage with what’s new, even if it resembles a new take on something you decided against a long time ago.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As experienced developers we must maintain the desire to learn and reinvent. We must listen and keep an open-mind about who we learn from. Learning from those just starting out can help us to embrace &lt;a href=&#34;https://en.wikipedia.org/wiki/Shoshin&#34;&gt;Shoshin&lt;/a&gt;, otherwise know as ‘Beginners Mind‘. Whilst teaching can help us remain humble, learn patience and let go of our preconceptions. As we teach something new, we learn to approach each problem as if it was for the first time.&lt;/p&gt;
&lt;p&gt;No matter how much we think we know, we must never think we know it all or believe we are better, simple because we‘ve been doing it longer. We cannot afford to be precious about what we know. Holding on makes it harder to let go. We must be challenge our techniques when challenged and questioning when the time is right to reinvent our methods. Doing so will help us to unlearn what is no longer necessary.&lt;/p&gt;
&lt;p&gt;What’s interesting to me is that after all these years many of us are no closer to figuring out which group we fit in. Are we experts or are we beginners? We may think of ourselves as experts in many areas, but we’re beginners in countless others. We are in fact all experts &lt;em&gt;and&lt;/em&gt; beginners and whilst this medium continues to evolve (which it will) this will always be the case.&lt;/p&gt;
&lt;p&gt;So by valuing the teachings experts and beginners alike and embracing the idea that we too are an expert and a beginner, we become better developers. You might go as far as to say that this willing and open-minded approach is fundamental in making a great developer.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codepen.io/harrycresswell/pen/qLoNQj&#34;&gt;CSS Grid: Responsive grid with auto-fit and minmax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rachel Andrew on &lt;a href=&#34;https://twitter.com/rachelandrew/status/1096807596462403584&#34;&gt;being an expert and a beginning&lt;/a&gt; at the same time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shoshin&#34;&gt;Shoshin&lt;/a&gt;, the Zen Buddhism teachings of Beginners Mind.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://frankchimero.com/writing/everything-easy-is-hard-again/%7C&#34;&gt;Everything easy is hard again&lt;/a&gt; by Frank Chimero&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      
    
      
      <item>
        <title>2018 in Review</title>
        <link>https://azharkhan.in/articles/2018-review/</link>
        <pubDate>Mon, 31 Dec 2018 14:10:29 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/2018-review/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    With 2018 drawing to a close, I’ve decided to share my first Year in Review.
&lt;/p&gt;

&lt;p&gt;This is a chance to reflect and review my successes and failures over the past year, in a conscious effort to evaluate my progress, make improvements and insure I stay focused on the right stuff in the year ahead.&lt;/p&gt;
&lt;p&gt;Having struggled with the pressures of a goal setting approach in previous years, I was drawn to this method after reading &lt;a href=&#34;https://jamesclear.com/atomic-habits&#34;&gt;James Clear’s Atomic Habits&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The format of my Year in Review is almost the same as James’. Nothing new, but new for me. I hope it will help refine my processes and set myself up for a productive year ahead.&lt;/p&gt;
&lt;p&gt;My Year in Review will answer the following three questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What went well this year?&lt;/li&gt;
&lt;li&gt;What didn’t go so well this year?&lt;/li&gt;
&lt;li&gt;What did I learn?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My review will also include my intentions for 2019 and the areas I wish to focus on, which I plan to use as a guide in the year to come.&lt;/p&gt;
&lt;h2 id=&#34;1-what-went-well-this-year&#34;&gt;1. What went well this year?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Writing.&lt;/strong&gt; I managed to write 13 articles across &lt;a href=&#34;https://azharkhan.in/&#34;&gt;harrycresswell.com&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@harrycresswell&#34;&gt;Medium&lt;/a&gt;, and record notes on most of what I’ve learnt from courses (some of which I’ve published). My weekly Newsletter has been one of my most consistent projects this year, with the audience growing steadily and the content starting to show a clear direction. If I can continue on this path in 2019 I’ll be very happy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In Detail.&lt;/strong&gt; Perhaps the most successful project I work on, undoubtably down to the incredible mix of people involved. We all bring a different skill set and continue to use it as a vehicle to learn, experiment and collaborate. 2019 is set to be another good year for &lt;a href=&#34;https://indtl.com/&#34;&gt;In Detail&lt;/a&gt; with more energy focused on creating useful content for our readers, providing a service and doing what we can to make the jewellery industry more sustainable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaScript.&lt;/strong&gt; I finally got my act together and began to learn programming. Having made several attempts in the past I found taking some time out to focus on one thing, along with &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Gordon Zhu’s Practical JavaScript course&lt;/a&gt; to be the key.&lt;/p&gt;
&lt;p&gt;I’m starting to see how the value gained in understanding a logical language like JavaScript can transcend and make improvements in other areas of my life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yoga and running.&lt;/strong&gt; Although I didn’t track my yoga sessions this year, they were consistent. I think the fear of back pain drives my practice, as I’m all too aware how bad health makes everything else impossible. I’ve found a pattern of practicing yoga and running on alternate days to work best for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Travel.&lt;/strong&gt; In 2018 I spent time in 7 different countries: England, Germany, United States, Portugal, Luxembourg, France and Austria. Luxembourg being the only new addition to the list.&lt;/p&gt;
&lt;p&gt;Notable places I enjoyed spending time this year were Lisbon for its food, people and good weather, Strasbourg for its architecture and amazing clash of cultures and New York for its relentless energy.&lt;/p&gt;
&lt;p&gt;I continued to spend much of my time in Hamburg which I now consider my home for part of the year.&lt;/p&gt;
&lt;h3 id=&#34;year-in-numbers&#34;&gt;Year in Numbers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Published Articles: 13&lt;/li&gt;
&lt;li&gt;Published Notes: 10&lt;/li&gt;
&lt;li&gt;Sent Newsletters: 40&lt;/li&gt;
&lt;li&gt;Runs: 52 (147.2 Miles)&lt;/li&gt;
&lt;li&gt;Books Read: 12&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-what-didnt-go-so-well-this-year&#34;&gt;2. What didn’t go so well this year?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Loss of family.&lt;/strong&gt; In January I lost my Grandpa to Dementia. Although his final years were difficult, he had a long and happy life. I always admired his positive outlook on the world and fantastic ability to ignore what’s not important. I must remember him for how he was when I was growing up and try and forget those final years. I will miss him greatly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Meditation and Climbing.&lt;/strong&gt; I’ve put these two together as they share one thing in common – I failed miserably at both. In 2017 these two disciplines where a real lifeline for me. Climbing helped me with problem solving and taught me how to be more methodical with my approach to every day challenges. For building physical strength it’s one of the best practices I’ve found.&lt;/p&gt;
&lt;p&gt;Meditation, meanwhile, helped me with my composure, stress and focus. For one reason or another both fell by the wayside in 2018. I’d like to get back into a regular habit and disapline of practicing both next year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Type Services.&lt;/strong&gt; After a successful end to 2017 – where I released my first 3 typefaces in as many months – in 2018 I failed to release a single font. I must remind myself that good things take time, and whilst I have been slowing working away on a couple of new typefaces, I haven’t dedicated nearly enough time to the project. In 2019 I’m planning to change that and hope to deliver products more consistently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Car Accident.&lt;/strong&gt; Following 3 solid weeks of work converting our van to a camper, a car slammed into the back of us on the autobahn. It was our first day in a 2.5 month journey around Europe.&lt;/p&gt;
&lt;p&gt;Mentally this was a huge challenge, having rented out our apartments and facing life without a home whilst we waited for our van to be fixed. But looking back we’re fortunate we survived the crash. And the experience certainly helped us to face challenges head on and grow in ourselves. I’m glad to report the van is now back on the road.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning German.&lt;/strong&gt; I had a positive start to the year, beginning A1.2 German at Deutsch Akademie in Hamburg. Sadly I failed to keep this up throughout the year, although my German girlfriend assures me my conversational German is improving – albeit slowly. 2019 Los geht’s!&lt;/p&gt;
&lt;h2 id=&#34;3-what-did-i-learn&#34;&gt;3. What did I learn?&lt;/h2&gt;
&lt;p&gt;I learned a lot in 2018. Here are some of the most important takeaways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The best way to learn something new is to do a bit each day.&lt;/strong&gt; Before now I had ‘Learn JavaScript‘ somewhere on my todo list. It wasn’t until I stuck with Gordon Zhu’s Practical JavaScript course that I realised how ridiculous this must sound.&lt;/p&gt;
&lt;p&gt;JavaScript is hard. Like any language it’s something you need to work at, on a daily  basis if possible. To make this happen I took 2 solid months off work towards the end of this year and worked on my JavaScript every day, following Gordon‘s course almost exclusively. I’ve by no means got the language in its entirety, but it’s starting to click.&lt;/p&gt;
&lt;p&gt;For this reason my biggest achievement this year may have been ‘learning how to learn‘ – by sticking with it and showing up regularly. I realise this approach applies to any practice in life or anything you wish to improve at.&lt;/p&gt;
&lt;p&gt;In my case with JavaScript, rather than saying “Learn JavaScript” it might be be more useful to say “Practice your JavaScript each day” or “Spend 10 minutes a day building something with JavaScript”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s important to step away from what you know and do something completely different.&lt;/strong&gt; In September I took 3 weeks off work and converted a 2013 VW Transporter panel van into a camper, together with my girlfriend.&lt;/p&gt;
&lt;p&gt;It’s been over 10 years since I last worked with wood and the first time I’ve ever modified a vehicle or worked with electrics. There’s something incredibly cleansing about working with your hands. It was a welcome break from my usual day-to-day in front of a computer.&lt;/p&gt;
&lt;p&gt;The process taught me the importance of stepping away from a screen and applying myself to new problems, in different ways to those I’m used to. It also taught me the importance of action. No matter how much research you put in before hand, there’s something to be said for just getting started. Every situation will present its own set of problems which often are impossible to predict.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to deal with setbacks and a change of plans.&lt;/strong&gt; Life doesn’t always run smoothly. It often happens the way you least expect it. And you’ll sometimes find yourself living outside of your own control and well beyond the scope of your plans. This year this manifested itself in the form of the car crash I mentioned earlier.&lt;/p&gt;
&lt;p&gt;So what important lessons did I take from this? Setbacks are unavoidable. Plans will inevitably change, it’s how you react that’s most important. Even if you try to, it’s wasted energy trying to control everything. A better way is to focus on how you respond to the situation you find yourself in. If you can find the positives in a challenging situation, then you will thrive in life. No matter what the challenge, there are lessons to take away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Success is the result of compound investment.&lt;/strong&gt; Over the years I’ve started countless projects and failed to stick at them. The problem was, I struggled to realise that success takes time and regular input.&lt;/p&gt;
&lt;p&gt;Recently my good friend told me he was thinking about chucking in his music career to do something else, I said to him “It’s too late to stop now.” What I meant was; I could see how far he’s come with his sound and how much work he’s put in. It’s only a matter of time before all that time and effort pays off.&lt;/p&gt;
&lt;p&gt;This year I learnt the importance of seeing things through from start to finish and that success is the result of compound investment, not necessarily just some great idea or a moment of luck.&lt;/p&gt;
&lt;h3 id=&#34;top-recommendations-in-2018&#34;&gt;Top Recommendations in 2018&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Best Book:&lt;/strong&gt; Atomic Habits by James Clear&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best (free) Course:&lt;/strong&gt; Practical JavaScript by Gordon Zhu&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best article:&lt;/strong&gt; Using Sketch Libraries to build a better UI design system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best Documentary:&lt;/strong&gt; Free Solo by Elizabeth Chai Vasarhelyi and Jimmy Chin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;intentions-for-2019&#34;&gt;Intentions for 2019&lt;/h2&gt;
&lt;p&gt;Rather than goal setting for any fixed outcome – which I’ve had little success with in past years – I’m using an intentional approach which focuses more on how I carry myself through each day, how I practice and how I conduct myself during my commitments.&lt;/p&gt;
&lt;p&gt;I’m treating these as a set of principles which I can use to guide my process and apply to various aspects of my life and work. The idea is to make lots of small improvements that I hope will have a big impact in the long run.&lt;/p&gt;
&lt;p&gt;My guiding principles for 2019 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be consistent&lt;/li&gt;
&lt;li&gt;Slow down&lt;/li&gt;
&lt;li&gt;Focus on less&lt;/li&gt;
&lt;li&gt;Document what you learn&lt;/li&gt;
&lt;li&gt;Give back what you can&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Be Consistant.&lt;/strong&gt; Consistency is everything. For me being consistent means showing up regularly (ideally daily) to practice the things I do. This is the best way I know how to form good habits and improve any chance of success I might have.&lt;/p&gt;
&lt;p&gt;Doing a little bit each day to compound long term returns not only applies to financial investment but investments in your health, education, work, relationships and progress in life. This is an important concept I try to take with me into yoga  and meditation practice, running, learning JavaScript, German or whatever it may be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slow Down.&lt;/strong&gt; I find I’m the most productive in life when I slow down and take time to reflect on whatever it is I’ve been doing. I find myself picking up concepts faster when I take the time to fully understand what’s in front of me. I retain more when I take on less.&lt;/p&gt;
&lt;p&gt;In 2019 I want to continue this philosophy. Using various methods such as note taking, habit tracking and writing from memory, to recall the things I’m learning, be more methodical and slow down the fast pace of life. This is the best way I found to prevent myself from speeding through life on auto-pilot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus on less.&lt;/strong&gt; In 2019 I’m challenging myself to open fewer browser tabs, spend less time on social media, commit to fewer obligations and add less items to my todo list.&lt;/p&gt;
&lt;p&gt;Instead, I want to focus my energy on a select few projects that I see as having the most potential and designate specific time blocks in my day to lower value tasks, like reading articles online, opening emails, use social media, etc.&lt;/p&gt;
&lt;p&gt;My aim is to find a deeper approach to work and get more done each day by focusing on fewer things. Like most people I’m increasingly aware of how my online consumption is effecting my ability to concentrate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Document what you learn.&lt;/strong&gt; My intention is to do a better job of documenting processes, recording workouts and improving habit tracking.&lt;/p&gt;
&lt;p&gt;Having little success with the various apps out there to help you do this, I’ve adopted a manual process of entering my daily workouts in an Airtable base, using the calendar view to record my workout sessions. I also make it a priority to document things I’m learning which I feel are important.&lt;/p&gt;
&lt;p&gt;I hope this will help me form daily habits and meeting my goal of becoming more consistent in the things I do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Giving back what you can.&lt;/strong&gt; In a world full of mindless consumption and little care for the environment, I feel it’s more important than ever to create and share great work that educates, to give back and strive for positive change in the world. Positive contribution has become the centre of everything I want to achieve.&lt;/p&gt;
&lt;p&gt;A question I’ll be asking myself regularly this year is; ”Am I having a positive impact on the people around me and the world we live in?”&lt;/p&gt;
&lt;p&gt;In 2019 my aim is to be more mindful about my consumption, continue with donations to &lt;a href=&#34;https://onetreeplanted.org/&#34;&gt;onetreeplanted.org&lt;/a&gt; and seek out new ways to support positive change in any way I can.&lt;/p&gt;
&lt;h2 id=&#34;areas-of-focus-for-2019&#34;&gt;Areas of Focus for 2019&lt;/h2&gt;
&lt;p&gt;With my intentions set, I want to briefly outline the key areas I wish to apply my focus, whilst keeping these intentions in mind.&lt;/p&gt;
&lt;p&gt;In previous years I’d make a list of specific things I want to achieve each quarter, though often by the 4th quarter I’d find myself with much of my list remaining. So this year I want to avoid that kind of pressure.&lt;/p&gt;
&lt;p&gt;Specific areas I wish to focus on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Health:&lt;/strong&gt; Resume a regular climbing and meditation practice. Continue running and practicing yoga on alternate days of the week.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing:&lt;/strong&gt; Publish at least 15 well researched articles. Stick with my weekly newsletters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learning:&lt;/strong&gt; My primary focus is on JavaScript programming and pursuing my interest in JAMStack technology.  From a personal stand point I’d also like to continue improving my conversational German.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Design/Development:&lt;/strong&gt; Move In Detail forward. Build more in ReactJS and with Gatsby. Get more creative with my type design.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Travel:&lt;/strong&gt; I had a good year for travel in 2018 so I’d like to continue this and try and make it to at least 4 different countries. Travel is the best way I know to keep a broad and open mindset.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;final-words&#34;&gt;Final words&lt;/h2&gt;
&lt;p&gt;Thanks for reading my first Year in Review. I hope you’ve found this helpful in some capacity. It’s been a great chance to be more mindful and reflect on this past year whilst creating a plan for an intentional year ahead.&lt;/p&gt;
&lt;p&gt;If you’re not yet writing your own Year in Review, perhaps after reading this one you might consider writing one.&lt;/p&gt;
&lt;p&gt;If you have any questions or comments you can reach me on &lt;a href=&#34;https://twitter.com/harrycresswell&#34;&gt;twitter&lt;/a&gt;, I’d be happy to hear from you. Likewise, please consider sharing this with anyone you feel might find it useful.&lt;/p&gt;
&lt;p&gt;All the best for 2019. Here’s to a productive and prosperous new year.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>A Year in Review</title>
        <link>https://azharkhan.in/articles/year-in-review/</link>
        <pubDate>Sun, 30 Dec 2018 12:25:59 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/year-in-review/</guid>
        <description>&lt;p&gt;Whilst writing my &lt;a href=&#34;https://harrycresswell.com/tags/year-in-review/&#34;&gt;year in review&lt;/a&gt; this year it seemed like a good idea and perhaps a useful exercise to outline exactly what this means to me – why I write one and the approach I use to write it. I hope this may in some way be helpful for you too.&lt;/p&gt;
&lt;p&gt;This is very much my own take to what has become an annual practice for many and I follow a format that has, so far, worked well for me. Here’s everything I can tell you about it.&lt;/p&gt;
&lt;h2 id=&#34;why-i-write-a-review-of-my-year&#34;&gt;Why I write a review of my year&lt;/h2&gt;
&lt;p&gt;I was drawn to the idea of writing an annual review after reading Atomic Habits by James Clear, in which he proposes that habits are the compound interest of self-improvement, and that success is the product of good daily habits. In other words, the effects of your habits multiple as you repeat them.&lt;/p&gt;
&lt;p&gt;James writes the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Improvement is not just about learning new habits, it’s also about fine-tuning them. Reflection and review ensures that you spend your time on the right things and make course corrections whenever necessary.“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You might boil this down to the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build good daily habits&lt;/li&gt;
&lt;li&gt;Reflect to identify what’s working and what isn’t&lt;/li&gt;
&lt;li&gt;Fine-tune, re-focus, drop ineffective habits where necessary&lt;/li&gt;
&lt;li&gt;Improve and become the person you wish to be&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With reflection we get a better sense of perspective, we become more self-aware and identify areas in need of improvement. It helps you reframe your identity and become better at whatever it is you choose to do.&lt;/p&gt;
&lt;h2 id=&#34;how-i-write-a-review-of-my-year&#34;&gt;How I write a review of my year&lt;/h2&gt;
&lt;p&gt;I use the same format as James for my own review, it’s simple and works well, so I see no reason to change it. By review my progress, I aim to answer the following three questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What went well this year?&lt;/li&gt;
&lt;li&gt;What didn’t go so well this year?&lt;/li&gt;
&lt;li&gt;What did I learn this year?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;James has his own reasons for asking these three questions, which I encourage you to explore further, however I’d like to outline what these questions mean to me.&lt;/p&gt;
&lt;p&gt;By asking “what went well this year” I ensure the year ends on a positive note.&lt;/p&gt;
&lt;p&gt;It’s so easy to focus on the bad stuff and forget the good things that have happened throughout the year. This question realigns those negative thoughts, encourages a positive mindset and confirms a successful year.&lt;/p&gt;
&lt;p&gt;By asking “What didn’t go so well this year?“ I hope to identify the areas I need to improve, so I can begin the year ahead with clear purpose and intention.&lt;/p&gt;
&lt;p&gt;As Shane Parish writes in &lt;a href=&#34;https://fs.blog/tgmm/&#34;&gt;The Great Mental Models&lt;/a&gt;;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You can’t improve if you don’t know what you‘re doing wrong. Admitting to your failures is the hardest part. But by doing so we can learn from them and avoid making them again.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, by asking “What did I learn this year?” I remind myself that I’m making progress and heading in the right direction.&lt;/p&gt;
&lt;p&gt;It’s easy to fall into the trap of thinking you haven’t achieved much or that you haven’t made progress. The answers to this question help prevent these insecurities from manifesting and help give you a much needed boost for the year ahead.&lt;/p&gt;
&lt;h2 id=&#34;final-words&#34;&gt;Final words&lt;/h2&gt;
&lt;p&gt;Whatever you choose to call it, taking the time to reflect on your achievements by writing a year in review is a helpful exercise. It’s an exercise that will help you learn more about yourself and identify areas in need of improvement.&lt;/p&gt;
&lt;p&gt;Reflection can bring a sense of perspective and writing a review each year can help you identify whether you are becoming the person you wish to be.&lt;/p&gt;
&lt;p&gt;For more on this check out my &lt;a href=&#34;https://harrycresswell.com/tags/year-in-review/&#34;&gt;year in review archive&lt;/a&gt; and pick up a copy of &lt;a href=&#34;https://www.goodreads.com/book/show/40121378-atomic-habits&#34;&gt;Atomic Habits&lt;/a&gt; if you haven’t read it already. It’s an important book full of actionable advice.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Hugo SEO: Unique, Accurate Page Titles</title>
        <link>https://azharkhan.in/articles/hugo-seo-accurate-page-titles/</link>
        <pubDate>Fri, 02 Nov 2018 10:32:26 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-seo-accurate-page-titles/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;According to &lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=en#uniquepagetitles&#34;&gt;Google’s SEO starter guide&lt;/a&gt;, “Each page on your site should ideally have a unique title, which helps Google know how the page is distinct from the others on your site.”&lt;/p&gt;
&lt;p&gt;At all costs avoid default, vague titles which have no relation to the content on the page and never use a single title across all pages on your site.&lt;/p&gt;
&lt;p&gt;This piece is for those building sites with Hugo. It introduces a common mistake, often seen in &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo starter themes&lt;/a&gt; – where the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag renders generic page titles – and offers a simple concise solution to get your pages into Google’s good books and ranking properly.&lt;/p&gt;
&lt;h2 id=&#34;the-big-mistake-with-page-titles&#34;&gt;The big mistake with page titles&lt;/h2&gt;
&lt;p&gt;When building a theme for your new Hugo site, you might be tempted to dig through the &lt;code&gt;_default&lt;/code&gt; templates of a Hugo starter theme for some tips on where to begin.&lt;/p&gt;
&lt;p&gt;No bad thing, it’s a great way to learn, but approach this method with caution, starter themes can also contain bad practices.&lt;/p&gt;
&lt;p&gt;In many cases, a quick look inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; will often reveal the following seemly simple but potentially harmful code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ $.Site.Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here?&lt;/p&gt;
&lt;p&gt;Here we’re taking the title of our site directly from our &lt;code&gt;config.toml&lt;/code&gt; file and applying it to each and every page on our site. That means every page on our site now has the same name.&lt;/p&gt;
&lt;p&gt;In terms of SEO this is bad news, as we now know.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-elegant-solution&#34;&gt;A simple elegant solution&lt;/h2&gt;
&lt;p&gt;A better solution would be to use the conditional &lt;code&gt;if&lt;/code&gt; statement and reach for the title set in the front matter of each page when possible. We can make this happen with something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .IsHome -}}
  &amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt;
{{- else -}}
  &amp;lt;title&amp;gt;{{ .Title }} – {{ .Site.Title }}&amp;lt;/title&amp;gt;
{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference here is that &lt;code&gt;{{ .Site.Title }}&lt;/code&gt; is only used if the current page is the homepage.&lt;/p&gt;
&lt;p&gt;For every other page, we use the page title specified in the page front matter, which should almost always be unique and therefore good for SEO.&lt;/p&gt;
&lt;p&gt;For an alternative solution try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ if .Page.Title }}{{ .Page.Title }} - {{ end }}{{ .Site.Title }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should be fairly self explanatory and produces the same results, in an arguably cleaner single line of code.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;For an added SEO boost, try applying the same thinking to your page descriptions. According to Google, “A page&amp;rsquo;s description meta tag gives Google and other search engines a summary of what the page is about. Description meta tags are important because Google might use them as snippets for your pages”.&lt;/p&gt;
&lt;p&gt;The simple solution would be to define the description in the front matter of each page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hugo SEO: Unique, Accurate page titles&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Get an SEO boost on your website pages with descriptive page titles which make search engines happy&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Harry Cresswell&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then call the &lt;code&gt;Parmeter&lt;/code&gt; in a meta tag in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ $.Param &amp;quot;description&amp;quot; }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using some simple logic we can take this further still, &lt;a href=&#34;https://github.com/harrycresswell/harry/blob/master/site/layouts/partials/head.html&#34;&gt;head over to github&lt;/a&gt; if you’re interested in finding out how this works.&lt;/p&gt;
&lt;p&gt;There you have it. A couple of simple fixes to optimise your web pages and improve your chances of ranking higher in search engines.&lt;/p&gt;
&lt;p&gt;I hope this has been a helpful read.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=en#uniquepagetitles&#34;&gt;Create unique, accurate page titles&lt;/a&gt; from Google’s SEO Starter Guide&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.el-chavez.me/2015/11/26/go-hugo-seo/&#34;&gt;Go Hugo SEO&lt;/a&gt; from MT Chavez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rankbio.com&#34;&gt;Rank Bio&lt;/a&gt; - test your websites for best practices&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Static search with Algolia and Hugo 2</title>
        <link>https://azharkhan.in/articles/hugo-algolia-2/</link>
        <pubDate>Fri, 27 Jul 2018 09:24:22 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-algolia-2/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    This is Part 2 in a short series on getting started with Algolia search on a site built with Hugo, the static site generator.
&lt;/p&gt;

&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In &lt;a href=&#34;https://harrycresswell.com/articles/hugo-algolia/&#34;&gt;Part 1&lt;/a&gt; we configured Algolia’s search API to index content from a Hugo site and provide instantaneous search results, whenever a search takes place.&lt;/p&gt;
&lt;p&gt;In this part we’ll implement &lt;a href=&#34;https://community.algolia.com/instantsearch.js/&#34;&gt;Algolia Instantsearch.js&lt;/a&gt;, a framework of prepackaged widgets which will help us design the perfect search experience.&lt;/p&gt;
&lt;p&gt;By the end of the article visitors to our site will be able to interface with the search, searching and filtering content at near instantaneous speeds.&lt;/p&gt;
&lt;h2 id=&#34;what-weve-done-so-far&#34;&gt;What we’ve done so far&lt;/h2&gt;
&lt;p&gt;So far we configured Hugo to generate a JSON index of our content and update the index in Algolia every time we add a new post to our site. We then used a Serverless Webtask function to update the content on our site.&lt;/p&gt;
&lt;p&gt;A lot to chew, but if you’re still with me then now’s the time to add the actual interface to our website, so visitors can search our posts.&lt;/p&gt;
&lt;p&gt;So how do we make this good stuff happen?&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install Algolia InstantSearch JavaScript library&lt;/li&gt;
&lt;li&gt;Display content from our JSON index (Hits in Algolia talk)&lt;/li&gt;
&lt;li&gt;Add a search bar to allow for searches&lt;/li&gt;
&lt;li&gt;Set up post filtering by tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that, let’s get right to it.&lt;/p&gt;
&lt;h2 id=&#34;step-1-installing-instantsearchjs&#34;&gt;Step 1: Installing InstantSearch.js&lt;/h2&gt;
&lt;p&gt;In the head of your Hugo site add the Algolia stylesheet and default theme:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/instantsearch.js@2.8.1/dist/instantsearch.min.css&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/instantsearch.js@2.8.1/dist/instantsearch-theme-algolia.min.css&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will deliver the necessary styles from the &lt;a href=&#34;https://www.jsdelivr.com/&#34;&gt;jsDeliver&lt;/a&gt; CDN.&lt;/p&gt;
&lt;p&gt;Next, add the following JS before the closing body tag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/instantsearch.js@2.8.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great, now we have access to the &lt;code&gt;instantsearch&lt;/code&gt; function&lt;/p&gt;
&lt;h2 id=&#34;initialization&#34;&gt;Initialization&lt;/h2&gt;
&lt;p&gt;To initialize InstantSearch.js, you need an Algolia account with a configured and non-empty index.&lt;/p&gt;
&lt;p&gt;Get hold of your &lt;code&gt;appID&lt;/code&gt;, Search-Only &lt;code&gt;APIkey&lt;/code&gt; and &lt;code&gt;indexName&lt;/code&gt;. You can find these in your Algolia dashboard.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;app.js&lt;/code&gt; or wherever you store your pre compiled Javascript add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Set Algolia options
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;appId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_APP_ID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;apiKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;indexName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_INDEX_NAME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;hitsPerPage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;routing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Parse options to instantsearch
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instantsearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Making sure you replace all instances of &lt;code&gt;YOUR_...&lt;/code&gt; as you go.&lt;/p&gt;
&lt;p&gt;Awesome! Your Hugo site is now connected to Algolia.&lt;/p&gt;
&lt;h2 id=&#34;step-2-display-index-hits-search-results&#34;&gt;Step 2: Display index hits (Search results)&lt;/h2&gt;
&lt;p&gt;Now we need to display our search results and bring this beast to life. Using the hit widget we can display all the results returned by Algolia.&lt;/p&gt;
&lt;p&gt;Creating a container with an id &lt;code&gt;hits&lt;/code&gt; will tell Algolia where to display your hits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Hits widget will appear here --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my site I put this in my &lt;code&gt;list.html&lt;/code&gt; template inside &lt;code&gt;layouts/_default/&lt;/code&gt; but yours might be different, depending on your theme structure.&lt;/p&gt;
&lt;p&gt;Now you’ll need to add your hits widget to your instantsearch instance, using &lt;code&gt;addWidget&lt;/code&gt;. So open up your JS file and add:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// initialize hits widget
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addWidget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;instantsearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// define container
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#hits&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// add classes for styling
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;cssClasses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search-hits&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search-hits--empty&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;templates&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// call custom hit template
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hitTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Didn’t find any results for the search  &amp;lt;em&amp;gt;&amp;#34;{{query}}&amp;#34;&amp;lt;/em&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice I’ve specified the variable &lt;code&gt;hitTemplate&lt;/code&gt; for my template item. Setting up this will allow me to parse a &lt;a href=&#34;https://community.algolia.com/instantsearch.js/v1/documentation/&#34;&gt;Mustache&lt;/a&gt; template string and some HTML to customise the view of the hit. Let’s create that variable now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// create variable for custom hit template
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hitTemplate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;a href=&amp;#34;{{ permalink }}&amp;#34; class=&amp;#34;List-item&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;div class=&amp;#34;List-image&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;img src=&amp;#34;https://res.cloudinary.com/harrycresswell/image/upload/w_auto,dpr_auto,c_scale/{{{featuredimage}}}&amp;#34; /&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;/div&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;div class=&amp;#34;List-title&amp;#34;&amp;gt;{{{_highlightResult.title.value}}}&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;/a&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;div class=&amp;#34;List-summary&amp;#34;&amp;gt;{{{summary}}}&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A few things to notice here; values pulled from the Algolia index should be wrapped in 3 curly braces, this prevents conflicts with Hugo templating, as seen in &lt;code&gt;permalink&lt;/code&gt; which is wrapped in 2 braces.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;_highlightResult&lt;/code&gt; attribute will, by default, add &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tags to your search results to give feedback on any matching results.&lt;/p&gt;
&lt;p&gt;My particular template pulls in a featured image, which I specified in the post front matter. You’ll notice I’m using &lt;a href=&#34;https://cloudinary.com/&#34;&gt;Cloudinary&lt;/a&gt; to host my images. By abstracting images away from the repo, build times remain super fast, as now there are no images to process. I’ve added options in the URL for retina and responsive sizing. I cover a lot of these features in &lt;a href=&#34;articles/cloudinary/&#34;&gt;resposives images with Cloudinary&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-3-configure-hits-in-algolia&#34;&gt;Step 3: Configure hits in Algolia&lt;/h2&gt;
&lt;p&gt;For this part you need to head back to your Algolia Dashboard to set searchable Attributes:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Indices &amp;gt; Ranking &amp;gt; Searchable Attributes &amp;gt; Add a Searchable Attribute&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This will tell Algolia what you want it to pick up in search results. In my case I kept it simple and stuck with &lt;code&gt;title&lt;/code&gt; by choosing it from the dropdown list.&lt;/p&gt;
&lt;p&gt;Great, title searches should now be configured.&lt;/p&gt;
&lt;h2 id=&#34;step-4-add-a-search-bar-and-algolia-logo&#34;&gt;Step 4: Add a Search bar (..and Algolia logo)&lt;/h2&gt;
&lt;p&gt;In order to querying our index we’re going to need a search bar. To do this add the Searchbox widget to your template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;search-box&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- SearchBox widget will appear here --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Back in your &lt;code&gt;app.js&lt;/code&gt; file, add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Parse options to instantsearch
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instantsearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// initialize SearchBox
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addWidget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;instantsearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#search-box&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search for post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;cssClasses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search-box-container&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search-box-input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// make all this stuff happen
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can search our index and see what matches our query.&lt;/p&gt;
&lt;h2 id=&#34;step-5-add-a-refinement-list-filtering-by-tag&#34;&gt;Step 5: Add a refinement list (filtering by Tag)&lt;/h2&gt;
&lt;p&gt;Finally, you might want to provide filters based on the structure of your content. We can do this by adding the refinement list widget and configuring it to work with our tags in Hugo. Let’s start by setting up Hugo so we can assign tags to our posts.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-tags-in-hugo&#34;&gt;Setting up tags in Hugo&lt;/h3&gt;
&lt;p&gt;If you have been following from &lt;a href=&#34;articles/hugo-algolia/&#34;&gt;Part 1&lt;/a&gt;, inside your &lt;code&gt;config.toml&lt;/code&gt; file you should have the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;params.algolia&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;vars&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;publishdate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;expirydate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;permalink&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;params&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;categories&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s important we have &lt;code&gt;tags&lt;/code&gt; set in the Algolia Params.&lt;/p&gt;
&lt;p&gt;Then within your post front matter, add the following to a few of your posts to make sure everything is set up correctly when you re-index your site:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- your_first_tag&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- your_second_tag&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;re-indexing-search-and-configuring-algolia&#34;&gt;Re-indexing search and configuring Algolia&lt;/h2&gt;
&lt;p&gt;Now, from the terminal run &lt;code&gt;npm run build&lt;/code&gt; to rebuild your site, then deploy your site how you normally would.&lt;/p&gt;
&lt;p&gt;This will trigger your search index to be updated.&lt;/p&gt;
&lt;p&gt;Next head to &lt;em&gt;Indices &amp;gt; Browse &amp;gt; Preview&lt;/em&gt; in your Algolia Dashboard and providing all went well you should see your new tags listed in your JSON search index.&lt;/p&gt;
&lt;p&gt;At this point we need to tell Algolia to filter our tags when we set up our refinement list widget in the next step. To do this head to:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Indices &amp;gt; Display &amp;gt; Faceting &amp;gt; Attributes for faceting&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hit &lt;em&gt;Add an Attribute&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You should see &lt;code&gt;tags&lt;/code&gt; appear in the dropdown list. Make sure you select them and you’re good to go.&lt;/p&gt;
&lt;h3 id=&#34;adding-the-refinement-list-widget&#34;&gt;Adding the refinement list widget&lt;/h3&gt;
&lt;p&gt;The final thing to do is add a refinement list widget so we can filter our results on the font end.&lt;/p&gt;
&lt;p&gt;Similar to before, add a container with an &lt;code&gt;id=&amp;quot;refinement-list&amp;quot;&lt;/code&gt; to your chosen template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;refinement-list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- RefinementList widget will appear here --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is where your refinement list will appear.&lt;/p&gt;
&lt;p&gt;Just above &lt;code&gt;search.start();&lt;/code&gt; in your &lt;code&gt;app.js&lt;/code&gt; file, add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// initialize RefinementList
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addWidget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;instantsearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;widgets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;refinementList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#refinement-list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;attributeName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your tags should now appear on your site and filter your index.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;This is as far as I’m going with this one but you could now add pagination to your index and a filter reset which clears your search. Check out the &lt;a href=&#34;https://community.algolia.com/instantsearch.js/v2/getting-started.html&#34;&gt;getting started&lt;/a&gt; article for more on this.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Great job. You should now have an InstantSearch results page working with your blog posts on a Hugo static site.&lt;/p&gt;
&lt;p&gt;Of course you can use InstantSearch with any static site generator, or on any webpage, it doesn’t have to be Hugo. There’s a ton of great resources and tutorials to help you get going on the &lt;a href=&#34;https://community.algolia.com/&#34;&gt;Algolia Community&lt;/a&gt; page .&lt;/p&gt;
&lt;p&gt;A great place to begin is the &lt;a href=&#34;https://community.algolia.com/instantsearch.js/v2/getting-started.html&#34;&gt;Getting Started with InstantSearch.js&lt;/a&gt; tutorial. I’ll also list some resources I found helpful below.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.algolia.com/instantsearch.js/v2/getting-started.html&#34;&gt;Getting Started with InstantSearch.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.algolia.com/instantsearch.js/v1/documentation/&#34;&gt;Instant Search v1 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=16502918&#34;&gt;Thread on Hacker News&lt;/a&gt; which gave me reason to write this article.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/regisphilibert/benmerde/blob/search/themes/benmerde/src/js/main.js&#34;&gt;Regis Philibert’s Github repo&lt;/a&gt; helped me get my head around &lt;code&gt;hitTemplate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Responsive images with Cloudinary</title>
        <link>https://azharkhan.in/articles/cloudinary/</link>
        <pubDate>Mon, 23 Jul 2018 10:18:59 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/cloudinary/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Responsive images are crucial part of improving website performance. But that doesn’t just mean globally setting images to 100% width, height ‘auto’, then calling it a day.
&lt;/p&gt;

&lt;p&gt;Ideally we want to create multiple versions of each image, sending users the version which best suits their viewing context. If, for example, visitors are using 3G on a mobile device, then we should serve the appropriately scaled images, for the best possible experience.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudinary.com/&#34;&gt;Cloudinary&lt;/a&gt;, a cloud based image solution makes this laborious task somewhat simple, by automatically adapting images for delivery in any context.&lt;/p&gt;
&lt;p&gt;The article presents a problem Cloudinary helps solve, then provides a quickstart guide to help you get set up. This is particularly suited to those working with static or serverless sites, where hosting images directly within a repository can lead to issues down the line.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;When building static sites, in the past I’ve used the &lt;a href=&#34;https://www.npmjs.com/package/gulp-responsive&#34;&gt;gulp-responsive&lt;/a&gt; Gulp task to find the original image in the &lt;code&gt;src&lt;/code&gt; folder and auto generate multiple sizes at build time. Perhaps this sounds familiar?&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;srcset&lt;/code&gt; and a Hugo &lt;a href=&#34;https://github.com/harrycresswell/harry/blob/master/site/layouts/shortcodes/img.html&#34;&gt;shortcode&lt;/a&gt;, I can serve up the different sizes when required.&lt;/p&gt;
&lt;p&gt;Flawless workflow, until deployment. Now I’m committing multiple images for every image on my site to my repository. For sites with lots of images this doesn’t really work out. Build times take forever. You get the picture.&lt;/p&gt;
&lt;p&gt;The solution to all this is fairly simple, abstract images assets away from your repo and let a service like Cloudinary take care of your media storage.&lt;/p&gt;
&lt;h2 id=&#34;introducing-cloudinary&#34;&gt;Introducing Cloudinary&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Cloudinary simplifies responsive images by dynamically adapting image properties — dimensions, crop, format, quality — on-the-fly and delivering the optimal version based on the content and viewing context.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By adding transformations – custom parameters set in the URL which we’ll look at later – you can customise your image in any number of ways. Think automatic photoshopping in the cloud.&lt;/p&gt;
&lt;p&gt;Using a CDN, Cloudinary delivers media faster based on your visitors location, and now images are out of the repo, build times are back to optimum speeds. Portable also makes total sense. No more syncing your media library when you change environment or make changes down the line.&lt;/p&gt;
&lt;p&gt;The next part will look at getting Cloudinary set up to auto generate responsive images.&lt;/p&gt;
&lt;h2 id=&#34;getting-started-with-cloudinary-js-setup&#34;&gt;Getting started with Cloudinary: JS setup&lt;/h2&gt;
&lt;p&gt;There are a few ways to set up Cloudinary but the Javascript option is perhaps the most straight forward.&lt;/p&gt;
&lt;h3 id=&#34;step-1-create-an-account-with-cloudinary&#34;&gt;Step 1: Create an account with Cloudinary&lt;/h3&gt;
&lt;p&gt;First, &lt;a href=&#34;https://cloudinary.com/users/register/free&#34;&gt;Create an Account&lt;/a&gt; at Cloudinary.com, then upload a single high-resolution version of any image. Cloudinary with auto generate responsive sizes for you. Pretty cool.&lt;/p&gt;
&lt;h3 id=&#34;step-2-include-cloudinary-in-your-project&#34;&gt;Step 2: Include Cloudinary in your project&lt;/h3&gt;
&lt;p&gt;Add Cloudinary to your project by including &lt;code&gt;cloudinary-core-shrinkwrap.js&lt;/code&gt; in the footer of your page, right before the closing &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/cloudinary-core/2.3.0/cloudinary-core-shrinkwrap.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-include-images-with-data-src&#34;&gt;Step 3: Include images with data-src&lt;/h3&gt;
&lt;p&gt;Head to your Media Library in Cloudinary and hover over your image thumbnail to reveal the link icon. Click the icon to copy the URL.&lt;/p&gt;
&lt;p&gt;Now we have the URL for an image we can add it to an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag in our HTML using &lt;code&gt;data-src&lt;/code&gt;. It’s important you use the &lt;code&gt;data-src&lt;/code&gt; attribute and not &lt;code&gt;src&lt;/code&gt; as Cloudinary will dynamically create the &lt;code&gt;src&lt;/code&gt; images using JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;data-src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://res.cloudinary.com/harrycresswell/image/upload/naming-artboards-in-sketch-01.png&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cld-responsive&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to add the &lt;code&gt;cld-responsive&lt;/code&gt; class to our image, this will allow &lt;code&gt;cloudinary-core-shrinkwrap.js&lt;/code&gt; to find the image in our HTML and perform the necessary transformations, which we’ll get into a bit later. Remember you’ll need to do this for all images on your site hosted by Cloudinary.&lt;/p&gt;
&lt;p&gt;The final thing we need to do to get this working is to add the JavaScript call.&lt;/p&gt;
&lt;h3 id=&#34;step-4-adding-the-javascript-call&#34;&gt;Step 4: Adding the Javascript call&lt;/h3&gt;
&lt;p&gt;To initialise the Cloudinary instance, call the responsive method in your JavaScript file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cloudinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cloudinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cloud_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;YOUR_CLOUD_NAME&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;responsive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find your &lt;code&gt;YOUR_CLOUD_NAME&lt;/code&gt; in your Cloudinary Dashboard under Account Details.&lt;/p&gt;
&lt;p&gt;At this point you should now be seeing you Cloudinary hosted image. But right now Cloudinary is just devilering the image. We still need to set up some image transformations on the URL the make it responsive.&lt;/p&gt;
&lt;h2 id=&#34;step-5-responsive-image-transformations&#34;&gt;Step 5: Responsive image transformations&lt;/h2&gt;
&lt;p&gt;In the image URL, right after &lt;code&gt;upload/&lt;/code&gt;, include &lt;code&gt;w_auto,c_scale&lt;/code&gt; this will ensure basic responsive images. Now we have something like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;data-src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://res.cloudinary.com/harrycresswell/image/upload/w_auto,c_scale/naming-artboards-in-sketch-01.png&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cld-responsive&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here?&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://cloudinary.com/documentation/responsive_images#automatic_image_width&#34;&gt;w_auto&lt;/a&gt; transformation will deliver an image automatically scaled to a width that matches the width available in the responsive layout of your site.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudinary.com/documentation/image_transformation_reference#crop_parameter&#34;&gt;c_scale&lt;/a&gt; is the default crop transformation, which will change the size of the image exactly to the given width and height of its container.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;There are a number of ways you might want to improve this workflow, such as adding more image transformations, to find out what transformations would work best it’s worth analysis your current image performance.&lt;/p&gt;
&lt;h3 id=&#34;running-a-web-speed-test&#34;&gt;Running a Web Speed Test&lt;/h3&gt;
&lt;p&gt;Using Cloudinary’s &lt;a href=&#34;https://webspeedtest.cloudinary.com/&#34;&gt;Web Speed Test&lt;/a&gt; we can gather detailed optimisation insights on how changes to image size, format, quality and encoding parameters can improve performance.&lt;/p&gt;
&lt;p&gt;Chances are you could make improvements on your image compression. Cloudinary recommends 2 transformations for this.&lt;/p&gt;
&lt;h3 id=&#34;useful-transformations&#34;&gt;Useful transformations&lt;/h3&gt;
&lt;p&gt;Adding &lt;code&gt;q_auto&lt;/code&gt; to the string of transformations in your URL will handle automatic image &lt;a href=&#34;https://cloudinary.com/blog/the_holy_grail_of_image_optimization_or_balancing_visual_quality_and_file_size&#34;&gt;quality&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Including &lt;code&gt;f_auto&lt;/code&gt; will analyse the image content and select the best &lt;a href=&#34;https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_format&#34;&gt;format&lt;/a&gt; to deliver.&lt;/p&gt;
&lt;p&gt;For optimal image performance on &lt;a href=&#34;https://cloudinary.com/blog/how_to_automatically_adapt_website_images_to_retina_and_hidpi_devices&#34;&gt;retina&lt;/a&gt; displays use &lt;code&gt;dpr_auto&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;using-a-hugo-shortcode&#34;&gt;Using a Hugo Shortcode&lt;/h3&gt;
&lt;p&gt;If you built your site with Hugo, like this one, you’ll likely want to create a &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;Shortcode&lt;/a&gt; so you can easily add Cloudinary hosted images to any Markdown file.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;site/layouts/shortcodes&lt;/code&gt;, create a new file to store your shortcode. I named mine &lt;code&gt;cld.html&lt;/code&gt; (as in Cloudinary) as it’s nice and short and easy to remember. Inside the HTML file I added the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;img&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Site.Params.cloudinary_url }}/w_auto,dpr_auto,c_scale,f_auto,q_auto/{{ .Get &amp;#34;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; }}&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cld-responsive&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Get &amp;#34;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;caption&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;caption&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;caption&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside your &lt;code&gt;config.toml&lt;/code&gt; file, add the following line, remembering to updated &lt;code&gt;YOUR_CLOUD_NAME&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Set Cloudinary URL for image hosting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;cloudinary_url&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://res.cloudinary.com/YOUR_CLOUD_NAME/image/upload&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access your new Shortcode in any markdown file use the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hugo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Shortcode&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;markdown&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;files&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cld&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;naming-artboards-in-sketch-organised-albion-03.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;caption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your Caption&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;src&lt;/code&gt; is the last part of your image URL and caption is optional and takes a string of plain text for the image caption.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: In the example above I have spaces between the curly brackets to prevent Hugo from rendering the image. You will want to make sure yours are written without spaces&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;cloudinary-with-forestry-cms&#34;&gt;Cloudinary with Forestry CMS&lt;/h3&gt;
&lt;p&gt;If you’re building a site for a client, you’ve likely considered using a Git based CMS like &lt;a href=&#34;https://forestry.io/&#34;&gt;Forestry&lt;/a&gt;. Forestry is great for content editors who don’t want to mess around with code, instead prefering to use an interface in the browser.&lt;/p&gt;
&lt;p&gt;Unlike a traditional CMS where updates to content are near instantaneous, Forestry needs to re-build your site each time content changes. So for content editors to view their changes quickly, we need to ensure build times are as fast as possible. This is where Cloudinary comes in.&lt;/p&gt;
&lt;p&gt;Cloudinary mitigates the need to store media inside a Git repository – the primary cause of slow build times – by storing your media on their own servers. This makes Cloudinary a great option combined with a Forestry workflow.&lt;/p&gt;
&lt;p&gt;To get Cloudinary and Forestry playing well together you’ll need to change a few settings in your Forestry dashboard.&lt;/p&gt;
&lt;p&gt;Assuming you’ve imported your site to Forestry, you will need to update your website Media configuration which you can find inside Settings on the sidebar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Update your Media Storage Provider to Cloudinary&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add your Cloud Name, API key and API Secret.&lt;/strong&gt; You can find these details in your Cloudinary dashboard. Once you’ve added these you should see anything uploaded to cloudinary appear in the Media folder inside Forestry. Likewise when you upload new media via Forestry, it‘ll be hosted by Cloudinary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One final thing to note, if you find yourself setting up a Front Matter Template in Forestry, and use the ‘Image/File Upload’ field, you might need to override the public path for front matter fields, to get your images working. You can do this in the Advanced Media Settings under ‘Front Matter Path’. Depending on how you’ve set things up in your layout templates you might want to include any transformations in the URL you provide.&lt;/p&gt;
&lt;p&gt;For more on Forestry head over to the &lt;a href=&#34;https://forestry.io/docs/media/cloudinary/&#34;&gt;Forestry Docs&lt;/a&gt; for more on getting started.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Responsive images are imperative for both website performance and good user experience. But often the work which goes into making images responsive and not just adaptable or flexible is enough not to bother.&lt;/p&gt;
&lt;p&gt;Cloudinary tackles this pain point with a JavaScript method which provides automatic responsive images along with a simple solution to optimise and edit your images with URL transformations.&lt;/p&gt;
&lt;p&gt;For more on Cloudinary, head over to &lt;a href=&#34;https://cloudinary.com/documentation&#34;&gt;the docs&lt;/a&gt; to see what else is possible. Below you’ll find a list of resources referenced in the configuration above.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudinary.com/features/responsive_images&#34;&gt;Responsive images&lt;/a&gt; on Cloudinary&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forestry.io/blog/master-image-delivery-with-cloudinary/&#34;&gt;Mastering Image Delivery with Cloudinary&lt;/a&gt; by DJ Walker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forestry.io/docs/media/cloudinary/&#34;&gt;Cloud Media Storage with Cloudinary&lt;/a&gt;, Forestry Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudinary.com/blog/how_to_automatically_adapt_website_images_to_retina_and_hidpi_devices&#34;&gt;Automatically adapt website images to Retina and HiDPI devices&lt;/a&gt; by Nadav Soferman&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Working with Data in Hugo</title>
        <link>https://azharkhan.in/articles/data-hugo/</link>
        <pubDate>Wed, 18 Jul 2018 14:35:58 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/data-hugo/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    This articles demonstrates a practical use case of working with data files in Hugo. It will show you where to store your data and how to call your data into a template in order to render it on your site.
&lt;/p&gt;

&lt;p&gt;Whilst front-end prototyping the design of a &lt;a href=&#34;http://www.harrycresswell.co.uk/client/ain/ain-filters/&#34;&gt;system of content search filters&lt;/a&gt;, I found myself in a situation where I needed to list the major countries in each inhabited Continent. The countries would take the form of checkboxes in a filter dropdown.&lt;/p&gt;
&lt;p&gt;A basic solution might be to list each country manually in an unordered list on the page. But that sound like a time consuming task and unnecessarily repetitive. No one wants a cluttered template with a verbose amount of code.&lt;/p&gt;
&lt;p&gt;Ideally I could abstract the data away from the page and leave my template clean and concise. Instead, storing the data in a separate data file which I could call in my template wherever needed.&lt;/p&gt;
&lt;p&gt;Enter Data files.&lt;/p&gt;
&lt;h2 id=&#34;data-files-and-the-data-folder&#34;&gt;Data files and the data folder&lt;/h2&gt;
&lt;p&gt;In Hugo, &lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;data files&lt;/a&gt; are stored in the data folder. Think of the data folder as a mini database where you can keep lists of data to use in your pages.&lt;/p&gt;
&lt;p&gt;Inside the data folder you can organise files into any number of sub-folders.&lt;/p&gt;
&lt;p&gt;Hugo accepts &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt; and &lt;code&gt;TOML&lt;/code&gt; files, just like the front matter in your posts and pages.&lt;/p&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data structure&lt;/h3&gt;
&lt;p&gt;In my data folder I have a sub-folder called &lt;code&gt;countries&lt;/code&gt; and inside that folder I have a another folder called &lt;code&gt;continent&lt;/code&gt; where I keep 5 &lt;code&gt;YAML&lt;/code&gt; files: &lt;code&gt;africaa.yaml&lt;/code&gt;, &lt;code&gt;asia.yaml&lt;/code&gt;, &lt;code&gt;europe.yaml&lt;/code&gt;, &lt;code&gt;northamerica.yaml&lt;/code&gt; and &lt;code&gt;southamerica.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For all the geography nerds out there; I combined Australia with Asia as it didn’t make sense to have a data file containing one country.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;└── countries
    └── continent
        ├── africa.yaml
        ├── asia.yaml
        ├── europe.yaml
        └── northamerica.yaml
      	└── southamerica.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I called the top level sub-folder countries so the data type was clearly organised and easy to understand.&lt;/p&gt;
&lt;h3 id=&#34;inside-the-data-file&#34;&gt;Inside the data file&lt;/h3&gt;
&lt;p&gt;Inside each continent &lt;code&gt;YAML&lt;/code&gt; file, I listed the countries in that continent under &lt;code&gt;country&lt;/code&gt;, using an object &lt;code&gt;name&lt;/code&gt; where the value is the country name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Algeria&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Angola&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Cameroon&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Comoros&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Gambia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ghana&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ivory&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Coast&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Kenya&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Lesotho&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Madagascar&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Malawi&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Mauritius&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Morocco&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Nigeria&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Namibia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Senegal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Sierra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Leone&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;South&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Africa&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Swaziland&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tanzania&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tunisia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Uganda&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Zambia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Zimbabwe&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-the-data&#34;&gt;Using the data&lt;/h3&gt;
&lt;p&gt;By using the &lt;a href=&#34;https://gohugo.io/functions/range/#readout&#34;&gt;range&lt;/a&gt; function you can loop through the content, accessing the data folder with &lt;code&gt;.Site.Data&lt;/code&gt; followed by the name of the file and the nested data structure.&lt;/p&gt;
&lt;p&gt;To retrieve data from my &lt;code&gt;africa.yaml&lt;/code&gt; data file I used the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;countries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;continent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;africa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;country&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;material-icons&amp;#34;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;{{ .name }}&lt;/code&gt; prints out the name of the country.&lt;/p&gt;
&lt;p&gt;To see this in action &lt;a href=&#34;http://www.harrycresswell.co.uk/client/ain/ain-filters/&#34;&gt;check out this prototype&lt;/a&gt; and hit the filter button above the search called &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are applying this to your own data be sure to update &lt;code&gt;countries.continent.africa.country&lt;/code&gt; with your specific data structure.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Data files in Hugo make working with large amounts of data a whole lot less cumbersome. Abstracting repetitive code away from templates keeps file clean and lightweight and managing content a somewhat easier task.&lt;/p&gt;
&lt;p&gt;For more on data in Hugo head to the docs, where you can learn about “data-driven content” data features, which lets you load any &lt;code&gt;JSON&lt;/code&gt; or &lt;code&gt;CSV&lt;/code&gt; file from nearly any resource.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://novelist.xyz/tech/hugo-data-files/&#34;&gt;How to use Data Files in Hugo: an example&lt;/a&gt; by Peter Y. Chuang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;Data Templates&lt;/a&gt; fro the Hugo Docs&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Static search with Algolia and Hugo</title>
        <link>https://azharkhan.in/articles/hugo-algolia/</link>
        <pubDate>Fri, 13 Jul 2018 10:15:40 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-algolia/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p class=&#34;intro&#34;&gt;
    We’re about to walk through setting up Algolia search on a Hugo static site with a Forestry CMS, so you can search your posts instantaneously and edit content directly from the browser.
&lt;/p&gt;

&lt;p&gt;This first part is heavily based on &lt;a href=&#34;https://forestry.io/blog/search-with-algolia-in-hugo/#creating-the-json-template&#34;&gt;Chris Macrae’s awesome article on Forestry.io&lt;/a&gt;, with some adaptations to fit my specific needs. In the second article we’ll implement Instantsearch.js on the front end, which aims to pick up where the Chris’s article left off.&lt;/p&gt;
&lt;h2 id=&#34;whats-algolia&#34;&gt;What’s Algolia?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.algolia.com/&#34;&gt;Algolia&lt;/a&gt; is a search API (SaSS; as in &lt;em&gt;Search&lt;/em&gt; as a Service) which allows you to index data and server it up at lightning speeds.&lt;/p&gt;
&lt;p&gt;If you’re running a &lt;a href=&#34;https://jamstack.org/&#34;&gt;JAMStack&lt;/a&gt; build – a Hugo static site like this one perhaps – Algolia will allow you to implement rapid fire, instantaneous search, like you’ve seen on &lt;a href=&#34;https://www.smashingmagazine.com/&#34;&gt;Smashing Magazine&lt;/a&gt; and all those JS framework sites (think Vue, Gatsby, React).&lt;/p&gt;
&lt;p&gt;This stuff isn’t really possible on static sites without using a 3rd party API like Algolia, largely because we don’t have a database to query. But lucky for us Aloglia takes care of all this backend stuff for us.&lt;/p&gt;
&lt;p&gt;With that said, let’s break down the plan so you know what’s coming up.&lt;/p&gt;
&lt;h2 id=&#34;what-are-trying-to-do&#34;&gt;What are trying to do?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Send a search index to Algolia when a new post is added (via &lt;a href=&#34;https://forestry.io/&#34;&gt;Forestry&lt;/a&gt; or a &lt;code&gt;git push&lt;/code&gt; from the CLI).&lt;/li&gt;
&lt;li&gt;Update the search index on our site with a &lt;a href=&#34;https://webtask.io/&#34;&gt;webtask function&lt;/a&gt;, whenever the index is update on Algolia.&lt;/li&gt;
&lt;li&gt;Build a front end search using Algolia’s &lt;a href=&#34;https://community.algolia.com/instantsearch.js/&#34;&gt;Instantsearch.js&lt;/a&gt; library, so visitors can interface with our content (we’ll do this bit in the second article).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a very basic prototype of what we’re building, &lt;a href=&#34;https://heuristic-hoover-2ec537.netlify.com/&#34;&gt;head over here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m assuming you already have a Hugo site set up. If not, I recommend starting out with the &lt;a href=&#34;https://github.com/forestryio-templates/hugo-boilerplate&#34;&gt;Forestry’s Hugo boilerplate&lt;/a&gt;. Here’s &lt;a href=&#34;https://forestry.io/blog/up-and-running-with-hugo/&#34;&gt;a great how-to guide&lt;/a&gt; which will help you get off on the right foot.&lt;/p&gt;
&lt;h2 id=&#34;step-1-generate-json-search-index&#34;&gt;Step 1: Generate JSON search index&lt;/h2&gt;
&lt;p&gt;Algolia deals with JSON, so we’ll need set up Hugo to output our content as JSON. We can do this with &lt;a href=&#34;https://gohugo.io/templates/output-formats/&#34;&gt;Custom Output Formats&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Inside your &lt;code&gt;config.toml&lt;/code&gt; file add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;outputFormats.Algolia&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;baseName&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;algolia&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;isPlainText&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;mediaType&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;notAlternative&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;params.algolia&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;vars&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;publishdate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;expirydate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;permalink&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;params&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;categories&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You’ll notice we also specified the &lt;code&gt;params&lt;/code&gt; we want Algolia to work with – Categories and Tags.&lt;/p&gt;
&lt;h2 id=&#34;step-2-build-a-json-template&#34;&gt;Step 2: Build a JSON template&lt;/h2&gt;
&lt;p&gt;A JSON template will allow Hugo to render the custom JSON output. This will replace the typical &lt;code&gt;_default/list.html&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;Create a new file at &lt;code&gt;layouts/_default/list.algolia.json&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Generates a valid Algolia search index */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$section&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetPage&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;section&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$validVars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Param&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;algolia.vars&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$validParams&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Param&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;algolia.params&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Include What Pages? */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* range $i, $hit := .Site.AllPages */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IsPage&amp;#34;&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$dot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IsDescendant&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Draft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IsHome&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Set the hit&amp;#39;s objectID */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;objectID&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UniqueID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Store built-in page variables in iterable object */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Plain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;date&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dir&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;expirydate&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ExpiryDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fuzzywordcount&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FuzzyWordCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;keywords&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Keywords&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Kind&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Lang&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lastmod&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Lastmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;permalink&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Permalink&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;publishdate&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PublishDate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;readingtime&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReadingTime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;relpermalink&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RelPermalink&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Summary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;weight&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Weight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wordcount&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WordCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;section&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Section&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Include valid page vars */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$param&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;temp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$validVars&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$dot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$param&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* Include valid page params */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$param&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$validParams&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$dot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$key&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$param&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetInMap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$hit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jsonify&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scratch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetSortedMapValues&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hits&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we loop through all of content inside of &lt;code&gt;content/posts&lt;/code&gt;. So if, let’s say, your posts folder is called ‘articles’, make sure you update your code to reflect that. Chris’s tutorial loops through all content including pages, so I modified this to serve only post content as I didn’t want to include pages.&lt;/p&gt;
&lt;h2 id=&#34;step-3-output-the-index&#34;&gt;Step 3: Output the Index&lt;/h2&gt;
&lt;p&gt;Now we have our custom output layout, variables and page-level params configured, we need to tell Hugo to create the actual JSON index.&lt;/p&gt;
&lt;p&gt;Back inside your &lt;code&gt;config.toml&lt;/code&gt; file, add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;outputs&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;home&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HTML&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;RSS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Algolia&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tells Hugo to output the HTML document, the RSS Feed, and an Algolia index for your site’s homepage, which contain our list of content.&lt;/p&gt;
&lt;p&gt;Build your site with &lt;code&gt;npm run build&lt;/code&gt; and you should now find &lt;code&gt;algolia.json&lt;/code&gt; in the root directory. We can use this to update our index in Algolia.&lt;/p&gt;
&lt;h2 id=&#34;step-4-create-an-index-in-algolia&#34;&gt;Step 4: Create an index in Algolia&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.algolia.com/users/sign_up&#34;&gt;Create an account&lt;/a&gt; on Algolia and click &lt;em&gt;New Application&lt;/em&gt;. Make sure you choose a memorable application name. Next select the region closest to you. Then you’ll be redirected to the app dashboard.&lt;/p&gt;
&lt;p&gt;Click the &lt;em&gt;Indices&lt;/em&gt; tab, and choose &lt;em&gt;Add New Index&lt;/em&gt;. Give your new Index a unique name. I used ’hugolia’ for the hell of it, but you can use what you like; your domain name will do.&lt;/p&gt;
&lt;p&gt;Finally, select the &lt;em&gt;API Keys&lt;/em&gt; tab, and copy your &lt;em&gt;Application ID&lt;/em&gt; and &lt;em&gt;Admin API Key&lt;/em&gt;. We’ll need these later, to update the index.&lt;/p&gt;
&lt;h2 id=&#34;step-5-send-search-index-to-algolia&#34;&gt;Step 5: Send search index to Algolia&lt;/h2&gt;
&lt;p&gt;To send our search index to Algolia, we can use &lt;a href=&#34;https://www.npmjs.com/package/atomic-algolia&#34;&gt;atomic-algolia&lt;/a&gt;, an NPM package that does atomic updates to an Algolia index. This will insure our search index is always in-sync with our website’s content.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;npm install atomic-algolia --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This installs the atomic-algolia package to our local &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Next, open the newly created &lt;code&gt;package.json&lt;/code&gt; file, find &amp;ldquo;scripts&amp;rdquo;, and add the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;algolia&amp;quot;: &amp;quot;atomic-algolia&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now create a &lt;code&gt;.env&lt;/code&gt; file at the root of your project to store our environment variables. Add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ALGOLIA_APP_ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;YOUR_APP_ID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ALGOLIA_ADMIN_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;YOUR_ADMIN_KEY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ALGOLIA_INDEX_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;YOUR_INDEX_NAME&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ALGOLIA_INDEX_FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;algolia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Grab those details from your Algolia Dashboard (See Step 4). If you’re using a different theme the path to your Algolia index file might be in &lt;code&gt;dist/algolia.json&lt;/code&gt;. Others might find the file in their public folder.&lt;/p&gt;
&lt;p&gt;Now update your index by running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm run algolia&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If all went well you should now have an index in Algolia synced with the content on your site.&lt;/p&gt;
&lt;h2 id=&#34;step-6-updating-your-index-with-serverless-functions&#34;&gt;Step 6: Updating your index with serverless functions&lt;/h2&gt;
&lt;p&gt;Using Forestry’s &lt;a href=&#34;https://github.com/forestryio-templates/serverless-atomic-algolia&#34;&gt;open-source serverless Webtask Function&lt;/a&gt; we can automatically update our Algolia index each time our site is updated. That way we don’t have to run the NPM script above, each time we make changes.&lt;/p&gt;
&lt;p&gt;To get started, clone the template to your local machine by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/forestryio-templates/serverless-atomic-algolia.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then install the dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd serverless-atomic-algolia
npm install serverless -g &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Next, set up a Webtasks profile if you don’t already have one. This can be done directly from the command line with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serverless config credentials --provider webtasks&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You’ll be asked for an email and you’ll immediately receive a verification code. Enter the verification code and your profile will be ready to use.&lt;/p&gt;
&lt;p&gt;Next, you’ll need to configure the function with your Indices and Algolia app information.&lt;/p&gt;
&lt;p&gt;First, copy &lt;code&gt;config/secrets.yml.stub&lt;/code&gt; to &lt;code&gt;config/secrets.yml&lt;/code&gt; and then open it up in your text editor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ALGOLIA_APP_ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;YOUR_APP_ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ALGOLIA_ADMIN_KEY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;YOUR_ADMIN_KEY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;DEBOUNCE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, open &lt;code&gt;config/index.js&lt;/code&gt; and update name to the name of your index that you set up earlier, and url to &lt;code&gt;yourdomain.com/algola.json&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;indexes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_INDEX_NAME&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PUBLIC_URL_OF_INDEX&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deploying-the-function&#34;&gt;Deploying the function&lt;/h3&gt;
&lt;p&gt;Now deploy the function by running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serverless deploy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the terminal, you should receive an output for the success of your deployment, including the public URL for your new function.&lt;/p&gt;
&lt;p&gt;We’ll need this URL for when we trigger a web hook when changes are made to the site.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-a-webhook-in-forestry&#34;&gt;Setting up a Webhook in Forestry&lt;/h3&gt;
&lt;p&gt;All that’s left to do before we move on to the front end is set up a post-deployment web hook with Forestry. This will trigger the serverless deploy when you make a change.&lt;/p&gt;
&lt;p&gt;If this is new to you, &lt;a href=&#34;https://forestry.io/&#34;&gt;Forestry&lt;/a&gt; is a lightweight CMS for Jekyll and Hugo sites which is very easy to set up, you just link your Git Repository and you’re good to go.&lt;/p&gt;
&lt;p&gt;Once your connected to Forestry, find the &lt;em&gt;Settings&lt;/em&gt; page of your site and scroll down to the &lt;em&gt;Webhook URL&lt;/em&gt; setting.&lt;/p&gt;
&lt;p&gt;Enter the URL you received when deploying your function and click &lt;em&gt;Save Settings&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now each time Forestry finishes deploying your site, your function will be invoked to update your Algolia index.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: you can still make updates locally and push changes from the CLI, just make sure you do a &lt;code&gt;git pull&lt;/code&gt; so you’re up-to-date with your production site.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;At this point should have a working search index, which watches for any content changes you push to Git then re-indexes Algolia and updates our site.&lt;/p&gt;
&lt;p&gt;If you need more details on this whole set up, I highly recommend reading &lt;a href=&#34;https://forestry.io/blog/search-with-algolia-in-hugo/?q=&amp;amp;hPP=10&amp;amp;idx=blog&amp;amp;p=0&#34;&gt;Chris’s tutorial on Forestry&lt;/a&gt; which goes into far more depth in certain places I raced through. Props to Chris for explaining in such detail.&lt;/p&gt;
&lt;p&gt;I wrote this down as much for my own understanding as I hope it has been helpful for your own. This was my first real venture using serverless functions and I’m still wrapping my head around them.&lt;/p&gt;
&lt;p&gt;With that said, any feedback you might have would be very welcome. &lt;a href=&#34;https://twitter.com/harrycresswell&#34;&gt;Drop me a tweet&lt;/a&gt; or &lt;a href=&#34;https://azharkhan.in/contact/&#34;&gt;send me a message&lt;/a&gt;. I’d be happy to hear from others exploring the world of serverless.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: In &lt;a href=&#34;https://harrycresswell.com/articles/hugo-algolia-2/&#34;&gt;part 2 of this article&lt;/a&gt; we’ll build the front end, so users can interface with our content and see the power of Algolia on a Hugo static site.&lt;/em&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forestry.io/blog/search-with-algolia-in-hugo/?q=&amp;amp;hPP=10&amp;amp;idx=blog&amp;amp;p=0&#34;&gt;Static site search with Hugo + Algolia&lt;/a&gt; by Chris Macrae&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.luasoftware.com/tutorials/algolia/add-algolia-search-to-hugo-static-website/&#34;&gt;Add Algolia Search To Hugo Static Website&lt;/a&gt; by Desmond Lua&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Better design systems in Sketch 2</title>
        <link>https://azharkhan.in/articles/better-design-systems-sketch-libraries-part-2/</link>
        <pubDate>Thu, 28 Jun 2018 16:35:12 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/better-design-systems-sketch-libraries-part-2/</guid>
        <description>&lt;p class=&#34;Message&#34;&gt;
    
This article was originally posted (with supporting imagery) on &lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-to-build-a-better-ui-design-system-part-2-8de6cef5adc5&#34;&gt;Medium.com&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Prerequisite: This article requires &lt;a href=&#34;https://www.sketch.com/updates/&#34;&gt;Sketch 47&lt;/a&gt; as it make use of the long awaited new ‘Libraries’ feature.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;the first part&lt;/a&gt; gives you an intro to building ‘primitive’ Libraries to use in a UI design system, this article focuses on using the Symbols stored in these Libraries to build a highly flexible Atom level component.&lt;/p&gt;
&lt;p&gt;For those new to these concepts, the term primitives is used to describe subatomic properties; the lowest level ‘particles’ from which everything else in a system is composed. These ideas are explored in depth in Dan Eden’s work on &lt;a href=&#34;https://daneden.me/2018/01/05/subatomic-design-systems/&#34;&gt;Subatomic Design Systems&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Rather than creating a limited and vast set of UI elements, you define the system in terms of its particle properties, thus limiting the available styles but opening potentially unlimited avenues of creativity for the actual pieces of UI.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;  Dan Eden&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;We can use the concept of ‘particles’ to better understand the Libraries created in the first article. As the process involves identifying or extracting the core properties from our work and storing them in Libraries for reuse.&lt;/p&gt;
&lt;p&gt;But why do this? Our intention is to reference these particles when building pieces of UI. As our components will share properties they’ll remain consistent, yet flexible enough to allow for creativity in their construction.&lt;/p&gt;
&lt;p&gt;The particular pieces of UI we’ll focus on here are commonly known as Atoms. Atoms are the smallest identifiable components in a system, taken from &lt;a href=&#34;http://bradfrost.com/blog/post/atomic-web-design/&#34;&gt;Brad Frost’s Atomic Design&lt;/a&gt; which you’ll likely be familiar with.&lt;/p&gt;
&lt;p&gt;As Atomic Design is widely understood we might use it as the principle guide for our component structures, borrowing the concept of ‘particles’ from Subatomic Design to help explain properties composing an Atom.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://miro.medium.com/max/4440/1*h4vUVzQL5iDd4BEE6dUCyw.png&#34;&gt;This diagram&lt;/a&gt; illustrates where we are on a scale of UI complexity. At this stage we’re primarily concerned with subatomic properties and how we can use them to build Atoms.&lt;/p&gt;
&lt;p&gt;By storing these properties (particles per Subatomic Design) as a collection Symbols and Symbol Overrides in Sketch Libraries, we can build a highly flexible system of low level UI components (Atoms per Atomic Design). And with these components, rapid prototype complex structures with minimal cognitive load.&lt;/p&gt;
&lt;p&gt;Before we get onto the practical stuff ahead, here’s a few reasons why you might consider ditching the ‘single file UI Kit’ approach in favour of breaking your UI system into multiple files. And how Sketch Libraries can take your UI design system process to the next level.&lt;/p&gt;
&lt;h2 id=&#34;how-libraries-improve-our-design-systems&#34;&gt;How Libraries improve our design systems&lt;/h2&gt;
&lt;p&gt;Fundamentally, Libraries help reduce complexity and inconsistency in our work and increase portability and reuse of UI assets.
In other words, Libraries help us create useful work which serves our needs for the long term. As design systems thinker &lt;a href=&#34;https://medium.com/@nathanacurtis&#34;&gt;Nathan Curtis&lt;/a&gt; puts it:&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Focusing on style guide delivery as the climax is the wrong story to tell. A system isn’t a project with an end, it’s the origin story of a living and evolving product that’ll serve other products.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;   Nathan Curtis&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;Benefits of using Libraries to create systems that last:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organised, maintainable projects:&lt;/strong&gt; More files, fewer moving parts per file. Sync changes from a single source of truth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced design debt and redundancy:&lt;/strong&gt; No more broken Symbols and inconsistencies as you’ll be building comps using shared properties stored in ‘primitive’ Libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scaleable, flexible systems:&lt;/strong&gt; Make changes, sync updates and evolve your system with relative ease. Symbol Overrides allows for fewer Symbols and flexible components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Portable design assets:&lt;/strong&gt; Libraries are independent files and so can be used across multiple Sketch files and reused in other projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where you may have struggled to maintain a system in the past, Sketch Libraries help you build lightweight systems which are easier to manage as your product grows and evolves.&lt;/p&gt;
&lt;p&gt;By organising Symbols in multiple Library files, we can nest a Symbols from one file within another and keep those files both light in complexity and small in size. With Libraries, our assets become portable and updates easier to sync across entire projects.&lt;/p&gt;
&lt;p&gt;That means no more redundant design mockups post developer hand-off, no more battling to keep your designs up to date and generally a stress free time with Sketch.&lt;/p&gt;
&lt;p&gt;So how can you adopt this approach to UI design systems with Libraries?&lt;/p&gt;
&lt;h2 id=&#34;using-libraries-for-a-ui-design-system&#34;&gt;Using Libraries for a UI design system&lt;/h2&gt;
&lt;p&gt;Theory aside, building a design systems with Libraries is fairly simple. A high level overview might look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decouple reoccurring properties found in your designs.&lt;/li&gt;
&lt;li&gt;Store properties as Symbols in a series of Library files.&lt;/li&gt;
&lt;li&gt;Use Libraries to build identifiable components.&lt;/li&gt;
&lt;li&gt;Use components to rapid prototype design comps&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I cover the first 2 parts above in &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;the first article&lt;/a&gt;. The third part is where we’ll focus from here. Let’s get on with that now.&lt;/p&gt;
&lt;h2 id=&#34;building-an-atom-using-sketch-libraries&#34;&gt;Building an Atom using Sketch Libraries&lt;/h2&gt;
&lt;p&gt;Now we’re all familiar with Atomic Design, we have a good understanding of how we can use primitive or particle properties to build an Atom. Then in future cases Atoms to build Molecules, Molecules to build Organisms etc.&lt;/p&gt;
&lt;p&gt;As I’ve shared &lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-and-primitives-to-build-an-even-better-system-of-buttons-ecc8f25486ac&#34;&gt;my process for building buttons&lt;/a&gt;, we’ll look at building a flexible Avatar component, another low level Atom. Later we’ll use this Avatar inside a card component. Expect to read about that in a future article.&lt;/p&gt;
&lt;p&gt;With some design system methodology in mind, we will start by identifying the properties needed to build the component.&lt;/p&gt;
&lt;h2 id=&#34;step-1-audit-your-work&#34;&gt;Step 1: Audit your work&lt;/h2&gt;
&lt;p&gt;Call it what you like, Brad frost refers to this as a &lt;a href=&#34;http://bradfrost.com/blog/post/interface-inventory/&#34;&gt;Interface Inventory&lt;/a&gt;, but ‘Audit’ is nice and short so lets go with that for now.&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “An interface inventory is a comprehensive collection of the bits and pieces that make up your interface.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;  Brad Frost&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;However you choose to do it — whether using a spreadsheet, in Evernote, on a piece of paper—just do it. Taking a holistic view of your entire product will help you identify patterns and relationships between different UI components.&lt;/p&gt;
&lt;p&gt;In our case this means potential cases of reusability among properties, which we can decouple from our design and store in Libraries.&lt;/p&gt;
&lt;p&gt;When auditing my work on the &lt;a href=&#34;https://ainlabs.netlify.com/&#34;&gt;AIN design system&lt;/a&gt;, I realised many design patterns in the product were made from variables of a handful of property types: &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;icon&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In theory, this meant I could build the majority of any component (Avatars included) using variables of these 5 primitive properties. This made a good starting point when considering what to store in primitive Libraries.&lt;/p&gt;
&lt;h3 id=&#34;adding-missing-libraries&#34;&gt;Adding missing Libraries&lt;/h3&gt;
&lt;p&gt;If you read &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;the first part&lt;/a&gt; you’ll know I already built Libraries for 2 out of the 5 primitive properties used in my system: &lt;code&gt;colors&lt;/code&gt;, and &lt;code&gt;icons&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I’ve since built Libraries for &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt;, which contain all instances of these properties used in my designs.&lt;/p&gt;
&lt;p&gt;At this point you might be thinking; why not use Layer Styles?&lt;/p&gt;
&lt;p&gt;New for Sketch 51 (currently in Beta): Both Text Styles and Layer Styles defined in Libraries will be available in all documents, just like Symbols are. This is a huge update and will help us solve inconsistencies across Styles which currently we have to recreate for each Library.&lt;/p&gt;
&lt;p&gt;Layer Styles, however, still don’t maintain shape, meaning we have no way to control border radius when using Layer Styles.&lt;/p&gt;
&lt;p&gt;For this reason, I chose to ditch Layer Styles altogether, instead creating Symbols for all instances of shape, storing them in Libraries which can be used across the entire system.&lt;/p&gt;
&lt;p&gt;By doing this I could reduce the number of unique Symbols created on a component level and reduce the complexity of each component.&lt;/p&gt;
&lt;h3 id=&#34;handling-text-on-a-component-level&#34;&gt;Handling text on a component level&lt;/h3&gt;
&lt;p&gt;Typography in Sketch, as you’ll know, is no easy beast to tame. For this reason, I decided against creating a &lt;code&gt;text&lt;/code&gt; Library. Instead I handle all instances of text on a ‘per component’ basis, meaning any text required will live in same file as the component itself.&lt;/p&gt;
&lt;p&gt;This isn’t a big deal if you set your text using a &lt;a href=&#34;https://www.modularscale.com/&#34;&gt;modular scale&lt;/a&gt; or create shared Text Styles with &lt;a href=&#34;http://www.textstyl.es/&#34;&gt;Text Styles plugin&lt;/a&gt; to avoid inconsistency. But keep in mind you won’t need the plugin come Sketch 51.&lt;/p&gt;
&lt;p&gt;Now I have 4 primitive Libraries which I can use to build components. As the majority of components will reference these Libraries, component files will become smaller, less complex and easier to manage. Components will contain only a very few unique symbols, native to their file.&lt;/p&gt;
&lt;p&gt;Fewer unique parts means components remain ultra lightweight. Using Symbols store in my Libraries, I can now utilise Overrides to build highly flexible components.&lt;/p&gt;
&lt;p&gt;Let’s leave these 4 Library files for now. We’ll come back to them later when it’s time to construct the component.&lt;/p&gt;
&lt;h2 id=&#34;step-2-identify-component-variables&#34;&gt;Step 2: Identify component variables&lt;/h2&gt;
&lt;p&gt;Before building your component, aim to identify the requirements of the particular component. In other words, what are the unique attributes comprising the component?&lt;/p&gt;
&lt;p&gt;For the &lt;a href=&#34;https://ainlabs.netlify.com/components.html#avatars&#34;&gt;AIN Design System&lt;/a&gt; it made sense to build 2 styles of Avatar, to differentiate between the 2 different user types in the product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People — in the form of a profile image.&lt;/li&gt;
&lt;li&gt;Projects — in the form of a company logo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make these 2 user types noticeably different, a design decision was taken to use 2 visually different styles: &lt;code&gt;round&lt;/code&gt; for users and &lt;code&gt;square&lt;/code&gt; for companies.&lt;/p&gt;
&lt;p&gt;The next variable to consider was whether or not a user uploads an image or not. This meant we would have to create 2 component states, one &lt;code&gt;with an image&lt;/code&gt; and one &lt;code&gt;without an image&lt;/code&gt;, for both &lt;code&gt;round&lt;/code&gt; and &lt;code&gt;square&lt;/code&gt; styles.&lt;/p&gt;
&lt;p&gt;We decided to fallback to the users initials for cases when an image isn’t uploaded. This meant &lt;code&gt;text&lt;/code&gt; would also have to be considered for both styles.&lt;/p&gt;
&lt;p&gt;The final variable to consider was the &lt;code&gt;size&lt;/code&gt; of the Avatar. This was tricky to get exactly right before we knew all the potential use cases. It required some fine tuning after we began using the system, however the sizing scale remained true to the &lt;a href=&#34;https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632&#34;&gt;8pt grid&lt;/a&gt;, which we used for all components and spacing in the final system. If you’re new to the 8pt grid, this means all spacing units are multiples of 8, which helps ensure a consistent rhythm in your work.&lt;/p&gt;
&lt;p&gt;Ok that’s a lot to remember! Let’s break down these component requirements so they’re more manageable and we have a clear direction to take.&lt;/p&gt;
&lt;h3 id=&#34;breaking-down-the-requirements&#34;&gt;Breaking down the requirements&lt;/h3&gt;
&lt;p&gt;Avatars will need to have Override states for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Round&lt;/strong&gt;: (99px radius) for user avatars&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Square&lt;/strong&gt;: (4px radius) for company logos avatars&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;With an image&lt;/strong&gt;: for when a user uploads one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;With initials and a colour background&lt;/strong&gt;: for when a user doesn’t upload an image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5 sizes&lt;/strong&gt;: xl, l, m, s and xs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-identify-cases-of-reusability&#34;&gt;Step 3: Identify cases of reusability&lt;/h2&gt;
&lt;p&gt;Now we know the requirements for the component, let’s come back to those 4 primitive Libraries. Which of these existing Libraries can we use to build our Avatar component?&lt;/p&gt;
&lt;p&gt;As identified in my audit, Avatars in the system are made up of 5 primitive properties:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Color&lt;/code&gt;, &lt;code&gt;Shape&lt;/code&gt;, &lt;code&gt;Border&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt; and &lt;code&gt;Image&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3 of which can make use of the Libraries we made:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Color&lt;/code&gt;, &lt;code&gt;Shape&lt;/code&gt; and &lt;code&gt;Border&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Text&lt;/code&gt; and in this case &lt;code&gt;Image&lt;/code&gt;, are both specific to the Avatar component, meaning these have little to no re-use elsewhere in my system. So it makes sense to handle these specificities directly within the Avatar Sketch file.&lt;/p&gt;
&lt;h2 id=&#34;step-4-build-the-avatar-component&#34;&gt;Step 4: Build the avatar component&lt;/h2&gt;
&lt;p&gt;Now we know the requirements, it’s time to create a new Sketch file and build our component. In my case I called the file &lt;code&gt;AIN-avatars&lt;/code&gt;, where &lt;code&gt;AIN–&lt;/code&gt; is the project name prefix. Useful for if you decide to create more than one system.&lt;/p&gt;
&lt;p&gt;From here I updated my folder structure from a flat system to organising Libraries by Atomic Design principles. This step isn’t crucial but it may help you think about the parts to your system in order of complexity.&lt;/p&gt;
&lt;h3 id=&#34;method-using-abstract-for-version-control&#34;&gt;Method using Abstract for version control&lt;/h3&gt;
&lt;p&gt;If you are using Abstract to keep track of revisions and changes, files set up is slightly different. You will want to &lt;strong&gt;create your file from within Abstract&lt;/strong&gt;: &lt;em&gt;Add File &amp;gt; Create Sketch file as Library&lt;/em&gt;. This will prevent you running into problems where Abstract doesn’t recognise Symbols you made previously.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pro tips for Abstract: Always open files from within Abstract via the ‘Edit in Sketch’ button and not from Sketch. This will ensure the changes you make to your files are tracked by Abstract.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-symbol-overrides-for-avatar-images&#34;&gt;Create Symbol Overrides for avatar images&lt;/h3&gt;
&lt;p&gt;Inside my new file I created 5 Artboards, at my &lt;code&gt;xl&lt;/code&gt; size (120px x 120px), giving me 5 override options to use for user profile images.&lt;/p&gt;
&lt;p&gt;Remembering the shape of my user profile images, I named these Artboards &lt;code&gt;avatar / image / rounded / 1&lt;/code&gt; (1 through to 5) and created a 120px circle to fill each Artboard. Then I turned each shape into a mask: ctrl + click on the layer, then select Mask.&lt;/p&gt;
&lt;p&gt;I used the &lt;a href=&#34;https://uifaces.co/sketch-plugin&#34;&gt;UI Faces Sketch Plugin&lt;/a&gt; to auto generate my 5 images. Of course, you don’t have to stick to 5 images here, you could create as many user image overrides as you need. Once this is done turn each Artboard into a Symbol.&lt;/p&gt;
&lt;p&gt;From here, I created 5 more Artboards, again at my &lt;code&gt;xl&lt;/code&gt; size for my 5 company logo overrides. I names these Artboards &lt;code&gt;avatar / image / 4px / 1&lt;/code&gt; (1 through to 5). Next I added a shape layer with 4px radius, changed the color fill and added a different logo option for each. In my case I used logos from our other products, but you can use whichever Logos or graphics you wish.&lt;/p&gt;
&lt;p&gt;Don’t forget to turn your new Artboards into symbols once you’re done.&lt;/p&gt;
&lt;p&gt;Great! Now I have a total of 10 new symbols to use as Overrides for user profile images and company logos.&lt;/p&gt;
&lt;h3 id=&#34;create-master-symbol-for-each-component-size&#34;&gt;Create master Symbol for each component size&lt;/h3&gt;
&lt;p&gt;Building the master component is where the real Library magic happens. Here we’ll make use of our &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; Libraries from earlier. I call it a ‘master’ component as this is the Avatar component we’ll place into designs when building larger components and design comps.&lt;/p&gt;
&lt;p&gt;To make the master components, I made 5 more Artboards, at the 5 different sizes determined using the 8pt grid system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xl&lt;/code&gt;: 120px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: 96px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: 80px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: 64px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs&lt;/code&gt;: 40px&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adding-symbol-overrides-from-libraries&#34;&gt;Adding Symbol Overrides from Libraries&lt;/h3&gt;
&lt;p&gt;Now we need to insert our &lt;code&gt;Shape&lt;/code&gt; Library. Do this for each of the 5 Artboard sizes: &lt;em&gt;Insert &amp;gt; AIN-shapes &amp;gt; shape/radius &amp;gt; rounded&lt;/em&gt;. This will allow us to change the Avatar shape from round to square for company logos.&lt;/p&gt;
&lt;p&gt;As my Color Library is nested inside my shape Library, that kills two birds with one stone. We now have control of our Avatar shape and color in the form of Symbol Overrides.&lt;/p&gt;
&lt;p&gt;Make sure the shape layer sits at the bottom, and you’ve renamed the layer &lt;code&gt;shape&lt;/code&gt; for clean naming in your Override options.&lt;/p&gt;
&lt;p&gt;Now let’s do the same for the border. Our border will be handy for when the Avatar contains an image which clashes with the background colour of its container. Insert a border for each Artboard size now: &lt;em&gt;Insert &amp;gt; AIN-borders &amp;gt; border/radius &amp;gt; rounded &amp;gt; white&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once you’ve placed your border library and it matches the shape, make sure the new layer sits at the top of the layer stack and you’ve renamed the layer to &lt;code&gt;border&lt;/code&gt;. Again, this will keep your Overrides panel clean and easy to read.&lt;/p&gt;
&lt;h3 id=&#34;adding-the-image-override-symbol-to-master-component&#34;&gt;Adding the image Override Symbol to master component&lt;/h3&gt;
&lt;p&gt;Now let’s insert those image overrides we created earlier. Providing you named your Artboards sequentially, following the same naming convention, you should be able to override your image with any of the 5 options we made earlier: &lt;em&gt;Insert &amp;gt; Symbols &amp;gt; avatar &amp;gt; image &amp;gt; rounded &amp;gt; 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you do this for each size. Again, rename the new layer to &lt;code&gt;image&lt;/code&gt; for clean override names. Your image layer should sit above your shape layer.&lt;/p&gt;
&lt;h3 id=&#34;adding-text-for-users-initials&#34;&gt;Adding text for users initials&lt;/h3&gt;
&lt;p&gt;The final stage is to add the text used to write the initials of our user or company name. Initials only show in the component if a user fails to upload an image, for both user profile images and company logos.&lt;/p&gt;
&lt;p&gt;As mentioned, you can create text styles based on your typography scale, or use the &lt;a href=&#34;http://www.textstyl.es/&#34;&gt;Textstyl.es plugin&lt;/a&gt; to synced your shared text styles* from another sketch file to your Avatar component file.&lt;/p&gt;
&lt;p&gt;*Shared text styles will become a native Sketch feature called ‘Library Styles’ in Sketch 51.&lt;/p&gt;
&lt;p&gt;Using the type scale used throughout my design system, I chose 3 font sizes: &lt;code&gt;20px&lt;/code&gt;, &lt;code&gt;16px&lt;/code&gt;, &lt;code&gt;14px&lt;/code&gt; which fit all 5 component sizes.&lt;/p&gt;
&lt;p&gt;I made a new text layer for each Symbol size, placing it below the image layer. Now the text will be hidden from view whenever an image is selected.&lt;/p&gt;
&lt;h2 id=&#34;step-5-using-component-overrides&#34;&gt;Step 5: using component overrides&lt;/h2&gt;
&lt;p&gt;You should now have a flexible &lt;code&gt;Avatar&lt;/code&gt; component, built using the fewest number of unique symbols possible.&lt;/p&gt;
&lt;p&gt;In order to test out your new component and its Overrides, insert a master symbol at the size of your choice: &lt;em&gt;Insert &amp;gt; Symbol &amp;gt; Avatar &amp;gt; xlarge&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Providing you have the symbol selected, in the Inspector window on the right you will see all the possible overrides including those from your external Libraries.&lt;/p&gt;
&lt;p&gt;To make sense of all my Override options I made a page called &lt;code&gt;Avatars&lt;/code&gt; where I keep a visual reference of all possible instances of Avatars used in my design.&lt;/p&gt;
&lt;p&gt;You should now have a complete Avatar component stored in a Library which can be nested in other Sketch files. We’ll take a look at how this works when we make a card component in the next article.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;There are a number of ways you can improve your workflow from here. I’ll start with a few essentials and let you run with it from there. You may well have specific requirements for your project which I haven’t accounted for.&lt;/p&gt;
&lt;h3 id=&#34;using-sketch-runner-to-improve-speed-and-efficiency&#34;&gt;Using Sketch Runner to improve speed and efficiency&lt;/h3&gt;
&lt;p&gt;Sketch runner is a valuable tool when it comes to using your Symbols and Libraries. Insert your components with &lt;code&gt;cmd + &#39;&lt;/code&gt;, then start typing the name of your symbol. This will become the fastest way to build mockups using your components as you start to remember all your various component names.&lt;/p&gt;
&lt;h3 id=&#34;versioning-and-collaborating-on-libraries-using-abstract&#34;&gt;Versioning and collaborating on Libraries using Abstract&lt;/h3&gt;
&lt;p&gt;I touched earlier on using Abstract for versioning your work.&lt;/p&gt;
&lt;p&gt;When you follow a component based workflow using multiple Libraries, Abstract will help you stay on top of all your files as your system grows or if you’re working as part of a team.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Protip: Add your files to Abstract from the start. This will prevent you from having to comb through your files updating Symbols in order for Abstract to track them. I had to do this, and it wasn’t much fun!&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-libraries-with-your-team-via-sketch-cloud&#34;&gt;Sharing Libraries with your team via Sketch Cloud&lt;/h3&gt;
&lt;p&gt;Sketch 49 saw the release of Sketch Cloud. Native sharing and collaborating on your Libraries with other designers is now possible, so no need for Dropbox or Google Drive.&lt;/p&gt;
&lt;p&gt;Personally I’ve been working as a solo design on the design systems I’ve created so haven’t used Sketch Cloud but would be interested in hearing from anyone who has.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this article we’ve looked at how adopting principles from both Atomic and Subatomic Design can help us better understand how to build highly flexible Atom level components, using Sketch Libraries and Symbol Overrides.&lt;/p&gt;
&lt;p&gt;By building components primarily using Symbols from Libraries, we can reduce redundancy and design debt. Whilst Symbol Overrides allow us to maintain maximum flexibility in our components. Storing our components in Libraries keeps files lightweight, making our system easier to maintenance and less of a hassle to update.&lt;/p&gt;
&lt;p&gt;These components will become an integral part of our component based UI design system, as we use them as building blocks to rapid prototype larger parts of UI faster and with fewer inconsistencies.&lt;/p&gt;
&lt;p&gt;In the next part we’ll look at using Atom level components — the Avatars built here along with buttons — to build more complex component patterns, such as cards. You might categorise these larger components as Molecules, as per Atomic Design, but of course that’s totally your call.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://daneden.me/2018/01/05/subatomic-design-systems/&#34;&gt;Subatomic Design Systems&lt;/a&gt; by Daniel Eden&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atomicdesign.bradfrost.com/chapter-5/&#34;&gt;Maintaining Design Systems&lt;/a&gt; by Brad Frost&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.invisionapp.com/inside-design/guide-to-design-systems/&#34;&gt;A Comprehensive Guide to Design Systems&lt;/a&gt; by Will Fanguy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-and-primitives-to-build-an-even-better-system-of-buttons-ecc8f25486ac&#34;&gt;Sketch Libraries: Building a better system of buttons&lt;/a&gt; by me.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/ux-power-tools/sketch-libraries-how-they-work-and-the-crazy-stuff-you-can-do-with-them-fc10f142ac80&#34;&gt;Sketch Libraries: How they work, and the crazy stuff you can do with them&lt;/a&gt; by Jon Moore.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/sketch-app-sources/text-system-mastery-with-shared-styles-9931bea7d085&#34;&gt;Text System Mastery with Shared Styles&lt;/a&gt; by Bunin Dmitriy&lt;/li&gt;
&lt;li&gt;Exporting text styles with &lt;a href=&#34;http://www.textstyl.es/&#34;&gt;Textstyl.es&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zeroheight/library-styles-sync&#34;&gt;Library Styles Sync plugin&lt;/a&gt; to sync shared styles from Library to doc&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Static site form handling with Netlify</title>
        <link>https://azharkhan.in/articles/forms-with-netlify/</link>
        <pubDate>Thu, 05 Apr 2018 09:49:36 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/forms-with-netlify/</guid>
        <description>&lt;p&gt;&lt;em&gt;Note: This tutorial requires you have a static site which you deploy using &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;. If you don‘t use Netlify, read on as you might well be convinced to switch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Chances are you might have read &lt;a href=&#34;https://azharkhan.in/articles/form-data-with-zapier/&#34;&gt;Using Zapier to send form data&lt;/a&gt;. I used Zapier to handle form submissions on the previous incarnation of this site. And it worked great. I was very happy with the fact I could by-pass subscription based static site form services like &lt;a href=&#34;https://formspree.io/&#34;&gt;Formspree&lt;/a&gt; and &lt;a href=&#34;https://formkeep.com/&#34;&gt;Formkeep&lt;/a&gt;, just by using Zapier Webhooks and a bit of AJAX to tidy things up.&lt;/p&gt;
&lt;p&gt;If you’re also running a static site and wondering how best to go about collecting form submissions without a backend, then &lt;a href=&#34;https://azharkhan.in/articles/form-data-with-zapier/&#34;&gt;I’d highly recommend using Zapier&lt;/a&gt;, everytime. There is however one exception, and the reason I made the switch. And that reason is Netlify.&lt;/p&gt;
&lt;p&gt;If you use Netlify to deploy your static site, there’s an even easier way to handle your form submissions. This article looks at how to get set up.&lt;/p&gt;
&lt;p&gt;In case you’re interested in seeing how this form we’re about to build works, then head over to &lt;a href=&#34;https://azharkhan.in/contact/&#34;&gt;my contact page&lt;/a&gt; for a quick demo. Feel free to test it out.&lt;/p&gt;
&lt;h2 id=&#34;why-use-netlify-for-your-form-submissions&#34;&gt;Why use Netlify for your form submissions&lt;/h2&gt;
&lt;p&gt;Before we get into the code, let’s run through why Netlify is an awesome option for static form handling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need for any API calls&lt;/li&gt;
&lt;li&gt;No JS required&lt;/li&gt;
&lt;li&gt;Less code&lt;/li&gt;
&lt;li&gt;Built-in email and slack notification options for form submissions&lt;/li&gt;
&lt;li&gt;Optional integrate with &lt;a href=&#34;https://zapier.com/&#34;&gt;Zapier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Receive file upload submissions&lt;/li&gt;
&lt;li&gt;Export form submissions to a CSV file&lt;/li&gt;
&lt;li&gt;Automatic spam filtering, reCAPTCHA 2 and honeypot field options&lt;/li&gt;
&lt;li&gt;Optional AJAX submissions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a fair amount of cool stuff we can do with Netlify Forms already.&lt;/p&gt;
&lt;h2 id=&#34;so-whats-the-deal&#34;&gt;So What’s the deal?&lt;/h2&gt;
&lt;p&gt;Netlify’s ’Forms Free’ includes up to 100 form submissions per month, if you hit the limit, Netlify will upgrade you to ’Forms Pro’, which includes 1000 submissions per month. Perfect for small business and personal websites.&lt;/p&gt;
&lt;p&gt;With that said, let’s take a look at how to set up a form to work with Netlify. I’ll be using my own setup as an example.&lt;/p&gt;
&lt;h2 id=&#34;how-i-set-up-netlify-to-handle-forms&#34;&gt;How I set up Netlify to handle forms&lt;/h2&gt;
&lt;p&gt;First, I created a new page on my site to host my new contact form. From the command line that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd site
hugo new page/contact.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice I’m using &lt;code&gt;.html&lt;/code&gt; and not &lt;code&gt;.md&lt;/code&gt; as my contact page will contain the HTML needed for my form. Using the &lt;code&gt;.html&lt;/code&gt; extension for pages is perfectly valid in Hugo.&lt;/p&gt;
&lt;p&gt;Inside my &lt;code&gt;contact.html&lt;/code&gt; page I added some basic markup for my form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your name?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your full name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your email address?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What your message?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your message...&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: I’ve removed class names to make it easier to read, you will want to add some in order to style your form.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For Netlify to start receiving my form submissions, it’s as simple as adding the &lt;code&gt;netlify&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Next go ahead and add a &lt;code&gt;name&lt;/code&gt; attribute, so Netlify knows what to call the form in the Netlify web app. If you have more than one form on your site you will need to use unique names. I’ve called mine &lt;code&gt;name=&amp;quot;contact&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Once you push your new form page to your production site, Netlify will start receiving form submissions.&lt;/p&gt;
&lt;h2 id=&#34;extending-your-form-for-spam-filtering&#34;&gt;Extending your form for Spam filtering&lt;/h2&gt;
&lt;p&gt;Netlify runs a spam filter by default when a form is submitted, but you might want to add an extra layer of security by using a “Honeypot” field. This will keep bots from hammering your inbox with junk submissions.&lt;/p&gt;
&lt;p&gt;In the words of Netlify:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;”‘Honeypot‘ fields are hidden form fields that lure bot users into completing a field that human users can’t see. A form submitted with a completed honeypot field can be rejected as spam, because only a bot would see and complete the field.“&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sounds like a good idea to me, so let’s get this set up now.&lt;/p&gt;
&lt;p&gt;All you need to do is add &lt;code&gt;netlify-honeypot=&amp;quot;bot-field&amp;quot;&lt;/code&gt; to your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, then add a new input field in your form to catch those bots, &lt;code&gt;name=&amp;quot;bot-field&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With that done your form should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify-honeypot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;“u-visually-hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Don’t fill this out if you&amp;#39;re human: &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your name?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your full name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your email address?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What your message?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your message...&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see I’ve added &lt;code&gt;class=&amp;quot;u-visually-hidden&amp;quot;&lt;/code&gt; to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag containing the “Honeypot” field. This is a reusable utility class which will hide the field with some simple CSS. Now bots will find the field but reader won’t.&lt;/p&gt;
&lt;p&gt;At this point Netlify is set up to collect form data and any spam will be filter out. The final thing to do is add some finesse with a custom page redirect.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-success-page&#34;&gt;Adding a custom success page&lt;/h2&gt;
&lt;p&gt;By default, when someone completes your form, they will see a generically styled success message with a link back to the form page, that’s fine but you might want something custom.&lt;/p&gt;
&lt;p&gt;I chose to replace this with &lt;a href=&#34;https://azharkhan.in/success/&#34;&gt;a success page&lt;/a&gt;, to inform visitors their message was submitted successfully and to say thanks.&lt;/p&gt;
&lt;p&gt;To do something similar create a new page, for example &lt;code&gt;/success/&lt;/code&gt; and add an &lt;code&gt;action&lt;/code&gt; attribute to your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;If all’s well and good, your form tag should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify-honeypot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/success/&amp;#34;&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure the path is relative, and starts with a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Great, now we have a success page. The final thing to do is set up a way to receive our form submissions.&lt;/p&gt;
&lt;h2 id=&#34;receiving-form-submissions&#34;&gt;Receiving form submissions&lt;/h2&gt;
&lt;p&gt;Netlify has a few different notification options for form submissions, including email and Slack notifications.&lt;/p&gt;
&lt;p&gt;This is handled from within the Netlify web app. You can find the options in &lt;strong&gt;Settings &amp;gt; Forms &amp;gt; Form notifications&lt;/strong&gt;. Select the &lt;strong&gt;Add notification&lt;/strong&gt; dropdown to see your options. I chose to keep things simple for now, receiving a notification by email.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this article we’ve looked at setting up static site form submissions using Netlify. If you’ve followed along you should now have a functioning contact form on your site which sends notifications to your email.&lt;/p&gt;
&lt;p&gt;From here you might consider adding more fields to your form or building a success alert using AJAX and ditching the success page.&lt;/p&gt;
&lt;p&gt;Perhaps you’re thinking about adding a few automation steps with Zapier, to send your submission data to other apps in your workflow. Whether that be updating your mailing list in Mailchimp or adding data to a google sheet. The possibilities are almost endless so I’ll leave you to decide where to take it next.&lt;/p&gt;
&lt;p&gt;Finally, if you haven’t seen it already, make sure you check out the article below from the Netlify blog, which goes into more detail on what can be done with form data using Netlify.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/docs/form-handling/&#34;&gt;Netlify Docs: Form Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Adding external articles to a list page</title>
        <link>https://azharkhan.in/articles/hugo-external-articles/</link>
        <pubDate>Tue, 03 Apr 2018 10:28:50 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-external-articles/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Lately I’ve been publishing articles both here on my personal site and on Medium. It seems to be fairly common practice these days.
&lt;/p&gt;

&lt;p&gt;In order to stay organised, as I publish on various sites, it seems logical to try and keep track of everything I’m writing in one place, and that means here on my personal site.&lt;/p&gt;
&lt;p&gt;To do this I came up with a super simple solution which extends the typical &lt;a href=&#34;https://gohugo.io/templates/lists/&#34;&gt;Hugo List template&lt;/a&gt; to include posts from external sources (in this case Medium). You’ll find this useful if like me you publish articles on multiple sites and want to link to all of them from one posts page on your &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; site, without having to duplicate articles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For a quick demo of this in action click on a few of my &lt;a href=&#34;https://azharkhan.in/articles/&#34;&gt;articles&lt;/a&gt; and you’ll notice some link to internal pages on this site and some link to external sources.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;All that’s needed to add external post links to your post list page, is one line of front matter, and some logic in the form of an If statement which uses the &lt;a href=&#34;https://gohugo.io/functions/isset/&#34;&gt;isset function&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-1-create-new-post-with-specific-front-matter&#34;&gt;Step 1: Create new post with specific front matter&lt;/h2&gt;
&lt;p&gt;First you’ll need to create a new post for your external article.&lt;/p&gt;
&lt;p&gt;In my case I do this by moving into the site folder within my Hugo site. From the command line: &lt;code&gt;cd site&lt;/code&gt;, then &lt;code&gt;hugo new articles/external-article-name.md&lt;/code&gt;. If you haven’t changed the name of your content type then you will use &lt;code&gt;hugo new posts/external-article-name.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You should now have a new article in &lt;code&gt;site &amp;gt; content &amp;gt; articles&lt;/code&gt; with basic front matter included.&lt;/p&gt;
&lt;p&gt;Inside the front matter of your new post, include a new param for your external article. I called mine &lt;code&gt;affiliatelink&lt;/code&gt;, but you could use something like &lt;code&gt;externallink&lt;/code&gt; if you prefer. Add the URL of your external article as the value.&lt;/p&gt;
&lt;p&gt;Your posts should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Sketch Libraries and primitives to build buttons&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2018-01-26T21:29:52&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;affiliatelink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://medium.com/@harrycresswell/using-sketch-libraries-and-primitives-to-build-an-even-better-system-of-buttons-ecc8f25486ac&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is all you need to do in the post.&lt;/p&gt;
&lt;h2 id=&#34;step-2-extending-the-list-page-template&#34;&gt;Step 2: Extending the List page template&lt;/h2&gt;
&lt;p&gt;In order to get external articles showing on your &lt;a href=&#34;https://gohugo.io/templates/lists/&#34;&gt;list page&lt;/a&gt;, jump back into your &lt;code&gt;list.html&lt;/code&gt; layout. In most cases you’ll find this in &lt;code&gt;layouts &amp;gt; _default&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you haven’t made any major changes your list page should look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty simple stuff. All we’re doing here is looping through our posts and printing out the post title. In this case clicking the title will take you do to the single post url. This should look familiar.&lt;/p&gt;
&lt;p&gt;Now we need to extend this to include links to our external articles within the same loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;If&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;external&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exists&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Params&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;affiliatelink&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Params.affiliatelink }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;_blank&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8599&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Else&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here?&lt;/p&gt;
&lt;p&gt;First Hugo looks for &lt;code&gt;affiliatelink&lt;/code&gt; in the front matter of our post. If the parameter exists, &lt;code&gt;isset&lt;/code&gt; returns true and replaces our usual permalink with the URL value from our post front matter. If a value for &lt;code&gt;affiliatelink&lt;/code&gt; doesn’t exist, our list behaves as normal. We handle this with an &lt;code&gt;else&lt;/code&gt; statement.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Hopefully you’ve now implemented a simple bit of logic which serves up both external and internal links on your website.&lt;/p&gt;
&lt;p&gt;On a final note, if you want to differentiate between the different post types try using the &lt;code&gt;↗&lt;/code&gt; icon and wrap in a &lt;!-- raw HTML omitted --&gt; positioned after your title. I also added a &lt;code&gt;target=&#39;_blank&#39;&lt;/code&gt; to the &lt;code&gt;a&lt;/code&gt; tag. It’s not essential but it’s a quick and easy way to show your readers that the post is from an external source and the link will open in a new window&lt;/p&gt;
&lt;p&gt;I hope you’ve found this helpful. Any questions &lt;a href=&#34;https://azharkhan.in/contact/&#34;&gt;leave me a message&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/harrycresswell/&#34;&gt;shoot me a tweet&lt;/a&gt;!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Type Emoji’s on Mac shortcut</title>
        <link>https://azharkhan.in/articles/emoji-mac/</link>
        <pubDate>Mon, 26 Mar 2018 13:28:18 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/emoji-mac/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    It’s hard to avoid Emojis. Whether you like using them on not they’re a great way to help visually communicate your thoughts and ideas.
&lt;/p&gt;

&lt;p&gt;We all know how to use Emoji’s on a phone but do you know how to access the Emoji panel on a mac?&lt;/p&gt;
&lt;p&gt;The Mac Emoji keyboard shortcut is really easy to remember, whilst your cursor is in type mode, use the shortcut: &lt;code&gt;Command + Control + Spacebar&lt;/code&gt; to bring up the Emoji character panel.&lt;/p&gt;
&lt;p&gt;Then select the Emoji to type it. The panel works exactly the way it does on an iPhone. Easy peasy! 🤙&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Page content on your Hugo homepage</title>
        <link>https://azharkhan.in/articles/hugo-page-content-on-homepage/</link>
        <pubDate>Fri, 02 Mar 2018 15:44:49 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-page-content-on-homepage/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    A simple Hugo snippet for displaying content from a specific page on your site homepage.
&lt;/p&gt;

&lt;p&gt;Say for example I wanted to add the title and content from a page called “How it works” on my homepage.&lt;/p&gt;
&lt;p&gt;First I’d need to create a page called how it works.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new page/how-it-works.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the page front matter add a parameter called &lt;code&gt;type&lt;/code&gt; and give it a value which makes sense.&lt;/p&gt;
&lt;p&gt;That might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;How It Works&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2018-03-02T14:58:10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then in your &lt;code&gt;index.html&lt;/code&gt; add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;works&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;look&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;front&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matter&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;f3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it!&lt;/p&gt;
</description>
      </item>
      
    
      
      
    
      
      
    
      
      <item>
        <title>Better design systems in Sketch</title>
        <link>https://azharkhan.in/articles/better-design-systems-sketch-libraries/</link>
        <pubDate>Thu, 19 Oct 2017 21:15:59 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/better-design-systems-sketch-libraries/</guid>
        <description>&lt;p class=&#34;Message&#34;&gt;
    
This article was originally posted on &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;Medium.com&lt;/a&gt;

&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Design is just problem solving within a set of constraints. In the grand scheme of things, it rarely has anything to do with graphics.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;  Adam Morse&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;Designers who have worked with &lt;a href=&#34;https://airbnb.design/building-a-visual-language/&#34;&gt;a design system&lt;/a&gt; before will understand constraints as the various elements in a visual language, constructed to guide our every decision. Colors, icons and buttons are just some of these elements which together, form a unified system of tools to work with.&lt;/p&gt;
&lt;p&gt;Systems of constraint help us pave a path in which to follow, improving the efficiency and speed of our process. Promoting reusability and consistency in our work, they enable us to design better digital products. When used effectively, our projects are scalable and maintaining them easier.&lt;/p&gt;
&lt;p&gt;That being said, often the reality of managing these systems is quite different. Whilst Sketch has made the process easier, it’s still not without it’s quirks.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Before the arrival of Sketch Libraries we had &lt;a href=&#34;https://www.sketch.com/docs/symbols/&#34;&gt;Symbols&lt;/a&gt;— the biggest leap forward to date, in the world of design systems. Symbols helped solve issues concerning consistency, making parts of our interface re-usable. However Symbols were document dependent. Until now, there was no native way for Symbols to transcend the Sketch files they lived in.&lt;/p&gt;
&lt;h3 id=&#34;why-is-this-a-problem&#34;&gt;Why is this a problem?&lt;/h3&gt;
&lt;p&gt;For small projects this wasn’t a big deal. You could keep your entire design in one Sketch document. Mockups, wireframes, userflows, UI Kit, the lot. Symbols worked fine as all your project required was in one document.&lt;/p&gt;
&lt;p&gt;But what happens when you’re designing bigger projects? Perhaps you want Sketch to run fast and free of bloat, so you split your project into multiple sketch files, surely it will be easier to manage? It will. That is until you want these various files to reference one set of symbols.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&#34;https://www.angelinvestmentnetwork.co.uk/&#34;&gt;AIN&lt;/a&gt; we have 3 different products which all utilise one design system (or set of symbols). The challenge has been working out how to use the same set of symbols simultaneously, for all 3 projects. Bare in mind these projects are big, each one containing hundreds of Artboards. Using one Sketch document for everything just wouldn’t make sense—the file size would be unmanageable.&lt;/p&gt;
&lt;h3 id=&#34;the-old-way-of-doing-it&#34;&gt;The old way of doing it&lt;/h3&gt;
&lt;p&gt;My old process involved using a Sketch Template for my Symbols, which I picked up from &lt;a href=&#34;https://blog.marvelapp.com/creating-maintaining-marvel-style-guide-sketch/&#34;&gt;Yavor Punchev’s awesome process for the Marvel style guide&lt;/a&gt;. I extended Yavor’s method by pulling Symbols into different Sketch documents using the Shared Library feature of Craft plugin by Invision. Maybe this process sounds familiar?&lt;/p&gt;
&lt;p&gt;Truth be told, this is a hacky process which I don’t recommend using. Yes my files were bloat free, and I could insert Symbols into multiple documents, but I had no way of syncing updates to those Symbols already in use across different files.&lt;/p&gt;
&lt;p&gt;Symbols are designed to make projects easier to maintain. Whilst this method allowed for re-usability, it made maintaining and updating existing symbols impossible.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: I couldn’t use Sketch Runner to search for and insert symbols on the fly using this process. Nothing major but still annoying as Runner is a huge time saver.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Luckily, the solution arrives with Libraries, new for Sketch 47.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.sketchapp.com/libraries-an-in-depth-look-56b147022e1f&#34;&gt;Sketch Libraries&lt;/a&gt; allow you to create a Library of Symbols, which can be use across multiple documents. We’re talking SASS partials for the developers out there. On top of that, you can also nest Libraries within Libraries. This is big news.&lt;/p&gt;
&lt;p&gt;Essentially, you can now keep different groups of symbols in their own Sketch file. That means different document for your buttons, colours, icons, form elements, and whatever else you might use in your system. Other documents in your project can then reference the symbols in these source files, and at the click of a button sync when you make any updates to those symbols.&lt;/p&gt;
&lt;p&gt;Simply put; you now have one source of truth for all your different UI element, which, in turn, all your other Sketch files reference. The advantages to doing this will soon become clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smaller file sizes&lt;/li&gt;
&lt;li&gt;Faster Sketch performance&lt;/li&gt;
&lt;li&gt;Reusable components&lt;/li&gt;
&lt;li&gt;Maintainable projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@pablostanley&#34;&gt;Pablo Stanley&lt;/a&gt; summed it up pretty well: “This is like the holy grail of product design”. You can watch Pablo getting excited about Libraries here.&lt;/p&gt;
&lt;p&gt;Libraries explained by the Sketch team:&lt;/p&gt;
&lt;p&gt;_“A Library is just an ordinary Sketch document that contains Symbols which you can then use in any other Sketch document. If you update any of those Symbols in your Library file, documents containing instances of those Symbols will receive a notification telling you that they can be updated. Here you can preview, check, and confirm changes — and by doing so, you can always ensure your documents are using the up-to-date copies of those components.” _&lt;/p&gt;
&lt;h2 id=&#34;putting-sketch-libraries-into-practice-to-build-a-component-library&#34;&gt;Putting Sketch Libraries into practice to build a component library&lt;/h2&gt;
&lt;p&gt;The next part of this article will look how I’m using Sketch Libraries to maintain a system of UI components. But first, there are a few things to keep in mind:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think like a developer&lt;/strong&gt;
Adopting the developer mindset when designing systems is imperative. There are many lessons we can learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D.R.Y — Don’t repeat yourself&lt;/strong&gt;
The idea is to create re-usable components. This keeps our files lightweight and our design consistent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think in Primitives&lt;/strong&gt;
Every component we create is made up of a certain set of properties. These properties are the most ‘primitive’ elements, used throughout a design system. A developer would create variables for these properties to prevent duplicates in the code. We can do the same, by creating a Library files for all primitives which we can utilise when we build larger components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomic Design Methodology&lt;/strong&gt;
I’m following &lt;a href=&#34;http://bradfrost.com/blog/post/atomic-web-design/&#34;&gt;Brad Frost’s Atomic Design Methodology&lt;/a&gt; for building scaleable interfaces. Primarily because it’s easy follow and everyone understands the principles.&lt;/p&gt;
&lt;p&gt;In a nutshell, Atomic Design takes inspiration from the molecular structure of the natural word. Where Atoms; the basic building blocks or in our case the smallest parts of a visibly recognisable UI, combine to form Molecules; the larger parts of our interface. Organisms are the assemblies of these Molecules and represent even larger, more complex parts of our interface.&lt;/p&gt;
&lt;h3 id=&#34;separate-sketch-documents-for-all-groups-of-symbols&#34;&gt;Separate Sketch documents for all groups of symbols&lt;/h3&gt;
&lt;p&gt;Of course, you can still create one file for all your components if you prefer—and reference Symbols from that file in other documents—however my suggestion (and the way we’ll be doing it here) is to create individual documents for each group of Symbols.&lt;/p&gt;
&lt;p&gt;Again, this is similar to how a developer might use Sass partials. Using lots of smaller documents make our design system easier to manage. The other advantage is our Library files will be re-useable in other projects and importantly, it will be scaleable.&lt;/p&gt;
&lt;p&gt;By thinking in primitives, we can start by creating Libraries for the core elements which will be used across our entire design system. These basic properties will make up all Atoms, Molecules and Organisms.&lt;/p&gt;
&lt;p&gt;Let’s start by creating a new Sketch document for the colors in our system. Colors are highly reusable and found throughout our UI—a sensible place to start.&lt;/p&gt;
&lt;h2 id=&#34;step-1-create-a-new-sketch-document-for-your-colors&#34;&gt;Step 1: create a new Sketch document for your colors&lt;/h2&gt;
&lt;p&gt;I started by prefixing the name of my sketch document with AIN- so not to confuse them with any other ‘non AIN’ projects I’m currently working on. For example AIN-colors and so fourth.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Obviously this part is totally optional but you might find it useful if, like me, you work on several different unrelated projects and like to be organised.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Following this, I made a Shared Style for each colour in our design system and organised them into categories: brand, greyscale and ui by using a ‘/’ in the name, to build the folder structure.&lt;/p&gt;
&lt;p&gt;Then I made each color style into a Symbol, and arranged them on my Symbols page using the &lt;a href=&#34;https://github.com/sonburn/symbol-organizer&#34;&gt;Symbol Organiser&lt;/a&gt; plugin. My category naming convention from the previous step made this process nice and straight forward. Now all my Symbols are clearly labeled and organised.&lt;/p&gt;
&lt;h2 id=&#34;step-2-turn-your-colors-document-into-a-library&#34;&gt;Step 2: turn your colors document into a Library&lt;/h2&gt;
&lt;p&gt;The next step is to turn your file to a Sketch Library. We will need to do this each time we want to use a Sketch file into a Library.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Sketch &amp;gt; Preferences&lt;/em&gt;, you’ll find the new Libraries tab. Click Add Library and locate your new file.&lt;/p&gt;
&lt;p&gt;Using my example from above, I made my AIN-colors document into my first Library. As my colors document is now a Library, I can nest my colors inside of other Sketch files. This is where the power of Libraries comes in. We will see how helpful this is when I create the next Library document in the system – for my icons.&lt;/p&gt;
&lt;h2 id=&#34;step-3-create-a-new-sketch-file-for-your-icons&#34;&gt;Step 3: create a new Sketch file for your icons&lt;/h2&gt;
&lt;p&gt;Next I did the same thing as I just did for my colors, but this time for icons.&lt;/p&gt;
&lt;p&gt;First create a file for your all your icons. This time I named the document AIN-icons and saved it in the same folder as my AIN-colors file. This is the start of my ‘folder of truth’—the directory that all the components in my design system will live in.&lt;/p&gt;
&lt;p&gt;I then created a 24x24px Artboard and placed the icon. I made a 24x24px transparent container below the icon shape (if your using Google’s Material Icons this will already be in place), then I inserted the brand color Symbol from my AIN-colors Library (Insert &amp;gt; AIN-colors) on top of my icon shape. Resizing the Symbol to 24x24px after.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: the purple Symbol icon in the layer view is now a link, instead of the usual rotating arrows. This means your Symbol is from an external library which your file is referencing. So don’t expect to find it on the Symbols page in your current document.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next I turned my icon shape into a mask (Ctrl + Click &amp;gt; Mask), which reveals the original icon shape below. Now our icon shape is masking the color Symbol from our Color Library.&lt;/p&gt;
&lt;p&gt;Awesome, I’ve used my first Library. That means I can now change the color of my icons throughout my system, to any color in my color Library. If I need to make changes to my AIN-color file, those changes will also occur in my icons file or anywhere else I reference my colors Library.&lt;/p&gt;
&lt;p&gt;Next, be sure to turn each icon Artboard into a Symbol, this is important if you want to use your icons document as a Library—which we do.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pro tip: When creating your icon Symbols, make sure you check “Adjust content on resize” and set “pin object to all edges on re-size”, this will ensure you icon scales, should you wish to use it at bigger or smaller sizes than the base size of 24px. Also make sure your size dimensions are locked so the whole Symbol scales correctly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I repeated this process for all icons used in the AIN design system, each set at a base size of 24px. Then I organised my Symbols using the Symbols Organizer plugin, as before.&lt;/p&gt;
&lt;h2 id=&#34;step-4-turn-your-icons-file-into-a-library&#34;&gt;Step 4: turn your icons file into a Library&lt;/h2&gt;
&lt;p&gt;This is the same process as Step 2 above, so follow that again, but this time for your icons.&lt;/p&gt;
&lt;p&gt;At this point you should have 2 Library files. In my case I have AIN-colors and AIN-icons. Now our icons are ready to use in other documents.&lt;/p&gt;
&lt;h2 id=&#34;step-5-repeat-the-process-for-your-atoms&#34;&gt;Step 5: repeat the process for your atoms&lt;/h2&gt;
&lt;p&gt;Hopefully this has been enough to help you get the gist of this workflow.&lt;/p&gt;
&lt;p&gt;Continue with your own system by creating Library files for all the different Atoms in your design system. Build your Atoms from the Primitive Library files you’ve created. Nesting them as you go. For the design system at AIN, I made Libraries for my buttons, form elements, avatars and so on, until I had a folder of truth containing all the atom level elements in our system. I can now reference these Libraries in other documents, where I’m designing even larger components of the interface and hi-fidelity mockups.&lt;/p&gt;
&lt;h3 id=&#34;updating-your-library-files&#34;&gt;Updating your Library files&lt;/h3&gt;
&lt;p&gt;Inevitably, you will at some point need to make changes to Symbols in your core Library files. Luckily this is pretty straight forward, just make your changes as normal. When changes are made, any other documents containing the updated Symbols will show an alert in the top right corner of the Sketch document which needs updating.&lt;/p&gt;
&lt;p&gt;When you see this, make sure you click it. Sketch will show you the outdated symbols and the new versions which will replace them. Click Update Symbols to sync the changes across documents. That’s it, pretty simple.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;Once you’ve built your Atoms, you’re ready to start building more complex parts of your UI; your ‘Molecules’ if you like, and following that, your ‘Organisms’. Each time making use of the Libraries you’ve created by nesting them inside one another.&lt;/p&gt;
&lt;p&gt;As your system become more complex and you build out your interface, you can utilise these Libraries you’ve created. In essence, you will now have a Sketch design system to work with, usable in any document or any project.&lt;/p&gt;
&lt;p&gt;In the second part we’ll look at putting our system to use, by building out the more complex components, for now here are a few ideas of where to go next:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible ideas for Molecules:&lt;/strong&gt; Navigation, Hero, Banner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible ideas for Organisms:&lt;/strong&gt; Cards, Media, Header, Footer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The Atomic Design Methodology is just a guideline, there are no set rules. If your navigation is complex it might be more suited to being an Organism. In that case go with it. Use the method as you see fit. Alternatively come up with a method of your own.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-libraries-across-different-devices&#34;&gt;Sharing Libraries across different devices&lt;/h3&gt;
&lt;p&gt;One thing I haven’t looked at is how Libraries work with Dropbox or Google Drive. I’m guessing this isn’t a big deal, but I haven’t tried it yet. This would be super useful for remote workers or teams looking to share design assets or work with a system across multiple devices. Perhaps you know more about this than I do?&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We just looked at using &lt;a href=&#34;https://www.sketch.com/docs/libraries/&#34;&gt;Libraries&lt;/a&gt; new for &lt;a href=&#34;https://blog.sketchapp.com/introducing-libraries-and-smooth-corners-in-sketch-47-2abc5dfc1fb3&#34;&gt;Sketch 47&lt;/a&gt; to create a modular system or component library to use in our design projects. Hopefully by now it’s clear how powerful the feature is.&lt;/p&gt;
&lt;p&gt;If you’re working in a team of designers, sharing design elements or working independently and looking for a better way to manage on-going projects then try incorporating Libraries into your workflow. Libraries are easily the biggest leap forward for Sketch users since Symbols when it comes to the challenging process of maintaining a design system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dropbox.com/home/harrycresswell/05_writing/graphics%20and%20images/medium%20articles/sketch-libraries-part-1/sample%20project%20for%20download/folder%20of%20truth&#34;&gt;Download the example project&lt;/a&gt; for reference, it includes files for colors, icons and buttons, plus a quick example project which uses these Library files. I hope it helps you to see how I’ve set things up. Bare in mind you’ll need a copy of Sketch 47 for all this stuff to work.&lt;/p&gt;
&lt;p&gt;If you found this article helpful, please share it with any friends who would benefit. Thanks for reading!&lt;/p&gt;
&lt;p&gt;Looking for part 2? You can &lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-to-build-a-better-ui-design-system-part-2-8de6cef5adc5&#34;&gt;find it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sketchapp.com/libraries-an-in-depth-look-56b147022e1f&#34;&gt;Libraries, an in depth look&lt;/a&gt; by Sketch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/ux-power-tools/sketch-libraries-how-they-work-and-the-crazy-stuff-you-can-do-with-them-fc10f142ac80&#34;&gt;Sketch Libraries&lt;/a&gt; by Jon Moore&lt;/li&gt;
&lt;li&gt;Brad Frost’s &lt;a href=&#34;http://atomicdesign.bradfrost.com/chapter-2/&#34;&gt;Atomic Design Methodology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pablo Stanley on &lt;a href=&#34;http://atomicdesign.bradfrost.com/chapter-2/&#34;&gt;Sketch Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sketchapp.com/introducing-libraries-and-smooth-corners-in-sketch-47-2abc5dfc1fb3&#34;&gt;Introducing Libraries&lt;/a&gt; by Sketch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://airbnb.design/building-a-visual-language/&#34;&gt;Airbnb: Building a Visual Language&lt;/a&gt; from Karri Saarinen&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Launching successful side projects</title>
        <link>https://azharkhan.in/launch/</link>
        <pubDate>Fri, 14 Jul 2017 21:34:41 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/launch/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Starting a new project can be a daunting process. Often we start with an idea in our head, then picture the final outcome – a finely polished product, the ideal scenario.
&lt;/p&gt;

&lt;p&gt;At this early stage it might feel like an impossible task to get there, like you’re at the foot of a mountain unable to see the summit.&lt;/p&gt;
&lt;p&gt;This is the point where a lot of us give up or start feeling overwhelmed by the task ahead. It’s so easy to feel like this. You’ve imagined up this big idea and you have no idea where to start.&lt;/p&gt;
&lt;p&gt;If you manage to get past that first stage, congratulations, you’re half way there. But maybe now you’re working tirelessly around the clock to perfect your product in time for launch. Then you launch, expecting great things to happen and an unmanageable stream of interest to come flooding in.&lt;/p&gt;
&lt;p&gt;In reality it’s often the complete opposite. Maybe this sounds familiar or at least you know someone who’s been there. I feel like we all have in some form at some point in our lives. Be it when launching new a business, working on an article, writing a book or whatever.&lt;/p&gt;
&lt;p&gt;Here’s some ideas I’ve picked up along the way, to give you the best possible chance of launching products that don’t fall flat on their face, leaving you feeling disheartened and ready to chuck it all in.&lt;/p&gt;
&lt;h2 id=&#34;get-your-ideas-out-there&#34;&gt;Get your ideas out there&lt;/h2&gt;
&lt;p&gt;If you don’t have a product yet, don’t let that stop you. Launch your ideas instead. Before you even entertain the idea of building a product, get your ideas out there in their rawest form. This is a very low risk way of proving a concept and validating the potential of your ideas.&lt;/p&gt;
&lt;p&gt;It’s the easiest way to test the water and see if people like what you’re building. The worst thing you can do is waste your time and energy working on something no one wants. If you’re building something interesting, then start telling people about it. What’s the worst that can happen? Maybe you’ll start a few more conversations and open a few more doors. Whatever it is, trust that only good things will happen.&lt;/p&gt;
&lt;h2 id=&#34;launch-before-youre-ready&#34;&gt;Launch before you’re ready&lt;/h2&gt;
&lt;p&gt;I’ve read a lot lately on why we should in fact be launching polished products from day one, but I remain firmly rooted in the camp that says &lt;strong&gt;launch your product before it’s ready&lt;/strong&gt;. If you know what’s what you will have already launched when it was just an idea in it’s infancy.&lt;/p&gt;
&lt;p&gt;As we all know, products and business are a constant work in progress, inevitably they evolve and change in time. Like our own lives, they take a great deal of iteration and fine tuning, they require us to listen to ourselves and our audience, in order to truly understand the direction to take.&lt;/p&gt;
&lt;p&gt;So if you’re waiting for the perfect time to launch, know that day will never come. If your work is never be done, then there is no perfect time to launch. Don’t make the mistake of waiting until you perfect it, before you release it. Launch now, perfect later.&lt;/p&gt;
&lt;h2 id=&#34;always-work-on-more-than-one-thing&#34;&gt;Always work on more than one thing&lt;/h2&gt;
&lt;p&gt;When I said launch ideas I didn’t mean ’launch an idea’. The cold reality is most projects will fail, so don’t go put all your energy into just one. Launch as many ideas as you can, then see which sticks. That way you won’t get hung up if one fails, as more than likely you will just shift your focus to the one with more potential.&lt;/p&gt;
&lt;p&gt;Think about how all todays great companies started for a second. A lot of them were side projects or just simple far flung ideas. At least they were nothing like they do today. Think Air Bed and Breakfast, Apple when it had the Newton logo, or when Elon Musk was laughed out of Russia when he tried to buy an ex-Soviet rocket. Who’s laughing now.&lt;/p&gt;
&lt;p&gt;Hunt down your target audience and start collecting feedback. Send out a questionnaire, a tweet, pick up the phone and find out if theres any interest in your ideas.&lt;/p&gt;
&lt;h2 id=&#34;dont-be-too-precious&#34;&gt;Don&amp;rsquo;t be too precious&lt;/h2&gt;
&lt;p&gt;9 times out of 10, someone has already had your idea, or nobody really cares to try and built it. So forget the NDA&amp;rsquo;s and secrecy, it’s all in the execution after all, not the idea. Even if someone else steals your idea, the end result will be quite different. After all, as much as we try and copy each other, human nature doesn’t allow for this level of perfection. &lt;a href=&#34;https://www.tesla.com/blog/all-our-patent-are-belong-you&#34;&gt;Did anyone build Tesla when Elon Musk released the patents?&lt;/a&gt; It takes more than an idea to build products. The more open you are, the more interest you will attract.&lt;/p&gt;
&lt;h2 id=&#34;listen-to-your-audience&#34;&gt;Listen to your audience&lt;/h2&gt;
&lt;p&gt;Always gather feedback from your audience and work with real data. Collecting data as your product evolves is invaluable. Whether it be analytics or feedback from users and customers, it’s absolutely vital. This is the best way to learn about what works and what doesn’t. If your product is out to solve problems then you ought to find out what the problems are that need solving. If you’ve build a website, you probably want to reach out to your audience to find out what they are struggling with or what new featured they would like to see added.&lt;/p&gt;
&lt;p&gt;By doing this you can safely make iterations to your product without a negative impact, because you know you’re are doing the right thing. If you do this you will find yourself creating the product that people want. No second guessing. No building products based on assumption. You know &lt;a href=&#34;https://blog.kissmetrics.com/how-netflix-uses-analytics/&#34;&gt;Netflix creates series based on the data they collect&lt;/a&gt;, now we all know why they are so successfully. This is user centered design at it’s best.  Essentially they pre-empt a shows success before they’ve even made it, because they know they have an audience which matches the criteria.&lt;/p&gt;
&lt;h2 id=&#34;always-back-up-assumptions-with-real-data&#34;&gt;Always back up assumptions with real data&lt;/h2&gt;
&lt;p&gt;Ok so I’m kind of repeating myself here but that’s only to stress the importance of data. Don’t build products you think people want. Build products you know there is already a demand for. It’s never been easier to reach an audience and ask for feedback, so before you start building your product start collecting data to work with. It can be as simple as &lt;a href=&#34;https://www.typeform.com/blog/guides/minimum-viable-product/&#34;&gt;Sending out a survey or a questionnaire&lt;/a&gt; or building &lt;a href=&#34;https://blog.bufferapp.com/idea-to-paying-customers-in-7-weeks-how-we-did-it&#34;&gt;a clever product landing page&lt;/a&gt;. It doesn’t get more straight forward than creating a new Instagram page and seeing what posts get the most engagement. Think about where your audience hangs out. Start conversations and share what you’re working on. Always try and look for quick and easy ways test your ideas before you dive in head first.&lt;/p&gt;
&lt;p&gt;As long as you get the worst, most unpolished version of your product out there first, and then improve it based on the data you collect, you will set yourself up for the best chance of success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: These thoughts were initially sparked after reading a post by Joel Gascoigne of Buffer fame (link below), many years ago. I apply this same mentality to writing. Get it out there even if it sucks. Then go back and improve it later.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tesla.com/blog/all-our-patent-are-belong-you&#34;&gt;All Our Patents Belong to You&lt;/a&gt; by Elon Musk, CEO Tesla&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.kissmetrics.com/how-netflix-uses-analytics/&#34;&gt;How Netflix uses analytics&lt;/a&gt; by Zach Bulygo, Kissmetrics blog.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.bufferapp.com/idea-to-paying-customers-in-7-weeks-how-we-did-it&#34;&gt;Idea to Paying Customers in 7 Weeks: How We Did It&lt;/a&gt; by Joel Gascoigne, CEO Buffer&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.typeform.com/blog/guides/minimum-viable-product/&#34;&gt;How to validate your next big idea&lt;/a&gt; from the Typeform Blog.&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Naming Artboards for responsive web design</title>
        <link>https://azharkhan.in/articles/artboards/</link>
        <pubDate>Sun, 02 Apr 2017 21:34:41 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/artboards/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Naming Artboards might not be the most exciting subject, but non the less, it&#39;s an important one. If it&#39;s not already, a solid Artboard naming system should be a critical part of your design process.
&lt;/p&gt;

&lt;p&gt;A year or so ago I started thinking more about how best to name Artboards in Sketch. After a fair bit of trial and error, I arrived at a particular technique which just works. &lt;strong&gt;I&amp;rsquo;ve used this method extensively for a year&lt;/strong&gt; or so now without having to revisit it.&lt;/p&gt;
&lt;p&gt;More recently, I decided to find out if anyone else had approached the subject of naming Artboards, but I found very little. Seeing as not much had been written, I figured it was time to share my method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This technique is best suited to Responsive Web Design (RWD)&lt;/strong&gt;. That being said, if your focus is on design for mobile the principles still remain the same and it should work just as well.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used this technique both for personal projects and in production working with teams. It has helped us to clean up (and stay on top of) otherwise complex and unmanageable Sketch files. Without much thought, we&amp;rsquo;re now producing &lt;strong&gt;well organised, scaleable mockups which are easy to maintain&lt;/strong&gt;. At the very least, using this technique should help you avoid the numerous headaches caused by messy Sketch files, when you’re working on big projects or as part of a team.&lt;/p&gt;
&lt;p&gt;Before I get into explaining the technique, let&amp;rsquo;s first look at why you might want to consider using a system to name your Artboards in the first place.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-organised-albion-03.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;A well organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;A well organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;maintainability&#34;&gt;Maintainability&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re designers. We like to be organised.&lt;/p&gt;
&lt;p&gt;Nobody wants to fire open a sketch file in 6 months time and find a mess of arbitrarily named Artboards. I certainly don&amp;rsquo;t, i&amp;rsquo;m sure you don&amp;rsquo;t either. &lt;strong&gt;It pays to be organised, and that goes for your Artboards too&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So the point is this; we want to be able to know exactly what state, in what stage, of what flow any given Artboard belongs to. In order to do this we need a system. A system that is quick to understand — by anyone in our team — and efficient in its implementation. No nonsense. Minimal fuss.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;ll agree with me here. The sketch file below — where the Artboards are clearly named and numbered — will be easier to manage than the Sketch file below that.&lt;/p&gt;
&lt;p&gt;This Sketch file isn&amp;rsquo;t doing anyone any favours. As this file grows it&amp;rsquo;ll become a nightmare to deal with.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-unorganised.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;A badly organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;A badly organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;scalability&#34;&gt;Scalability&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does it scale?&lt;/strong&gt; We&amp;rsquo;re not talking about front end frameworks here (let&amp;rsquo;s leave that for another one). Instead, we&amp;rsquo;re trying to solve the problem you have when you need to add in an extra step (or stage) to a flow you created a last week, let&amp;rsquo;s say. &lt;strong&gt;Does your system allow you to add in extra Artboards — anywhere in the sequence&lt;/strong&gt; — without you having to go through and rename the rest of your Artboards to maintain some sort of order?&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-organised-albion-02.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Another well organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Another well organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;communication&#34;&gt;Communication&lt;/h2&gt;
&lt;p&gt;In most cases the design process tends to involve a few more people than just one designer.&lt;/p&gt;
&lt;p&gt;So the question is; &lt;strong&gt;does the rest of our team also understand what&amp;rsquo;s going on in our Sketch file?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok, I doubt all team members will need access to our Sketch files, but they will have to see them at some point. Without a naming system, the problems will start to show when you start using a prototyping tool like Invison. Unless your working on a side project, your team, your client or whoever will need to feedback on your designs. Sure they can comment on Invision, but all too often you&amp;rsquo;ll find you need a simple way to verbally discuss an Artboard. Let&amp;rsquo;s say by using a reference code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Giving your team a quick and easy way to reference Artboards will make your life a lot easier&lt;/strong&gt;, particularly as your project grows.  We like our team right? Let&amp;rsquo;s introduce a system which is great for them and not just ourselves.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-invision.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Prefixing Artboard names with a reference short code makes discussion and organisation easier&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Prefixing Artboard names with a reference short code makes discussion and organisation easier&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;Ok enough of the reasoning, i&amp;rsquo;m sure you get the idea by now. Let&amp;rsquo;s look take a look at the system and explain how it works.&lt;/p&gt;
&lt;h2 id=&#34;how-the-system-works&#34;&gt;How the system works&lt;/h2&gt;
&lt;p&gt;Ok, the basic idea is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you use a 4 level sequence.&lt;/li&gt;
&lt;li&gt;Use both a reference code and a description.&lt;/li&gt;
&lt;li&gt;Pick a clear and descriptive, sequential structure (i.e Breakpoint, Flow, Stage, State).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-a-4-level-sequence&#34;&gt;Using a 4 level sequence&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m using &lt;strong&gt;a 4 level numerical sequence followed by a description&lt;/strong&gt;, where the purpose of the description is to explain the numerical sequence in a more verbose manor.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264882/hc/naming-artboards-in-sketch-01.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;4 level sequence — Breakpoint, Flow, Stage, State&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;4 level sequence — Breakpoint, Flow, Stage, State&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;The four levels represent the &lt;strong&gt;Breakpoint, the flow, the stage and the state&lt;/strong&gt; of our design.&lt;/p&gt;
&lt;p&gt;I will come to exactly what I mean by this a bit later, but first let&amp;rsquo;s look at why we&amp;rsquo;re using a code and a description.&lt;/p&gt;
&lt;h3 id=&#34;use-a-reference-code-and-a-description&#34;&gt;Use a reference code and a description&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Using both a code and a description makes our Artboards easy to understand and equally as easy to reference&lt;/strong&gt; — and not just by us — by the whole of our team.&lt;/p&gt;
&lt;p&gt;On it&amp;rsquo;s own, the description (let&amp;rsquo;s call it the &lt;code&gt;Unique Identifying Description&lt;/code&gt; or &lt;code&gt;UID&lt;/code&gt; for short) isn&amp;rsquo;t exactly quick to reference, and it doesn&amp;rsquo;t help us order our Artboards in any way, but it is still important as it accurately explains the contents of our Artboard.&lt;/p&gt;
&lt;p&gt;By prefixing the &lt;code&gt;UID&lt;/code&gt; with a numerical sequence, we now have a quick and easy reference code, if you like. By adding this code (let&amp;rsquo;s call it the &lt;code&gt;Unique Identifier Code&lt;/code&gt; or &lt;code&gt;UIC&lt;/code&gt; for short) we now have a clear system for ordering our Artboards. &lt;strong&gt;This is particularly useful when we start using tools like Invision&lt;/strong&gt; and you or another team member needs to pin point a particular Artboard to discuss.&lt;/p&gt;
&lt;p&gt;Likewise, using the &lt;code&gt;UIC&lt;/code&gt; alone won&amp;rsquo;t make much sense — it&amp;rsquo;s not descriptive of the Artboards contents. But add the two together and you have a quick shortcode (the &lt;code&gt;UIC&lt;/code&gt;) used for reference purposes, and a more descriptive text version (the &lt;code&gt;UID&lt;/code&gt;), which helps us further identify the design on our Artboard.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264891/hc/naming-artboards-in-sketch-02.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Using a unique identifying code and description&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Using a unique identifying code and description&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;the-sequential-structure&#34;&gt;The sequential structure&lt;/h2&gt;
&lt;p&gt;Ok. So why use four levels, isn&amp;rsquo;t that over kill? Surely one level is enough? Can&amp;rsquo;t we just use something like &lt;code&gt;1 - homepage&lt;/code&gt;, &lt;code&gt;2 - checkout&lt;/code&gt; etc, and be done with it? And, &lt;strong&gt;what exactly does the Breakpoint, Flow, Stage and State represent?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at that now — it will help us understand why having four levels in the sequence is important.&lt;/p&gt;
&lt;h3 id=&#34;the-breakpoint&#34;&gt;The Breakpoint&lt;/h3&gt;
&lt;p&gt;In RWD, the Breakpoint is very important, so we will consider this first. &lt;strong&gt;The breakpoint is the screen resolution you are designing for&lt;/strong&gt;, in case you didn&amp;rsquo;t know. Think &lt;code&gt;1200px&lt;/code&gt;, &lt;code&gt;960px&lt;/code&gt;, &lt;code&gt;768px&lt;/code&gt;, &lt;code&gt;320px&lt;/code&gt; or if you prefer Desktop HD, Desktop, Tablet, Mobile etc. This should be the deciding factor that determines what Artboard size you choose for your design.&lt;/p&gt;
&lt;p&gt;If you are design a responsive website you&amp;rsquo;re design will most likely change at different screen sizes. We&amp;rsquo;ll need a different Artboard to show how the design looks for each size.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say our design isn&amp;rsquo;t a mockup of the large desktop view (like in the example above), but in fact a regular desktop view or a mockup of our website at a breakpoint of &lt;code&gt;960px&lt;/code&gt;. In this case we would create a new Artboard and change the breakpoint in our Artboard name to reflect that.&lt;/p&gt;
&lt;p&gt;In the example below you can see the Breakpoint is &lt;code&gt;960&lt;/code&gt;. this, of course, stands for &lt;code&gt;960px&lt;/code&gt; or our desktop size. Suggesting the Artboard shows how our website will look on a Desktop browser.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-03.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Breaking down the identifier code&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Breaking down the identifier code&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h3 id=&#34;the-flow&#34;&gt;The Flow&lt;/h3&gt;
&lt;p&gt;Flow is second in the sequence. This is &lt;strong&gt;the particular user flow you are designing&lt;/strong&gt;. An obvious example would be, let&amp;rsquo;s say, the &lt;code&gt;Checkout&lt;/code&gt; flow. Think UX here. &lt;strong&gt;A flow is the journey a user takes around a site to complete a particular action&lt;/strong&gt;. A flow will most likely consist of a number of pages or stages, if you like.&lt;/p&gt;
&lt;p&gt;Ok, so you&amp;rsquo;ve got the hand of it now.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-04.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The checkout (or second) flow at a breakpoint of 960px&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The checkout (or second) flow at a breakpoint of 960px&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This tells us that the Artboard shows our design at a breakpoint of &lt;code&gt;960px&lt;/code&gt; (i.e desktop) and the design is part of the checkout flow. Which is the second flow in our website. Notice the second number in the sequence has now changed to 2.&lt;/p&gt;
&lt;h3 id=&#34;the-stage&#34;&gt;The Stage&lt;/h3&gt;
&lt;p&gt;Third in the sequence is the stage. &lt;strong&gt;The stage represents the part or step within in a flow&lt;/strong&gt;. If we think back to our example &lt;code&gt;checkout&lt;/code&gt; flow, a familiar stage in this flow might be &lt;code&gt;payment details&lt;/code&gt;, as opposed to &lt;code&gt;shipping details&lt;/code&gt;, or &lt;code&gt;checkout complete&lt;/code&gt;. These are all stages, which might make up our &lt;code&gt;checkout&lt;/code&gt; flow.&lt;/p&gt;
&lt;p&gt;Updating our example above might result in something like this:&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-05.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The payment details stage in the checkout flow&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The payment details stage in the checkout flow&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This Artboard shows our design for the &lt;code&gt;Payment Details&lt;/code&gt; stage in the &lt;code&gt;checkout&lt;/code&gt; flow of our website. And this is how our design should look on a desktop monitor, or there abouts.&lt;/p&gt;
&lt;h3 id=&#34;the-state&#34;&gt;The State&lt;/h3&gt;
&lt;p&gt;Last in the four level sequence is the state. &lt;strong&gt;States are used to show different versions of the same stage in a flow&lt;/strong&gt;. For example, you might need to design certain error states in a form. Perhaps a particular user action changes the look of a specific stage, and you need to show this in your design. A success notification would be a good example. Or if we think back to our example; when a user enters the incorrect card details. We might need to design the error message for this.&lt;/p&gt;
&lt;p&gt;Think of the state as the same page — if you like — as the stage, only the users action has modified the view of the stage in some way. So for this case we would add a new Artboard into our sequence and use it to mockup the state.&lt;/p&gt;
&lt;p&gt;If we update our example above, it might result in this:&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-06.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Form errors on the checkout stage&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Form errors on the checkout stage&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This tells us that &lt;code&gt;Form error&lt;/code&gt; is the second state we have designed this particular state in the flow (the payment details stage which is part of the checkout flow). In this case the first state was the normal page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: having said all this, I don&amp;rsquo;t always use states. The reason being, I tend to work with a UI kit or front end framework, where the states have already been determined. If this is the case, (as you&amp;rsquo;ve probably noticed in the example) I will just leave a 1 on the end of the sequence. This suggests that the current Artboard is the first and only state.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In some other cases I use the last number in the sequence not for a state but as a quick and dirty way to fudge in an extra Artboard, half way through a sequence.&lt;/p&gt;
&lt;p&gt;This happens quite a lot when you return to past projects and you need to add Artboard into the flow. It&amp;rsquo;s hacky but it will prevent you from having to go through and re-jig all your other Artboard names to make your Artboard sequence run in order.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-07.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The text description explains the identifier code in more detail&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The text description explains the identifier code in more detail&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Ok, this technique might seem a little over the top for a small project, but if like me, you work on big on-going websites and web apps then then having an Artboard naming system is 100% the way to go. It will save your skin 10 times over.&lt;/p&gt;
&lt;p&gt;Whatever system you choose to use, the most important thing is that &lt;strong&gt;your Artboards names are descriptive of the design that is on it&lt;/strong&gt;. Now this might sound obvious, but you&amp;rsquo;d be surprised. I&amp;rsquo;ve seen some strange Artboards names before now, which give you no indication of what the design consists of and are totally illegible to a team. Furthermore, &lt;strong&gt;Artboards should be quick and easy to understand and reference&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always discuss a new system with your team&lt;/strong&gt;, so that everyone understands it and is on the same page. Above all this will allow you to communicate any design decision you make effectively and with minimal fuss.&lt;/p&gt;
&lt;p&gt;If you have any thoughts on this approach or ways to improve it, i’d love to hear from you. Likewise any questions I will do my best to answer.&lt;/p&gt;
&lt;p&gt;Heres to a stress free time with Artboards in Sketch.  &lt;code&gt;#artboardmaster&lt;/code&gt;&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Send form data to an inbox using Zapier</title>
        <link>https://azharkhan.in/articles/form-data-with-zapier/</link>
        <pubDate>Mon, 06 Mar 2017 21:34:41 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/form-data-with-zapier/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Have you ever felt overwhelmed by the amount of code it takes to get a simple contact form working on a website?
&lt;/p&gt;

&lt;p&gt;Part of the reason I built my site static was because I didn’t want the hassle of having a to deal with a database, a server and PHP. Dealing with all that stuff adds a layer of complexity to a website, particularly when it comes to processing form data, if it’s not a necessity I’d rather avoid it.&lt;/p&gt;
&lt;p&gt;But where do you even start with processing form data on a static site?&lt;/p&gt;
&lt;p&gt;At times the options can feel limited, like the only way is to pay for a form provider and embed a form into your site. Whilst there’s nothing wrong with this solution you might want to consider another way, which you have full control over and you don’t have to pay for.&lt;/p&gt;
&lt;p class=&#34;Message&#34;&gt;
    
I now use &lt;a href=&#34;https://azharkhan.in/articles/forms-with-netlify/&#34;&gt;Netlify to handle form submissions&lt;/a&gt; on this site. Saying that, this Zapier solution still works great if you’re not using Netlify.

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://azharkhan.in/contact/&#34;&gt;On this site&lt;/a&gt; I’m using &lt;a href=&#34;https://zapier.com/&#34;&gt;Zapier&lt;/a&gt; to collect form data and send it directly to my email. No servers, no database, no PHP. In this article we’ll look at how you can use the same technique to build a simple contact form for your own website, using Webhooks to collect data submitted and automatically send it to you in an email.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you’re building a static website with a generator like Jekyll, Hugo, Middleman or even just in vanilla HTML, then this is a great solution to get a form working on your site with minimal fuss.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The good news is it’s pretty simple to implement and it’s free.&lt;/p&gt;
&lt;h2 id=&#34;why-zapier&#34;&gt;Why Zapier&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zapier.com/&#34;&gt;Zapier&lt;/a&gt; is an awesome tool which allows you to connect different apps in order to automate tasks. Using an automation tool like Zapier can save you a ton of time and make boring admin tasks a whole lot more fun.&lt;/p&gt;
&lt;p&gt;Zapier recommends several workflows you can use to integrate different apps, but there’s really no limitation to what you can do with it. Your only limitation is what you can think up, so you can get quite creative with what you do with it.&lt;/p&gt;
&lt;h3 id=&#34;what-are-webhooks&#34;&gt;What are Webhooks&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://zapier.com/zapbook/webhook/&#34;&gt;Webhooks&lt;/a&gt; are a powerful Zapier feature which collect &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt; data and send it to a URL. You can then process this data pretty much however you like.&lt;/p&gt;
&lt;p&gt;If you are a developer then you might be familiar with endpoints. Webhooks are pretty much the same thing. If you have no idea what I’m talking about, don’t worry, it’s really quite straight forward to implement.&lt;/p&gt;
&lt;h3 id=&#34;why-not-use-a-static-form-provider-instead&#34;&gt;Why not use a static form provider instead&lt;/h3&gt;
&lt;p&gt;I initially looked into a few different ways to process form data on static sites before deciding to go with Zapier. The main two I looked at were FormKeep and Formspree.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://formkeep.com/&#34;&gt;FormKeep&lt;/a&gt; looks like a great solution, but it’s not cheap. Formkeep might be worth considering for client projects but for a personal website I’d rather keep my costs to a minimum.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://formspree.io/&#34;&gt;Formspree&lt;/a&gt; is another great option. One I really quite like in fact. It’s free and does exactly what we are trying to achieve, it is probably even quicker to implement. Although Formspree and our Zapier method are very similar, in the end I choose to go with Zapier for a couple of reasons:&lt;/p&gt;
&lt;h3 id=&#34;familiarity&#34;&gt;Familiarity&lt;/h3&gt;
&lt;p&gt;I kept coming back to Zapier because it’s familiar. I already use Zapier for several other automated sequences in my business — for social media, for my email list and a whole bunch of other stuff. It’s also super quick and easy to set up automation connecting different apps.&lt;/p&gt;
&lt;h3 id=&#34;flexibility&#34;&gt;Flexibility&lt;/h3&gt;
&lt;p&gt;Zapier is the most flexible solution.&lt;/p&gt;
&lt;p&gt;Although the form we’re about to build is a very simple one, if we wanted to add further steps to process our form data, then Zapier makes this easy.&lt;/p&gt;
&lt;p&gt;Say for example, we wanted to send the data via an email and then afterwards add the form submitter to our mailing list (pretty cool right?). We can do this easily with &lt;a href=&#34;https://zapier.com/learn/getting-started-guide/multi-step-zaps/&#34;&gt;multi-step Zaps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, let’s say, we wanted to send an automated email response, or send a “Getting started with the service” PDF when someone fills out our form. Zapier makes this possible too.&lt;/p&gt;
&lt;p&gt;With Zapier our form can trigger any series of automated occurrences we want and connect our form up to a variety of different apps.&lt;/p&gt;
&lt;p&gt;As cool as this stuff is, it’s not something we’ll be covering right now. But hopefully it gives you an idea of the power and possibilities Zapier can bring to a contact form.&lt;/p&gt;
&lt;h2 id=&#34;building-the-form&#34;&gt;Building the form&lt;/h2&gt;
&lt;p&gt;We’re almost ready to start building our form, but first lets take a moment to break down what we would like to do. Here are the steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a simple HTML form for our static website.&lt;/li&gt;
&lt;li&gt;Collect the data submitted and store it in a URL using a Zapier Webhook.&lt;/li&gt;
&lt;li&gt;Use Zapier to automagically send ourselves the data in an email, any time someone submits the form.&lt;/li&gt;
&lt;li&gt;Finally, redirect the user to a success page after they complete the form.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we get started, you might want to &lt;a href=&#34;http://harrycresswell.co.uk/tutorials/zapier-contact/&#34;&gt;jump over here&lt;/a&gt; to see the end result.&lt;/p&gt;
&lt;h2 id=&#34;step-1-writing-the-html&#34;&gt;Step 1: Writing the HTML&lt;/h2&gt;
&lt;p&gt;Let’s take a look at the HTML we’re going to use to build the form.&lt;/p&gt;
&lt;p class=&#34;Message&#34;&gt;
    If you’d rather skip ahead you can get hold of the source code for this tutorial on &lt;a href=&#34;https://github.com/harrycresswell/zapier-contact-form&#34;&gt;Github&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;For the purpose of this tutorial our form will have two input fields — one for a name and one for an email address — and a button to submit the data.&lt;/p&gt;
&lt;p&gt;The end result should look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your name?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your email address?&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s break this down. First make sure you give your form a suitable &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’re using &lt;code&gt;id=&amp;quot;myForm&amp;quot;&lt;/code&gt; here to keep things nice and simple. We’ll need this later when we use some Ajax to redirect the page.&lt;/p&gt;
&lt;p&gt;Next, make sure you add an &lt;code&gt;action&lt;/code&gt; attribute. Leave it blank for now, we will come back to this later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally add &lt;code&gt;type=&amp;quot;POST&amp;quot;&lt;/code&gt;. This is our HTTP request which submits the data to Zapier to be processed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;adding-name-attributes&#34;&gt;Adding name attributes&lt;/h3&gt;
&lt;p&gt;Remember to assign a &lt;code&gt;name=&amp;quot;&amp;quot;&lt;/code&gt; attribute to all the form elements you want to collect data from &lt;em&gt;(that pretty much means all of them)&lt;/em&gt;. You can name them however you like, but just make sure they are there.&lt;/p&gt;
&lt;p&gt;Let’s add one for our name input and one for our email input:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your name?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here I’ve used &lt;code&gt;name=&amp;quot;full-name&amp;quot;&lt;/code&gt; and &lt;code&gt;email=&amp;quot;email-address&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your email address?&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Zapier will look out for the &lt;code&gt;name=&amp;quot;&amp;quot;&lt;/code&gt; attribute when it tries to grab the values inputed by the user, so it’s important you remember to add them or your form won’t work.&lt;/p&gt;
&lt;h3 id=&#34;add-a-submit-button&#34;&gt;Add a submit button&lt;/h3&gt;
&lt;p&gt;Finally we’ll need to add a very basic button, so the user can submit their data. Let’s give our button an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;Form-submit&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest should be fairly obvious — &lt;code&gt;type=&amp;quot;submit&amp;quot;&lt;/code&gt; declares what type of &lt;code&gt;input&lt;/code&gt; we would like to use, and the value declares the text shown on our button. In this case &lt;code&gt;Submit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I’ve removed all CSS classes used to style the form for this tutorial, however you would probably want to add some classes to style your form elements otherwise they won’t look all that pretty.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-setting-up-zapier-to-collect-the-data&#34;&gt;Step 2: Setting up Zapier to collect the data&lt;/h2&gt;
&lt;p&gt;If you haven’t already got a Zapier account, then before you do anything else you will need to &lt;a href=&#34;https://zapier.com/&#34;&gt;sign up for a free account&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;create-a-new-zap&#34;&gt;Create a new Zap&lt;/h3&gt;
&lt;p&gt;Next you will need to make a new Zap. Give your new Zap a name, then search for the &lt;strong&gt;Webhooks by Zapier&lt;/strong&gt; trigger.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-create-a-zap.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-create-a-zap.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-create-a-zap.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-create-a-zap.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Create a Zap&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;Make sure you select &lt;strong&gt;Catch Hook&lt;/strong&gt;, then hit &lt;strong&gt;save and continue&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As we want to collect all the data submitted in our form, we’ll leave &lt;strong&gt;Pick off a child key&lt;/strong&gt; blank and then hit &lt;strong&gt;continue&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988543/hc/zapier-contact-form-webhook-url.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988543/hc/zapier-contact-form-webhook-url.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988543/hc/zapier-contact-form-webhook-url.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988543/hc/zapier-contact-form-webhook-url.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Grab your webhook URL&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;Zapier then generates a custom webhook URL. Copy this URL to your clipboard. We will need to add it in our form so that Zapier can store any data submitted.&lt;/p&gt;
&lt;h3 id=&#34;update-form-with-webhook-url-and-test&#34;&gt;Update form with webhook URL and test&lt;/h3&gt;
&lt;p&gt;Head back to your form and replace the &lt;strong&gt;#&lt;/strong&gt; symbol in &lt;code&gt;action=&amp;quot;#&amp;quot;&lt;/code&gt; with the Webhook URL Zapier just generated for you.&lt;/p&gt;
&lt;p&gt;Your form should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://hooks.zapier.com/hooks/catch/1707140/msf6zi/&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your name?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your email address?&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to test our form to see if it’s working. Fill out your form and hit submit.&lt;/p&gt;
&lt;p&gt;If all went well your browser window should be redirected to the Zapier Webhook URL. You’ll see a string of data. Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;attempt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;58b94713-f62a-4f1b-a418-9a4a992774c0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;a0139409-2c05-4adb-a33c-111dd0e3e895&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Nx5Ew2eUJxPBY1p5&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let’s head back to Zapier to see if our data was received.&lt;/p&gt;
&lt;p&gt;Hit &lt;strong&gt;Ok I did this&lt;/strong&gt; to test the connection. You should now see a nice green banner confirming your test was successful. Great job!&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988545/hc/zapier-contact-form-webhook-succesful.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988545/hc/zapier-contact-form-webhook-succesful.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988545/hc/zapier-contact-form-webhook-succesful.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988545/hc/zapier-contact-form-webhook-succesful.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Test Succesfull. Woohoo!&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;step-3-automate-an-email-response&#34;&gt;Step 3: Automate an email response&lt;/h2&gt;
&lt;p&gt;By now we should have a fully functional form, which sends the data to Zapier each time our form is submitted.&lt;/p&gt;
&lt;p&gt;The next step is to automate an email to our inbox, which sends every time someone fills out our form. We want this email to contain the name and email address of the person who submitted our form. Let’s do this now.&lt;/p&gt;
&lt;h3 id=&#34;create-an-outbound-email-action&#34;&gt;Create an outbound email action&lt;/h3&gt;
&lt;p&gt;Search for &lt;strong&gt;Email by Zapier&lt;/strong&gt; in the &amp;ldquo;Choose an action app&amp;rdquo; step.&lt;/p&gt;
&lt;p&gt;Hit &lt;strong&gt;save and continue&lt;/strong&gt; on Send an outbound email. This will create your action step sequence and bring up the email template where we can decide what our automated email will say.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-add-outbound-email-action-step.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-add-outbound-email-action-step.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-add-outbound-email-action-step.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988549/hc/zapier-contact-form-add-outbound-email-action-step.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Add outbound email action step&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h3 id=&#34;build-the-email-template&#34;&gt;Build the email template&lt;/h3&gt;
&lt;p&gt;This is the part where we add the data Zapier received via the webhook to our automated email.&lt;/p&gt;
&lt;p&gt;We will need to specify an email address which we would like the data sent to. You’ll most likely want to make this your own email address.&lt;/p&gt;
&lt;p&gt;Then we want to create a subject line and pull the data into the body of the email.&lt;/p&gt;
&lt;p&gt;Hit continue once you are happy. Zapier will summarise your email template then fire off a test.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988550/hc/zapier-contact-form-set-up-email-template.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988550/hc/zapier-contact-form-set-up-email-template.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988550/hc/zapier-contact-form-set-up-email-template.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1531988550/hc/zapier-contact-form-set-up-email-template.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Build the automated email template&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h3 id=&#34;check-your-inbox-for-the-email&#34;&gt;Check your inbox for the email&lt;/h3&gt;
&lt;p&gt;Now go check your inbox. You should have received an email containing the data, nicely laid out in the template you just set up.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/zapier-contact-form-automated-email-inbox.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Zapier is now sending us an automated email&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Zapier is now sending us an automated email&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;You might want to filter your automated emails from Zapier by marking them with a label. This way you can easily identify where they have come from. I’ve called my label Zapier and coloured it orange so it’s easy to spot.&lt;/p&gt;
&lt;p&gt;At this point everything should be set up correctly, so that Zapier sends an automated email to your inbox when someone fills out your form.&lt;/p&gt;
&lt;h2 id=&#34;step-4-using-ajax-to-redirect-the-url&#34;&gt;Step 4: Using Ajax to redirect the URL&lt;/h2&gt;
&lt;p&gt;The final step is to redirect the user when they fill out our form.&lt;/p&gt;
&lt;p&gt;Right now, anyone who submits the form is redirected to a nasty Webhook URL showing the string on data.&lt;/p&gt;
&lt;p&gt;Ideally we’d like to be able to tell the person who submits the form that their information was submitted successfully, and keep them on our website, rather than directing them away from it.&lt;/p&gt;
&lt;p&gt;We can do this with a few lines of Ajax.&lt;/p&gt;
&lt;p&gt;Before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag in the footer of your page, load a copy of jQuery.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Load jquery --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Beneath that you will need the following Javascript:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// POST form data to zapier on submit
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#myForm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;preventDefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YOUR_ZAPIER_WEBHOOK_URL_GOES_HERE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;#myForm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// Redirect to another success page
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://google.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure you replace the Webhook URL with the one Zapier generated for you and the redirect URL with the page you want the submitted form to redirect to. For this example I’ve just used Google which is probably not what you want.&lt;/p&gt;
&lt;p&gt;Finally, let’s head back to our form and remove the &lt;code&gt;action=&amp;quot;&amp;quot;&lt;/code&gt; and &lt;code&gt;type=&amp;quot;&amp;quot;&lt;/code&gt; attributes from the html. We don’t need this anymore as Ajax is now taking care of posting our form data to Zapier.&lt;/p&gt;
&lt;p&gt;The HTML for our form should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your name?&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your email address?&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;In this article we’ve looked at submitting form data to an email address using Zapier. This is an ideal low cost solution for static sites, where you want to avoid writing server side code or paying for a form provider. There are of course ways we can make this better.&lt;/p&gt;
&lt;h3 id=&#34;validation&#34;&gt;Validation&lt;/h3&gt;
&lt;p&gt;Something I haven’t tackled in this article is form validation. Validating your form with success or error prompts would require some extra Javascript and a bit more HTML markup, but it&amp;rsquo;s perfectly possible.&lt;/p&gt;
&lt;p&gt;However you might find a very basic bit of validation is enough. By adding the &lt;code&gt;required&lt;/code&gt; attribute to the end of any required form elements, you can ensure the form submitter is warned of those fields that are required, in order to submit the form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will prevent a user from submitting your form without inputting the necessary data.&lt;/p&gt;
&lt;h3 id=&#34;accessibility&#34;&gt;Accessibility&lt;/h3&gt;
&lt;p&gt;To make sure your forms are accessible to everyone and to prevent your site from getting penalised by Google, you will want to add labels to your form elements. Make sure you add a &lt;code&gt;for&lt;/code&gt; attribute equal to the &lt;code&gt;id&lt;/code&gt; attribute of the related element to each label. This will bind them together.&lt;/p&gt;
&lt;p&gt;With this in mind, our might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myForm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-name&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your name?&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-email&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Email Address&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-email&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;What&amp;#39;s your email address?&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;u-visually-hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice I’m using a class called &lt;code&gt;u-visually-hidden&lt;/code&gt; to hide the button label from everyone except screen readers and crawlers.&lt;/p&gt;
&lt;h3 id=&#34;adding-more-fields&#34;&gt;Adding more fields&lt;/h3&gt;
&lt;p&gt;Although I only used a first name and an email address in this example, you might want to process a whole lot more data with your form. Just remember to include a &lt;code&gt;name&lt;/code&gt; attribute on every form element in order for Zapier to catch the data.&lt;/p&gt;
&lt;p&gt;I hope this has been a helpful introduction into using Zapier to process form data on static sites. You can find all the resources I used for this technique below.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;If you have any questions or problems with this method then &lt;a href=&#34;https://twitter.com/harrycresswell&#34;&gt;drop me a tweet&lt;/a&gt;, I’d be happy to help.&lt;/p&gt;
&lt;h3 id=&#34;further-reading&#34;&gt;Further reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zapier.com/blog/how-use-zapier-webhooks/&#34;&gt;How to use Webhooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discuss.gohugo.io/t/is-it-possible-to-add-a-contact-form-to-a-site/1550&#34;&gt;A Hugo thread on static contact forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pjrvs.com/a/onboarding/&#34;&gt;Paul Jarvis&amp;rsquo; article on user onboarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4744751/how-do-i-redirect-with-javascript&#34;&gt;Page redirects using JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
  </channel>
</rss>