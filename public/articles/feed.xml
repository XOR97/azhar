<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azhar Khan - Articles</title>
    <link>https://azharkhan.in/articles/</link>
    <description>Azhar Khan – Articles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>azhar932@icloud.com (Azhar Khan)</managingEditor>
    <webMaster>azhar932@icloud.com (Azhar Khan)</webMaster>
    <lastBuildDate>Thu, 30 Apr 2020 11:08:58 +0100</lastBuildDate>
    
        <atom:link href="https://azharkhan.in/articles/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
      <item>
        <title>Accessibility check your writing on macOS</title>
        <link>https://azharkhan.in/articles/accessibility-checking-writing-mac-os/</link>
        <pubDate>Thu, 30 Apr 2020 11:08:58 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/accessibility-checking-writing-mac-os/</guid>
        <description>&lt;p&gt;Did you know that your macOS machine will read any document out loud to you. Until only a few weeks ago, I honestly had no idea about most of the accessibility features Mac ships with.&lt;/p&gt;
&lt;p&gt;I found myself watching &lt;a href=&#34;https://www.youtube.com/watch?v=TiP7aantnvE&amp;amp;t=248s&#34;&gt;Molly Burke&lt;/a&gt;, a partially sighted Youtuber, explain how she uses her laptop on a daily basis. Molly, like many, depends on a screen reader and accessibility features to do simple things that most of us take for granted, like surfing the internet.&lt;/p&gt;
&lt;p&gt;Not long after that I heard Amruta Ranade mention a macOS tool called ”text to speech” in her video on &lt;a href=&#34;https://dev.to/amrutaranade/how-to-write-a-blog-post-the-four-drafts-method-1k7b&#34;&gt;The four-drafts&lt;/a&gt; method. In short, Amruta uses Text to Speech to listen for any awkward phrasing or weird sentence structure in her writing.&lt;/p&gt;
&lt;p&gt;This totally blew my mind. Why wasn’t I doing this? After giving it some thought, I had one of those real ”ahah” moments.&lt;/p&gt;
&lt;p&gt;It went something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your writing doesn’t make sense when you hear it read by a screen reader, then it’s simply not accessible to everyone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I’ve written it down it seems kinda obvious. But I’m ashamed to say it something I’ve failed to appreciate until very recently. I’m sure I’m not the only one either.&lt;/p&gt;
&lt;p&gt;So I want to show you how to change that.&lt;/p&gt;
&lt;p&gt;Text to Speech is super easy to set up. You don’t need to install any fancy software, you just need to be a Mac user running Mac Sierra or above.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-text-to-speech&#34;&gt;Setting up Text to Speech&lt;/h2&gt;
&lt;p&gt;Here’s the 5 steps to setting up Text to Speech on your Mac, so you can cross check your writing with accessibility in mind, and make sure it’s easy to read for as many people as possible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;System Preferences&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Accessibility&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Now select &lt;strong&gt;Speech&lt;/strong&gt; from the left panel&lt;/li&gt;
&lt;li&gt;Check the box that says &lt;em&gt;Speak selected text when the key is pressed&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Default key should be set to &lt;code&gt;Option+Esc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can select the text you want macOS to read back to you, and press &lt;code&gt;Option + Esc&lt;/code&gt; to activate.&lt;/p&gt;
&lt;p&gt;That’s it. You should now here you text read back to you.&lt;/p&gt;
&lt;p&gt;This should work pretty much with any text you select. Whether you’re using a writing app or in a browser, it works the same.&lt;/p&gt;
&lt;h2 id=&#34;customising-your-reader-voice&#34;&gt;Customising your reader voice&lt;/h2&gt;
&lt;p&gt;There are a ton of different system voices to choose from. Just head back to the &lt;strong&gt;Speech&lt;/strong&gt; panel and choose a new one from the &lt;em&gt;system voice&lt;/em&gt; select options.&lt;/p&gt;
&lt;p&gt;If you’re not happy with the installed choices, then select &lt;em&gt;customize&lt;/em&gt; in the dropdown list and download a new one based on your prefered country and accent.&lt;/p&gt;
&lt;p&gt;It’s a good bit of fun listening to all the different voices and finding one you like.&lt;/p&gt;
&lt;p&gt;As a native English speaker, the English voice feels a bit too robotic for my liking. I guess I know it too well. So I usually stick with an accent I’m less familiar with, as it feels a bit more natural.&lt;/p&gt;
&lt;p&gt;Right now my favourite is Scottish Fiona. But you might find Chinese Ting-Ting or Danish Magnus more to your liking.&lt;/p&gt;
&lt;h2 id=&#34;customising-speaking-rate&#34;&gt;Customising speaking rate&lt;/h2&gt;
&lt;p&gt;To change the speed of your speaker voice, you will find a slider where you can adjust the speaking rate from slow to fast.&lt;/p&gt;
&lt;p&gt;To me, some voices feel much slower than others, so I find myself adjusting the speed accordingly, depending on which voice I choose.&lt;/p&gt;
&lt;p&gt;As you get more familiar with your chosen voice, no doubt you’ll want to speed things up a bit.&lt;/p&gt;
&lt;p&gt;Ok, that’s all from me for now. Go have some fun with it.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techuntold.com/convert-text-to-speech-mac/&#34;&gt;How to Convert Text to Speech on Mac&lt;/a&gt; by Hemant Mendiratta&lt;/li&gt;
&lt;li&gt;Molly Burke &lt;a href=&#34;https://www.youtube.com/watch?v=TiP7aantnvE&amp;amp;t=248s&#34;&gt;How I use technology as a blind person&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/amrutaranade/how-to-write-a-blog-post-the-four-drafts-method-1k7b&#34;&gt;How to write a blog post: The four-drafts method&lt;/a&gt; from Amruta Ranade&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Listing page content in Hugo</title>
        <link>https://azharkhan.in/articles/listing-page-content-in-hugo/</link>
        <pubDate>Wed, 15 Apr 2020 10:50:11 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/listing-page-content-in-hugo/</guid>
        <description>&lt;p&gt;In Hugo, &lt;a href=&#34;https://bepsays.com/en/2016/12/19/hugo-018/&#34;&gt;everything is a page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common thing to do with these pages is make lists of them. By doing so you make your content easily accessible to readers.&lt;/p&gt;
&lt;p&gt;A list of pages, at the very least, might look like a collection of page titles, which hyperlink to the pages themselves.&lt;/p&gt;
&lt;p&gt;In plain old HTML that might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #2&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #3&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that’s just the basics. You can create a list of any data associated with your content.&lt;/p&gt;
&lt;p&gt;In Hugo, unfortunately there’s no one size fits all approach to rending content.&lt;/p&gt;
&lt;p&gt;The context of the code you write changes depending on which template you’re working in. This can often produce unexpected results.&lt;/p&gt;
&lt;p&gt;In this piece we’ll learn about the specific functions and variables you can use to create lists of different content types and look at how context effects the content rendered on a page.&lt;/p&gt;
&lt;p&gt;Let’s start by considering how we create lists of data, from a technical perspective, when using a static site generator like Hugo.&lt;/p&gt;
&lt;h2 id=&#34;what-does-it-mean-to-list-content&#34;&gt;What does it mean to list content?&lt;/h2&gt;
&lt;p&gt;When we programatically create a list of anything, essentially all we’re doing is iterating over a map of data.&lt;/p&gt;
&lt;p&gt;In other words, looping through an array – a list of items – which, in other programming languages, you might do with a for loop, or a map function.&lt;/p&gt;
&lt;p&gt;In Hugo, in the context of pages, you do this with the range function.&lt;/p&gt;
&lt;h2 id=&#34;understanding-range&#34;&gt;Understanding range&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/range/&#34;&gt;range&lt;/a&gt; function provides an easy way to iterate over a map, array or slice of data. Think of it as grabbing a collection of pages, or a “range” of pages.&lt;/p&gt;
&lt;p&gt;Range is fundamental to templating in Hugo and it’s the only function we’ll need to return a lists of pages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But using range alone won&amp;rsquo;t return any data.&lt;/p&gt;
&lt;p&gt;To get hold of our pages, we need to pass a &lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;page variable&lt;/a&gt; to the range function. This variable will give you access to different collections of content, depending on which variable you pass in and which template you write the code in.&lt;/p&gt;
&lt;p&gt;There’s quite a few different variables you can choose from, but for now, let’s focus on some of the main ones.&lt;/p&gt;
&lt;h2 id=&#34;combining-site-and-pages&#34;&gt;Combining .Site and .Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/variables/site/&#34;&gt;.Site&lt;/a&gt; gives you access to global values in your templates.&lt;/p&gt;
&lt;p&gt;So regardless of where you are writing your code, with &lt;code&gt;.Site&lt;/code&gt; you can get hold of all site-wide variables. These are either defined in your site’s configuration or directly built-in to Hugo.&lt;/p&gt;
&lt;p&gt;In the interest of listing page content, we can combine &lt;code&gt;.Site&lt;/code&gt; with a built-in variable called &lt;code&gt;.Pages&lt;/code&gt; to access all pages across our website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Hugo docs describe &lt;a href=&#34;https://gohugo.io/variables/site/#site-pages&#34;&gt;.Site.Pages&lt;/a&gt; as a super set of everything.&lt;/p&gt;
&lt;p&gt;This means by passing &lt;code&gt;.Site.Pages&lt;/code&gt; to the range function we can grab data associated with every single page on our site. It will return regular pages, collections, taxonomies, and so on.&lt;/p&gt;
&lt;p&gt;In the case above, we’re rendering all page titles, with a permalink to those pages.&lt;/p&gt;
&lt;p&gt;A few things to note.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; doesn’t care if you store your content in subdirectories, for example posts in &lt;code&gt;./content/posts&lt;/code&gt; or pages inside &lt;code&gt;./content/pages&lt;/code&gt;. It will render all content types regardless of your content directory structure.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; also doesn’t care which template you use it in. The object returned will always be the same.&lt;/p&gt;
&lt;h2 id=&#34;pages-without-site&#34;&gt;.Pages without .Site&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.Pages&lt;/code&gt; can be used without &lt;code&gt;.Site&lt;/code&gt;, but the content returned will be different, depending on where you use it.&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;.Site&lt;/code&gt; gives you access to the global values in your templates, &lt;code&gt;.Pages&lt;/code&gt; only returns a collection of regular pages and only first-level section pages under the current list page.&lt;/p&gt;
&lt;p&gt;To make sense of this let’s turn now to list templates, and talk a bit about what they are and how you can use them.&lt;/p&gt;
&lt;h2 id=&#34;the-list-template&#34;&gt;The list template&lt;/h2&gt;
&lt;p&gt;List templates are key part of rendering specific collections of pages. For the sake of clarity, let’s call these ”lists” of pages.&lt;/p&gt;
&lt;p&gt;The only &lt;code&gt;list.html&lt;/code&gt; template you need to render a list of pages in Hugo is kept at &lt;code&gt;.layouts/_default/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This acts as the default template for all collections, sections, taxonomies and terms. It’s the first list template Hugo will look for when it tries to render lists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/_default/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we’re no longer using &lt;code&gt;.Site.Pages&lt;/code&gt;, but just &lt;code&gt;.Pages&lt;/code&gt;. It will soon become clear why.&lt;/p&gt;
&lt;p&gt;Now let’s say you have a content collection at &lt;code&gt;./content/posts&lt;/code&gt; and you want to create a specific list template for this collection, which renders the posts on the &lt;code&gt;/posts&lt;/code&gt; page of your website.&lt;/p&gt;
&lt;p&gt;To do this you might want to override the default list template by adding another list template, using the exact same code, but this time located at &lt;code&gt;./layouts/posts/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/posts/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the location of this list template mirrors the content directory structure.&lt;/p&gt;
&lt;p&gt;Now we can customise the template however we like and Hugo will only return content from the corresponding folder at &lt;code&gt;./content/posts&lt;/code&gt;. Whilst all other pages will continue to use the default list template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/posts/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;intro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Summary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s important to note that if we used &lt;code&gt;.Site.Pages&lt;/code&gt;, as we have done previously, Hugo will return an object of all our site pages, which isn’t what we want in this case.&lt;/p&gt;
&lt;p&gt;We’re specifically interesed in the collection of post pages, so we use the &lt;code&gt;.Page&lt;/code&gt; variable in a new list template, kept in a directory which mirrors our content structure.&lt;/p&gt;
&lt;p&gt;Now we’re starting to see how context effects the results of the code we write.&lt;/p&gt;
&lt;p&gt;Let’s look at another example to make this absolutely clear.&lt;/p&gt;
&lt;p&gt;Say we have another template with the exact same code at &lt;code&gt;./layouts/notes/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/notes/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time &lt;code&gt;list.html&lt;/code&gt; will only return content from the corresponding content folder located at &lt;code&gt;./content/notes&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We can see now that the context of &lt;code&gt;.Pages&lt;/code&gt; changes, depending on the location of your list template. And it’s something to keep in mind, as it can be confusing at first.&lt;/p&gt;
&lt;p&gt;Ok, so how does Hugo know which template to use?&lt;/p&gt;
&lt;p&gt;Hugo picks the template it uses to render content based on something called the lookup order.&lt;/p&gt;
&lt;p&gt;Let’s get into that next.&lt;/p&gt;
&lt;h2 id=&#34;the-lookup-order&#34;&gt;The lookup order&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34;&gt;The lookup order&lt;/a&gt; is how Hugo decides which layout template to use for a given page, based on a well defined order of priority.&lt;/p&gt;
&lt;p&gt;The default list template (that one at &lt;code&gt;./layouts/_default/list.html&lt;/code&gt;) will serve all content, unless it is overridden by another template, with a higher priority in the lookup order.&lt;/p&gt;
&lt;p&gt;This is what is happening with our list template at &lt;code&gt;./layouts/posts/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Understanding the lookup order, and how context changes, will help you understand which variables to use in certain situations and why the same variable can produce different results.&lt;/p&gt;
&lt;p&gt;Ok, let’s move on to a few other interesting things we can do.&lt;/p&gt;
&lt;h2 id=&#34;using-the-first-function&#34;&gt;Using the first function&lt;/h2&gt;
&lt;p&gt;Now let’s try something a bit different, this time with &lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;the first function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can add the first function to range, to reduce the array of data returned to only the first N elements. Where N is the value you set.&lt;/p&gt;
&lt;p&gt;Think of first as an argument which you pass in alongside your page variables.&lt;/p&gt;
&lt;p&gt;Here we’re returning the first 10 pages across all our content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if you want to loop through a specific collection of content? Let’s use our example of a collection posts stored inside &lt;code&gt;./content/posts&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;Let’s say now we want to list our posts on the &lt;code&gt;index.html&lt;/code&gt; page. We can’t just use &lt;code&gt;.Pages&lt;/code&gt; in this case, as we’re no longer in our post specific &lt;code&gt;list.html&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;.Site.RegularPages&lt;/code&gt; is helpful.&lt;/p&gt;
&lt;h2 id=&#34;understanding-siteregularpages&#34;&gt;Understanding .Site.RegularPages&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.Site.RegularPages&lt;/code&gt; variable is similar to &lt;code&gt;.Site.Pages&lt;/code&gt;, but instead of returning all pages, it returns all collections.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RegularPages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Hugo, collections are known as &lt;a href=&#34;https://gohugo.io/content-management/types/&#34;&gt;Content Types&lt;/a&gt;, which basically means anything stored within the &lt;code&gt;./content&lt;/code&gt; directory or inside subdirectories within.&lt;/p&gt;
&lt;p&gt;To give you an example, on this site I have three collections of content. &lt;code&gt;./content/articles&lt;/code&gt;, &lt;code&gt;./content/notes&lt;/code&gt; and &lt;code&gt;./content/projects&lt;/code&gt;. Each directory contains pages created in markdown.&lt;/p&gt;
&lt;p&gt;Here, the &lt;code&gt;.Site.RegularPages&lt;/code&gt; variable would return all pages from across these three collections, and ignore any else, such as pages inside &lt;code&gt;./content/pages&lt;/code&gt; or taxonomy pages.&lt;/p&gt;
&lt;p&gt;But what if you only want to loop through your &lt;code&gt;./content/articles&lt;/code&gt; collection? How might you handle this kind of behaviour?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.Type&lt;/code&gt; variable is useful in the scenario.&lt;/p&gt;
&lt;h2 id=&#34;filtering-pages-by-type&#34;&gt;Filtering pages by .Type&lt;/h2&gt;
&lt;p&gt;As per the docs; “Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path.” So what does this mean, exactly?&lt;/p&gt;
&lt;p&gt;It means that if we want to render specific content types, we have two options.&lt;/p&gt;
&lt;p&gt;We can either a), set &lt;code&gt;type&lt;/code&gt; inline in the front matter of our pages, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;My&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or b), make directories within &lt;code&gt;./content&lt;/code&gt; to mirror how we want to filter our content, as we’ve already seen in the earlier examples.&lt;/p&gt;
&lt;p&gt;So for our post example, this approach means we have to keep our posts inside &lt;code&gt;./content/post&lt;/code&gt; for it to work.&lt;/p&gt;
&lt;p&gt;Regardless of whether you go with a) the frontmatter method or b) the directory structure method, you use the same code to render the content.&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we combine range with the conditional &lt;a href=&#34;https://gohugo.io/functions/where/&#34;&gt;where&lt;/a&gt; function. This allows us to filter our array to only the elements containing a matching value of “type” &lt;em&gt;post&lt;/em&gt;. In this case, only our posts will be returned.&lt;/p&gt;
&lt;p&gt;This is a useful snippet. The frontmatter approach is particular useful when you want to group together a selection of pages, perhaps as featured content.&lt;/p&gt;
&lt;p&gt;You’ll also find this approach useful when you want to render specific content outside of the context of a list template, for example on the homepage of your website, as we’ve imagined here.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a quick introduction to the functions and variables in Hugo that help you list different pages of content, in different places on a Hugo website.&lt;/p&gt;
&lt;p&gt;At times it can be confusing to know which variable to use in a given situation to effectively render the content you wish. But with some practice it will start to sink in.&lt;/p&gt;
&lt;p&gt;I hope this has made things a bit clearer and given you a few ideas for your next project. We’ve only just scratched the surface, but what we’ve covered should help get you off to a good start, with a good idea of some of what’s possible.&lt;/p&gt;
&lt;p&gt;As always, if you spot any mistakes or something doesn’t look quite right, please let me know and I will make sure I make changes.&lt;/p&gt;
&lt;p&gt;I’m aiming to keep this post updated with new examples and scenarios, as I come across them and use them in my own projects. In the meantime, here’s a list of articles which should help give you a better understanding of what we’ve covered.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/range/&#34;&gt;The Range Function&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/lists/&#34;&gt;Lists of content in Hugo&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;Page Variables&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regisphilibert.com/blog/2018/02/hugo-the-scope-the-context-and-the-dot/&#34;&gt;Hugo, the scope, the context and the dot&lt;/a&gt; from Regis Philibert&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;The First function&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/types&#34;&gt;Content types&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/where/&#34;&gt;The Where function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%EF%BF%BChttps://gohugo.io/templates/homepage/%EF%BF%BC&#34;&gt;Homepage Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/different-page-types-without-organising-into-subdirectories/558/3&#34;&gt;Different page types without organising into subdirectories&lt;/a&gt; from Stiobhart&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Performant syntax highlighting in Hugo</title>
        <link>https://azharkhan.in/articles/performant-syntax-highlighting-in-hugo/</link>
        <pubDate>Mon, 02 Dec 2019 12:56:26 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/performant-syntax-highlighting-in-hugo/</guid>
        <description>&lt;p&gt;The quickest way to use syntax highlighting in Hugo is with &lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;Chroma&lt;/a&gt;, the default syntax highlighter. Without any config, you can wrap a code block in the built in &lt;code&gt;highlight&lt;/code&gt; Shortcode, pass in the language as a variable and you’re code will be highlighted:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;lt; highlight go &amp;gt;}
	// Html code to highlight
{&amp;lt; / highlight &amp;gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note: to render the example above on the page I have used single curly braces. You will need to use double curly braces.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The advantage of using Chroma over other JavaScript libraries like &lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; or &lt;a href=&#34;https://prismjs.com/&#34;&gt;Prisma.js&lt;/a&gt; is that it’s built right into Hugo and doesn’t require any external dependencies. This make it extremely fast and reliable.&lt;/p&gt;
&lt;p&gt;Out of the box, however, Chroma doesn’t give us much control over the style of our highlighted code. To change that all we need to do is add one line of code to the top level of our &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Enable for syntax highlighting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;pygmentsUseClasses&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: It’s important you add this line to the top level and not under &lt;code&gt;[params]&lt;/code&gt; if you want it to work. Something like this should do it:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;baseurl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:1313/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;theme=&lt;span class=&#34;s2&#34;&gt;&amp;#34;theme name&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;languageCode&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;title&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your site title&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable for syntax highlighting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;pygmentsUseClasses&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-option-for-code-fencing&#34;&gt;Adding option for code fencing&lt;/h2&gt;
&lt;p&gt;It is also possible to add syntax highlighting to code within code fences. To enable this add the following to your &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;pygmentsCodefences&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can wrap your code in two sets of triple backticks (```) and specify the language after the opening set to highlight the code correctly. Make sure you check the &lt;a href=&#34;https://github.com/alecthomas/chroma#supported-languages&#34;&gt;list of supported langauges&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(```) yaml
pygmentsUseClasses = true
pygmentsCodeFences = true
(```)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note: Make sure you omit the parentheses as seen above. This is just to show you the code without it rendering.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now you can highlight any syntax inside of code fences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;customising-your-syntax-theme&#34;&gt;Customising your syntax theme&lt;/h2&gt;
&lt;p&gt;To change the theme of your syntax highlighting generate &lt;code&gt;chromastyles&lt;/code&gt;. Then set the name of the theme you want using the &lt;code&gt;--style&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;From the command line run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo gen chromastyles --style=lovelace &amp;gt; syntax.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will generate the &lt;code&gt;syntax.css&lt;/code&gt; file at the root of your project.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://xyproto.github.io/splash/docs/&#34;&gt;https://xyproto.github.io/splash/docs/&lt;/a&gt; for available themes. You can also run &lt;code&gt;hugo gen chromastyles -h&lt;/code&gt; to see more options.&lt;/p&gt;
&lt;p&gt;Don’t forget to link to the stylesheet from the &lt;!-- raw HTML omitted --&gt; of your document otherwise your theme won’t work!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Columnar In-Memory Analytics using Arrow</title>
        <link>https://azharkhan.in/articles/columnar-in-memory-analytics-using-arrow/</link>
        <pubDate>Sun, 27 Jan 2019 14:10:29 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/columnar-in-memory-analytics-using-arrow/</guid>
        <description>&lt;p&gt;Folks, there is a new library in town that is taking the data engineering community by storm.&lt;/p&gt;
&lt;p&gt;Introducing, Apache Arrow&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Arrow is a cross-language development platform for in-memory data. It specifies a standardized language-independent
columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Arrow isn’t a standalone piece of software but rather a component used to accelerate analytics within a particular system and to allow Arrow-enabled systems to exchange data with low overhead. It is sufficiently flexible to support most complex data models.&lt;/p&gt;
&lt;p&gt;In simple words, It facilitates communication between many components, for example, reading a parquet file with Python (pandas) and transforming to a Spark dataframe, Falcon Data Visualization or Cassandra without worrying about conversion.&lt;/p&gt;
&lt;p&gt;For the Python and R communities, Arrow is extremely important, as data interoperability has been one of the biggest roadblocks to tighter integration with big data systems (which largely run on the JVM).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/1*Q-5NKsHXBZ5glJmi_ifRpg.png&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;
&lt;p&gt;A good question is to ask how does the data look like in memory? Well, Apache Arrow takes advantages of a columnar buffer to reduce IO and accelerate analytical processing performance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://arrow.apache.org/img/simd.png&#34; alt=&#34;image2&#34;&gt;&lt;/p&gt;
&lt;p&gt;In our case, we will use the pyarrow library to execute some basic codes and check some features. In order to install, we have two options using conda or pip commands*.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install -c conda-forge pyarrow
or
pip install pyarrow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;*It’s recommended to use conda in a Python 3 environment.&lt;/p&gt;
&lt;h2 id=&#34;apache-arrow-with-pandas-local-file-system&#34;&gt;Apache Arrow with Pandas (Local File System)&lt;/h2&gt;
&lt;h3 id=&#34;converting-pandas-dataframe-to-apache-arrow-table&#34;&gt;Converting Pandas Dataframe to Apache Arrow Table&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
import pandas as pd
import pyarrow as pa
df = pd.DataFrame({&#39;one&#39;: [20, np.nan, 2.5],&#39;two&#39;: [&#39;january&#39;, &#39;february&#39;, &#39;march&#39;],&#39;three&#39;: [True, False, True]},index=list(&#39;abc&#39;))
table = pa.Table.from_pandas(df)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;pyarrow-table-to-pandas-data-frame&#34;&gt;Pyarrow Table to Pandas Data Frame&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;df_new = table.to_pandas()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;read-csv&#34;&gt;Read CSV&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from pyarrow import csv
fn = ‘data/demo.csv’
table = csv.read_csv(fn)
df = table.to_pandas()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;writing-a-parquet-file-from-apache-arrow&#34;&gt;Writing a parquet file from Apache Arrow&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import pyarrow.parquet as pq
pq.write_table(table, &#39;example.parquet&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;reading-a-parquet-file&#34;&gt;Reading a parquet file&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;table2 = pq.read_table(‘example.parquet’)
table2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;reading-some-columns-from-a-parquet-file&#34;&gt;Reading some columns from a parquet file&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;table2 = pq.read_table(&#39;example.parquet&#39;, columns=[&#39;one&#39;, &#39;three&#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;reading-from-partitioned-datasets&#34;&gt;Reading from Partitioned Datasets&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;dataset = pq.ParquetDataset(‘dataset_name_directory/’)
table = dataset.read()
table
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;transforming-parquet-file-into-a-pandas-dataframe&#34;&gt;Transforming Parquet file into a Pandas DataFrame&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pdf = pq.read_pandas(&#39;example.parquet&#39;, columns=[&#39;two&#39;]).to_pandas()
pdf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;avoiding-pandas-index&#34;&gt;Avoiding pandas index&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;table = pa.Table.from_pandas(df, preserve_index=False)
pq.write_table(table, &#39;example_noindex.parquet&#39;)
t = pq.read_table(&#39;example_noindex.parquet&#39;)
t.to_pandas()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;check-metadata&#34;&gt;Check metadata&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;parquet_file = pq.ParquetFile(‘example.parquet’)
parquet_file.metadata
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-data-schema&#34;&gt;See data schema&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;parquet_file.schema
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;timestamp&#34;&gt;Timestamp&lt;/h3&gt;
&lt;p&gt;Remember Pandas use nanoseconds so you can truncate in milliseconds for compatibility.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pq.write_table(table, where, coerce_timestamps=&#39;ms&#39;)
pq.write_table(table, where, coerce_timestamps=&#39;ms&#39;, allow_truncated_timestamps=True)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;compression&#34;&gt;Compression&lt;/h3&gt;
&lt;p&gt;By default, Apache arrow uses snappy compression (not so compressed but easier access), although other codecs are allowed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pq.write_table(table, where, compression=&#39;snappy&#39;)
pq.write_table(table, where, compression=&#39;gzip&#39;)
pq.write_table(table, where, compression=&#39;brotli&#39;)
pq.write_table(table, where, compression=&#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, It’s possible to use more than one compression in a table&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pq.write_table(table, ‘example_diffcompr.parquet’, compression={b’one’: ‘snappy’, b’two’: ‘gzip’})
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;write-a-partitioned-parquet-table&#34;&gt;Write a partitioned Parquet table&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;df = pd.DataFrame({‘one’: [1, 2.5, 3],
                   ‘two’: [‘Peru’, ‘Brasil’, ‘Canada’],
                   ‘three’: [True, False, True]},
                   index=list(‘abc’))
table = pa.Table.from_pandas(df)
pq.write_to_dataset(table, root_path=’dataset_name’,partition_cols=[‘one’, ‘two’])
&lt;/code&gt;&lt;/pre&gt;</description>
      </item>
      
    
      
      <item>
        <title>SEO in Hugo: Unique, Accurate Page Titles</title>
        <link>https://azharkhan.in/articles/hugo-seo-accurate-page-titles/</link>
        <pubDate>Fri, 02 Nov 2018 10:32:26 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-seo-accurate-page-titles/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;According to &lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=en#uniquepagetitles&#34;&gt;Google’s SEO starter guide&lt;/a&gt;, “Each page on your site should ideally have a unique title, which helps Google know how the page is distinct from the others on your site.”&lt;/p&gt;
&lt;p&gt;At all costs avoid default, vague titles which have no relation to the content on the page and never use a single title across all pages on your site.&lt;/p&gt;
&lt;p&gt;This piece is for those building sites with Hugo. It introduces a common mistake, often seen in &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo starter themes&lt;/a&gt; – where the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag renders generic page titles – and offers a simple concise solution to get your pages into Google’s good books and ranking properly.&lt;/p&gt;
&lt;h2 id=&#34;the-big-mistake-with-page-titles&#34;&gt;The big mistake with page titles&lt;/h2&gt;
&lt;p&gt;When building a theme for your new Hugo site, you might be tempted to dig through the &lt;code&gt;_default&lt;/code&gt; templates of a Hugo starter theme for some tips on where to begin.&lt;/p&gt;
&lt;p&gt;No bad thing, it’s a great way to learn, but approach this method with caution, starter themes can also contain bad practices.&lt;/p&gt;
&lt;p&gt;In many cases, a quick look inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; will often reveal the following seemly simple but potentially harmful code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ $.Site.Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here?&lt;/p&gt;
&lt;p&gt;Here we’re taking the title of our site directly from our &lt;code&gt;config.toml&lt;/code&gt; file and applying it to each and every page on our site. That means every page on our site now has the same name.&lt;/p&gt;
&lt;p&gt;In terms of SEO this is bad news, as we now know.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-elegant-solution&#34;&gt;A simple elegant solution&lt;/h2&gt;
&lt;p&gt;A better solution would be to use the conditional &lt;code&gt;if&lt;/code&gt; statement and reach for the title set in the front matter of each page when possible. We can make this happen with something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .IsHome -}}
  &amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt;
{{- else -}}
  &amp;lt;title&amp;gt;{{ .Title }} – {{ .Site.Title }}&amp;lt;/title&amp;gt;
{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference here is that &lt;code&gt;{{ .Site.Title }}&lt;/code&gt; is only used if the current page is the homepage.&lt;/p&gt;
&lt;p&gt;For every other page, we use the page title specified in the page front matter, which should almost always be unique and therefore good for SEO.&lt;/p&gt;
&lt;p&gt;For an alternative solution try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ if .Page.Title }}{{ .Page.Title }} - {{ end }}{{ .Site.Title }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should be fairly self explanatory and produces the same results, in an arguably cleaner single line of code.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;For an added SEO boost, try applying the same thinking to your page descriptions. According to Google, “A page&amp;rsquo;s description meta tag gives Google and other search engines a summary of what the page is about. Description meta tags are important because Google might use them as snippets for your pages”.&lt;/p&gt;
&lt;p&gt;The simple solution would be to define the description in the front matter of each page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hugo SEO: Unique, Accurate page titles&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Get an SEO boost on your website pages with descriptive page titles which make search engines happy&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Harry Cresswell&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then call the &lt;code&gt;Parmeter&lt;/code&gt; in a meta tag in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ $.Param &amp;quot;description&amp;quot; }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There you have it. A couple of simple fixes to optimise your web pages and improve your chances of ranking higher in search engines.&lt;/p&gt;
&lt;p&gt;I hope this has been a helpful read.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=en#uniquepagetitles&#34;&gt;Create unique, accurate page titles&lt;/a&gt; from Google’s SEO Starter Guide&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.el-chavez.me/2015/11/26/go-hugo-seo/&#34;&gt;Go Hugo SEO&lt;/a&gt; from MT Chavez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rankbio.com&#34;&gt;Rank Bio&lt;/a&gt; - test your websites for best practices&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Working with Data in Hugo</title>
        <link>https://azharkhan.in/articles/data-hugo/</link>
        <pubDate>Wed, 18 Jul 2018 14:35:58 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/data-hugo/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    This articles demonstrates a practical use case of working with data files in Hugo. It will show you where to store your data and how to call your data into a template in order to render it on your site.
&lt;/p&gt;

&lt;p&gt;Whilst front-end prototyping the design of a &lt;a href=&#34;http://www.harrycresswell.co.uk/client/ain/ain-filters/&#34;&gt;system of content search filters&lt;/a&gt;, I found myself in a situation where I needed to list the major countries in each inhabited Continent. The countries would take the form of checkboxes in a filter dropdown.&lt;/p&gt;
&lt;p&gt;A basic solution might be to list each country manually in an unordered list on the page. But that sound like a time consuming task and unnecessarily repetitive. No one wants a cluttered template with a verbose amount of code.&lt;/p&gt;
&lt;p&gt;Ideally I could abstract the data away from the page and leave my template clean and concise. Instead, storing the data in a separate data file which I could call in my template wherever needed.&lt;/p&gt;
&lt;p&gt;Enter Data files.&lt;/p&gt;
&lt;h2 id=&#34;data-files-and-the-data-folder&#34;&gt;Data files and the data folder&lt;/h2&gt;
&lt;p&gt;In Hugo, &lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;data files&lt;/a&gt; are stored in the data folder. Think of the data folder as a mini database where you can keep lists of data to use in your pages.&lt;/p&gt;
&lt;p&gt;Inside the data folder you can organise files into any number of sub-folders.&lt;/p&gt;
&lt;p&gt;Hugo accepts &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt; and &lt;code&gt;TOML&lt;/code&gt; files, just like the front matter in your posts and pages.&lt;/p&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data structure&lt;/h3&gt;
&lt;p&gt;In my data folder I have a sub-folder called &lt;code&gt;countries&lt;/code&gt; and inside that folder I have a another folder called &lt;code&gt;continent&lt;/code&gt; where I keep 5 &lt;code&gt;YAML&lt;/code&gt; files: &lt;code&gt;africaa.yaml&lt;/code&gt;, &lt;code&gt;asia.yaml&lt;/code&gt;, &lt;code&gt;europe.yaml&lt;/code&gt;, &lt;code&gt;northamerica.yaml&lt;/code&gt; and &lt;code&gt;southamerica.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For all the geography nerds out there; I combined Australia with Asia as it didn’t make sense to have a data file containing one country.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;└── countries
    └── continent
        ├── africa.yaml
        ├── asia.yaml
        ├── europe.yaml
        └── northamerica.yaml
      	└── southamerica.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I called the top level sub-folder countries so the data type was clearly organised and easy to understand.&lt;/p&gt;
&lt;h3 id=&#34;inside-the-data-file&#34;&gt;Inside the data file&lt;/h3&gt;
&lt;p&gt;Inside each continent &lt;code&gt;YAML&lt;/code&gt; file, I listed the countries in that continent under &lt;code&gt;country&lt;/code&gt;, using an object &lt;code&gt;name&lt;/code&gt; where the value is the country name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Algeria&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Angola&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Cameroon&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Comoros&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Gambia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ghana&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ivory&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Coast&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Kenya&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Lesotho&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Madagascar&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Malawi&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Mauritius&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Morocco&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Nigeria&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Namibia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Senegal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Sierra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Leone&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;South&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Africa&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Swaziland&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tanzania&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tunisia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Uganda&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Zambia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Zimbabwe&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-the-data&#34;&gt;Using the data&lt;/h3&gt;
&lt;p&gt;By using the &lt;a href=&#34;https://gohugo.io/functions/range/#readout&#34;&gt;range&lt;/a&gt; function you can loop through the content, accessing the data folder with &lt;code&gt;.Site.Data&lt;/code&gt; followed by the name of the file and the nested data structure.&lt;/p&gt;
&lt;p&gt;To retrieve data from my &lt;code&gt;africa.yaml&lt;/code&gt; data file I used the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;countries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;continent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;africa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;country&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;material-icons&amp;#34;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;{{ .name }}&lt;/code&gt; prints out the name of the country.&lt;/p&gt;
&lt;p&gt;To see this in action &lt;a href=&#34;http://www.harrycresswell.co.uk/client/ain/ain-filters/&#34;&gt;check out this prototype&lt;/a&gt; and hit the filter button above the search called &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are applying this to your own data be sure to update &lt;code&gt;countries.continent.africa.country&lt;/code&gt; with your specific data structure.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Data files in Hugo make working with large amounts of data a whole lot less cumbersome. Abstracting repetitive code away from templates keeps file clean and lightweight and managing content a somewhat easier task.&lt;/p&gt;
&lt;p&gt;For more on data in Hugo head to the docs, where you can learn about “data-driven content” data features, which lets you load any &lt;code&gt;JSON&lt;/code&gt; or &lt;code&gt;CSV&lt;/code&gt; file from nearly any resource.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://novelist.xyz/tech/hugo-data-files/&#34;&gt;How to use Data Files in Hugo: an example&lt;/a&gt; by Peter Y. Chuang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;Data Templates&lt;/a&gt; fro the Hugo Docs&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Static site form handling with Netlify</title>
        <link>https://azharkhan.in/articles/forms-with-netlify/</link>
        <pubDate>Thu, 05 Apr 2018 09:49:36 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/forms-with-netlify/</guid>
        <description>&lt;p&gt;&lt;em&gt;Note: This tutorial requires you have a static site which you deploy using &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;. If you don‘t use Netlify, read on as you might well be convinced to switch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Chances are you might have read &lt;a href=&#34;https://azharkhan.in/articles/form-data-with-zapier/&#34;&gt;Using Zapier to send form data&lt;/a&gt;. I used Zapier to handle form submissions on the previous incarnation of this site. And it worked great. I was very happy with the fact I could by-pass subscription based static site form services like &lt;a href=&#34;https://formspree.io/&#34;&gt;Formspree&lt;/a&gt; and &lt;a href=&#34;https://formkeep.com/&#34;&gt;Formkeep&lt;/a&gt;, just by using Zapier Webhooks and a bit of AJAX to tidy things up.&lt;/p&gt;
&lt;p&gt;If you’re also running a static site and wondering how best to go about collecting form submissions without a backend, then &lt;a href=&#34;https://azharkhan.in/articles/form-data-with-zapier/&#34;&gt;I’d highly recommend using Zapier&lt;/a&gt;, everytime. There is however one exception, and the reason I made the switch. And that reason is Netlify.&lt;/p&gt;
&lt;p&gt;If you use Netlify to deploy your static site, there’s an even easier way to handle your form submissions. This article looks at how to get set up.&lt;/p&gt;
&lt;p&gt;In case you’re interested in seeing how this form we’re about to build works, then head over to &lt;a href=&#34;https://azharkhan.in/contact/&#34;&gt;my contact page&lt;/a&gt; for a quick demo. Feel free to test it out.&lt;/p&gt;
&lt;h2 id=&#34;why-use-netlify-for-your-form-submissions&#34;&gt;Why use Netlify for your form submissions&lt;/h2&gt;
&lt;p&gt;Before we get into the code, let’s run through why Netlify is an awesome option for static form handling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need for any API calls&lt;/li&gt;
&lt;li&gt;No JS required&lt;/li&gt;
&lt;li&gt;Less code&lt;/li&gt;
&lt;li&gt;Built-in email and slack notification options for form submissions&lt;/li&gt;
&lt;li&gt;Optional integrate with &lt;a href=&#34;https://zapier.com/&#34;&gt;Zapier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Receive file upload submissions&lt;/li&gt;
&lt;li&gt;Export form submissions to a CSV file&lt;/li&gt;
&lt;li&gt;Automatic spam filtering, reCAPTCHA 2 and honeypot field options&lt;/li&gt;
&lt;li&gt;Optional AJAX submissions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a fair amount of cool stuff we can do with Netlify Forms already.&lt;/p&gt;
&lt;h2 id=&#34;so-whats-the-deal&#34;&gt;So What’s the deal?&lt;/h2&gt;
&lt;p&gt;Netlify’s ’Forms Free’ includes up to 100 form submissions per month, if you hit the limit, Netlify will upgrade you to ’Forms Pro’, which includes 1000 submissions per month. Perfect for small business and personal websites.&lt;/p&gt;
&lt;p&gt;With that said, let’s take a look at how to set up a form to work with Netlify. I’ll be using my own setup as an example.&lt;/p&gt;
&lt;h2 id=&#34;how-i-set-up-netlify-to-handle-forms&#34;&gt;How I set up Netlify to handle forms&lt;/h2&gt;
&lt;p&gt;First, I created a new page on my site to host my new contact form. From the command line that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd site
hugo new page/contact.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice I’m using &lt;code&gt;.html&lt;/code&gt; and not &lt;code&gt;.md&lt;/code&gt; as my contact page will contain the HTML needed for my form. Using the &lt;code&gt;.html&lt;/code&gt; extension for pages is perfectly valid in Hugo.&lt;/p&gt;
&lt;p&gt;Inside my &lt;code&gt;contact.html&lt;/code&gt; page I added some basic markup for my form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your name?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your full name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your email address?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What your message?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your message...&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: I’ve removed class names to make it easier to read, you will want to add some in order to style your form.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For Netlify to start receiving my form submissions, it’s as simple as adding the &lt;code&gt;netlify&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Next go ahead and add a &lt;code&gt;name&lt;/code&gt; attribute, so Netlify knows what to call the form in the Netlify web app. If you have more than one form on your site you will need to use unique names. I’ve called mine &lt;code&gt;name=&amp;quot;contact&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Once you push your new form page to your production site, Netlify will start receiving form submissions.&lt;/p&gt;
&lt;h2 id=&#34;extending-your-form-for-spam-filtering&#34;&gt;Extending your form for Spam filtering&lt;/h2&gt;
&lt;p&gt;Netlify runs a spam filter by default when a form is submitted, but you might want to add an extra layer of security by using a “Honeypot” field. This will keep bots from hammering your inbox with junk submissions.&lt;/p&gt;
&lt;p&gt;In the words of Netlify:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;”‘Honeypot‘ fields are hidden form fields that lure bot users into completing a field that human users can’t see. A form submitted with a completed honeypot field can be rejected as spam, because only a bot would see and complete the field.“&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sounds like a good idea to me, so let’s get this set up now.&lt;/p&gt;
&lt;p&gt;All you need to do is add &lt;code&gt;netlify-honeypot=&amp;quot;bot-field&amp;quot;&lt;/code&gt; to your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, then add a new input field in your form to catch those bots, &lt;code&gt;name=&amp;quot;bot-field&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With that done your form should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify-honeypot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;“u-visually-hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Don’t fill this out if you&amp;#39;re human: &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your name?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your full name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your email address?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What your message?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your message...&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see I’ve added &lt;code&gt;class=&amp;quot;u-visually-hidden&amp;quot;&lt;/code&gt; to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag containing the “Honeypot” field. This is a reusable utility class which will hide the field with some simple CSS. Now bots will find the field but reader won’t.&lt;/p&gt;
&lt;p&gt;At this point Netlify is set up to collect form data and any spam will be filter out. The final thing to do is add some finesse with a custom page redirect.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-success-page&#34;&gt;Adding a custom success page&lt;/h2&gt;
&lt;p&gt;By default, when someone completes your form, they will see a generically styled success message with a link back to the form page, that’s fine but you might want something custom.&lt;/p&gt;
&lt;p&gt;I chose to replace this with &lt;a href=&#34;https://azharkhan.in/success/&#34;&gt;a success page&lt;/a&gt;, to inform visitors their message was submitted successfully and to say thanks.&lt;/p&gt;
&lt;p&gt;To do something similar create a new page, for example &lt;code&gt;/success/&lt;/code&gt; and add an &lt;code&gt;action&lt;/code&gt; attribute to your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;If all’s well and good, your form tag should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify-honeypot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/success/&amp;#34;&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure the path is relative, and starts with a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Great, now we have a success page. The final thing to do is set up a way to receive our form submissions.&lt;/p&gt;
&lt;h2 id=&#34;receiving-form-submissions&#34;&gt;Receiving form submissions&lt;/h2&gt;
&lt;p&gt;Netlify has a few different notification options for form submissions, including email and Slack notifications.&lt;/p&gt;
&lt;p&gt;This is handled from within the Netlify web app. You can find the options in &lt;strong&gt;Settings &amp;gt; Forms &amp;gt; Form notifications&lt;/strong&gt;. Select the &lt;strong&gt;Add notification&lt;/strong&gt; dropdown to see your options. I chose to keep things simple for now, receiving a notification by email.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this article we’ve looked at setting up static site form submissions using Netlify. If you’ve followed along you should now have a functioning contact form on your site which sends notifications to your email.&lt;/p&gt;
&lt;p&gt;From here you might consider adding more fields to your form or building a success alert using AJAX and ditching the success page.&lt;/p&gt;
&lt;p&gt;Perhaps you’re thinking about adding a few automation steps with Zapier, to send your submission data to other apps in your workflow. Whether that be updating your mailing list in Mailchimp or adding data to a google sheet. The possibilities are almost endless so I’ll leave you to decide where to take it next.&lt;/p&gt;
&lt;p&gt;Finally, if you haven’t seen it already, make sure you check out the article below from the Netlify blog, which goes into more detail on what can be done with form data using Netlify.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/docs/form-handling/&#34;&gt;Netlify Docs: Form Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Type Emoji’s on Mac shortcut</title>
        <link>https://azharkhan.in/articles/emoji-mac/</link>
        <pubDate>Mon, 26 Mar 2018 13:28:18 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/emoji-mac/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    It’s hard to avoid Emojis. Whether you like using them on not they’re a great way to help visually communicate your thoughts and ideas.
&lt;/p&gt;

&lt;p&gt;We all know how to use Emoji’s on a phone but do you know how to access the Emoji panel on a mac?&lt;/p&gt;
&lt;p&gt;The Mac Emoji keyboard shortcut is really easy to remember, whilst your cursor is in type mode, use the shortcut: &lt;code&gt;Command + Control + Spacebar&lt;/code&gt; to bring up the Emoji character panel.&lt;/p&gt;
&lt;p&gt;Then select the Emoji to type it. The panel works exactly the way it does on an iPhone. Easy peasy! 🤙&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Extracting key phrases from BIG (text) data</title>
        <link>https://azharkhan.in/articles/extracting-key-phrases-from-big-text-data/</link>
        <pubDate>Wed, 21 Mar 2018 14:10:29 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/extracting-key-phrases-from-big-text-data/</guid>
        <description>&lt;p&gt;I often apply natural language processing for purposes of automatically extracting structured information from unstructured (text) datasets. One such task is the extraction of important topical words and phrases from documents, commonly known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Terminology_extraction&#34;&gt;terminology extraction&lt;/a&gt; or &lt;strong&gt;automatic keyphrase extraction&lt;/strong&gt;. Keyphrases provide a concise description of a document’s content; they are useful for document categorization, clustering, indexing, search, and summarization; quantifying semantic similarity with other documents; as well as conceptualizing particular knowledge domains.&lt;/p&gt;
&lt;p&gt;Despite wide applicability and much research, keyphrase extraction suffers from poor performance relative to many other core NLP tasks, partly because there’s no objectively “correct” set of keyphrases for a given document. While human-labeled keyphrases are generally considered to be the gold standard, humans disagree about what that standard is! As a general rule of thumb, keyphrases should be relevant to one or more of a document’s major topics, and the set of keyphrases describing a document should provide good coverage of all major topics. (They should also be understandable and grammatical, of course.) The fundamental difficulty lies in determining which keyphrases are the most relevant and provide the best coverage. As described in &lt;a href=&#34;http://www.hlt.utdallas.edu/~saidul/acl14.pdf&#34;&gt;Automatic Keyphrase Extraction: A Survey of the State of the Art&lt;/a&gt;, several factors contribute to this difficulty, including document length, structural inconsistency, changes in topic, and (a lack of) correlations between topics.&lt;/p&gt;
&lt;h2 id=&#34;methodology&#34;&gt;Methodology&lt;/h2&gt;
&lt;p&gt;Automatic keyphrase extraction is typically a two-step process: first, a set of words and phrases that could convey the topical content of a document are identified, then these candidates are scored/ranked and the “best” are selected as a document’s keyphrases.&lt;/p&gt;
&lt;h3 id=&#34;1-candidate-identification&#34;&gt;1. Candidate Identification&lt;/h3&gt;
&lt;p&gt;A brute-force method might consider all words and/or phrases in a document as candidate keyphrases. However, given computational costs and the fact that not all words and phrases in a document are equally likely to convey its content, heuristics are typically used to identify a smaller subset of better candidates. Common heuristics include removing &lt;a href=&#34;https://en.wikipedia.org/wiki/Stop_words&#34;&gt;stop words&lt;/a&gt; and punctuation; filtering for words with certain parts of speech or, for multi-word phrases, certain POS patterns; and using external knowledge bases like &lt;a href=&#34;https://wordnet.princeton.edu&#34;&gt;WordNet&lt;/a&gt; or Wikipedia as a reference source of good/bad keyphrases.&lt;/p&gt;
&lt;p&gt;For example, rather than taking all of the &lt;a href=&#34;https://en.wikipedia.org/wiki/N-gram&#34;&gt;n-grams&lt;/a&gt; (where 1 ≤ n ≤ 5) in this post’s first two paragraphs as candidates, we might limit ourselves to only noun phrases matching the POS pattern &lt;code&gt;{(&amp;lt;JJ&amp;gt;* &amp;lt;NN.*&amp;gt;+ &amp;lt;IN&amp;gt;)? &amp;lt;JJ&amp;gt;* &amp;lt;NN.*&amp;gt;+}&lt;/code&gt; (a regular expression written in a simplified format used by &lt;a href=&#34;http://www.nltk.org&#34;&gt;NLTK’s&lt;/a&gt; &lt;code&gt;RegexpParser()&lt;/code&gt;). This matches any number of adjectives followed by at least one noun that may be joined by a preposition to one other adjective(s)+noun(s) sequence, and results in the following candidates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&#39;art&#39;, automatic keyphrase extraction&#39;, &#39;changes in topic&#39;, &#39;concise description&#39;,
&#39;content&#39;, &#39;coverage&#39;, &#39;difficulty&#39;, &#39;document&#39;, &#39;document categorization&#39;,
&#39;document length&#39;, &#39;extraction of important topical words&#39;, &#39;fundamental difficulty&#39;,
&#39;general rule of thumb&#39;, &#39;gold standard&#39;, &#39;good coverage&#39;, &#39;human-labeled keyphrases&#39;,
&#39;humans&#39;, &#39;indexing&#39;, &#39;keyphrases&#39;, &#39;major topics&#39;, &#39;many other core nlp tasks&#39;,
&#39;much research&#39;, &#39;natural language processing for purposes&#39;, &#39;particular knowledge domains&#39;,
&#39;phrases from documents&#39;, &#39;search&#39;, &#39;semantic similarity with other documents&#39;,
&#39;set of keyphrases&#39;, &#39;several factors&#39;, &#39;state&#39;, &#39;structural inconsistency&#39;,
&#39;summarization&#39;, &#39;survey&#39;, &#39;terminology extraction&#39;, &#39;topics&#39;, &#39;wide applicability&#39;, &#39;work&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compared to the brute force result, which gives 1100+ candidate n-grams, most of which are almost certainly not keyphrases (e.g. “task”, “relative to”, “and the set”, “survey of the state”, …), this seems like a much smaller and more likely set of candidates, right? As document length increases, though, even the number of likely candidates can get quite large. Selecting the best keyphrase candidates is the objective of step 2.&lt;/p&gt;
&lt;h3 id=&#34;2-keyphrase-selection&#34;&gt;2. Keyphrase Selection&lt;/h3&gt;
&lt;p&gt;Researchers have devised a plethora of methods for distinguishing between good and bad (or better and worse) keyphrase candidates. The simplest rely solely on &lt;strong&gt;frequency statistics&lt;/strong&gt;, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Tf%E2%80%93idf&#34;&gt;TF*IDF&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Okapi_BM25&#34;&gt;BM25&lt;/a&gt;, to score candidates, assuming that a document’s keyphrases tend to be relatively frequent within the document as compared to an external reference corpus. Unfortunately, their performance is mediocre; researchers have demonstrated that the best keyphrases aren’t necessarily the most frequent within a document. (For a statistical analysis of human-generated keyphrases, check out &lt;a href=&#34;http://vis.stanford.edu/papers/keyphrases&#34;&gt;Descriptive Keyphrases for Text Visualization.&lt;/a&gt;) A next attempt might score candidates using multiple statistical features combined in an ad hoc or heuristic manner, but this approach only goes so far. More sophisticated methods apply machine learning to the problem. They fall into two broad categories.&lt;/p&gt;
&lt;h3 id=&#34;unsupervised&#34;&gt;Unsupervised&lt;/h3&gt;
&lt;p&gt;Unsupervised machine learning methods attempt to discover the underlying structure of a dataset without the assistance of already-labeled examples (“training data”). The canonical unsupervised approach to automatic keyphrase extraction uses a &lt;strong&gt;graph-based ranking&lt;/strong&gt; method, in which the importance of a candidate is determined by its relatedness to other candidates, where “relatedness” may be measured by two terms’ frequency of co-occurrence or &lt;a href=&#34;https://en.wikipedia.org/wiki/Semantic_similarity&#34;&gt;semantic relatedness&lt;/a&gt;. This method assumes that more important candidates are related to a greater number of other candidates, and that more of those related candidates are also considered important; it does not, however, ensure that selected keyphrases cover all major topics, although multiple variations try to compensate for this weakness.&lt;/p&gt;
&lt;p&gt;Essentially, a document is represented as a network whose nodes are candidate keyphrases (typically only key words) and whose edges (optionally weighted by the degree of relatedness) connect related candidates. Then, a &lt;a href=&#34;https://networkx.github.io/documentation/networkx-1.9/reference/algorithms.centrality.html&#34;&gt;graph-based ranking algorithm&lt;/a&gt;, such as Google’s famous &lt;a href=&#34;https://en.wikipedia.org/wiki/PageRank&#34;&gt;PageRank&lt;/a&gt;, is run over the network, and the highest-scoring terms are taken to be the document’s keyphrases.&lt;/p&gt;
&lt;p&gt;The most famous instantiation of this approach is &lt;a href=&#34;http://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf&#34;&gt;TextRank&lt;/a&gt;; a variation that attempts to ensure good topic coverage is DivRank. For a more extensive breakdown, see &lt;a href=&#34;http://www.hlt.utdallas.edu/~vince/papers/coling10-keyphrase.pdf&#34;&gt;Conundrums in Unsupervised Keyphrase Extraction&lt;/a&gt;, which includes an example of a &lt;strong&gt;topic-based clustering&lt;/strong&gt; method, the other main class of unsupervised keyphrase extraction algorithms (which I’m not going to delve into).&lt;/p&gt;
&lt;p&gt;Unsupervised approaches have at least one notable strength: No training data required! In an age of massive but unlabled datasets, this can be a huge advantage over other approaches. As for disadvantages, unsupervised methods make assumptions that don’t necessarily hold across different domains, and up until recently, their performance has been inferior to supervised methods. Which brings me to the next section.&lt;/p&gt;
&lt;h3 id=&#34;supervised&#34;&gt;Supervised&lt;/h3&gt;
&lt;p&gt;Supervised machine learning methods use training data to infer a function that maps a set of input variables called features to some desired (and known) output value; ideally, this function can correctly predict the (unknown) output values of new examples based on their features alone. The two primary developments in supervised approaches to automatic keyphrase extraction deal with &lt;strong&gt;task reformulation&lt;/strong&gt; and &lt;strong&gt;feature design&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Early implementations recast the problem of extracting keyphrases from a document as a &lt;strong&gt;binary classification&lt;/strong&gt; problem, in which some fraction of candidates are classified as keyphrases and the rest as non-keyphrases. This is a well-understood problem, and there are many methods to solve it: &lt;a href=&#34;https://scikit-learn.org/stable/modules/naive_bayes.html&#34;&gt;Naive Bayes&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/tree.html&#34;&gt;decision trees&lt;/a&gt;, and &lt;a href=&#34;https://scikit-learn.org/stable/modules/svm.html&#34;&gt;support vector machines&lt;/a&gt;, among others. However, this reformulation of the task is conceptually problematic; humans don’t judge keyphrases independently of one another, instead they judge certain phrases as more key than others in a intrinsically relative sense. As such, more recently the problem has been reformulated as a &lt;strong&gt;ranking&lt;/strong&gt; problem, in which a function is trained to rank candidates pairwise according to degree of “keyness”. The best candidates rise to the top, and the top N are taken to be the document’s keyphrases.&lt;/p&gt;
&lt;p&gt;The second line of research into supervised approaches has explored a wide variety of features used to discriminate between keyphrases and non-keyphrases. The most common are the aforementioned frequency statistics, along with a grab-bag of other &lt;strong&gt;statistical features&lt;/strong&gt;: phrase length (number of constituent words), phrase position (normalized position within a document of first and/or last occurrence therein), and “supervised keyphraseness” (number of times a keyphrase appears as such in the training data). Some models take advantage of a document’s &lt;strong&gt;structural features&lt;/strong&gt; — titles, abstracts, intros and conclusions, metadata, and so on — because a candidate is more likely to be a keyphrase if it appears in notable sections. Others are &lt;strong&gt;external resource-based features&lt;/strong&gt;: “Wikipedia-based keyphraseness” assumes that keyphrases are more likely to appear as Wiki article links and/or titles, while phrase commonness compares a candidate’s frequency in a document with respect to its frequency in an external corpus. The list of possible features goes on and on.&lt;/p&gt;
&lt;p&gt;A well-known implementation of the binary classification method, &lt;a href=&#34;http://community.nzdl.org/kea/&#34;&gt;KEA&lt;/a&gt; (as published in &lt;a href=&#34;http://community.nzdl.org/kea/Nevill-et-al-1999-DL99-poster.pdf&#34;&gt;Practical Automatic Keyphrase Extraction&lt;/a&gt;), used TF*IDF and position of first occurrence (while filtering on phrase length) to identify keyphrases. In A Ranking Approach to Keyphrase Extraction, researchers used a Linear Ranking SVM to rank candidate keyphrases with much success (but failed to give their algorithm a catchy name).&lt;/p&gt;
&lt;p&gt;Supervised approaches have generally achieved better performance than unsupervised approaches; however, good training data is hard to find (although here’s &lt;a href=&#34;https://github.com/snkim/AutomaticKeyphraseExtraction&#34;&gt;a decent place to start&lt;/a&gt;), and the danger of training a model that doesn’t generalize to unseen examples is something to always guard against (e.g. through &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-validation_(statistics)&#34;&gt;cross-validation&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;Okay, now that I’ve scared/bored away all but the truly interested, let’s dig into some code and results! As an example document, I’ll use all of the text in this post up to this results section; as a reference corpus, I’ll use all other posts on this blog. In principle, a reference corpus isn’t necessary for single-document keyphrase extraction (case in point: TextRank), but it’s often helpful to compare a document’s candidates against other documents’ in order to characterize its particular content. Consider that tf*idf reduces to just tf (term frequency) in the case of a single document, since idf (inverse document frequency) is the same value for every candidate.&lt;/p&gt;
&lt;p&gt;As mentioned, there are many ways to extract candidate keyphrases from a document; here’s a simplified and compact implementation of the “noun phrases only” heuristic method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def extract_candidate_chunks(text, grammar=r&#39;KT: {(&amp;lt;JJ&amp;gt;* &amp;lt;NN.*&amp;gt;+ &amp;lt;IN&amp;gt;)? &amp;lt;JJ&amp;gt;* &amp;lt;NN.*&amp;gt;+}&#39;):
    import itertools, nltk, string

    # exclude candidates that are stop words or entirely punctuation
    punct = set(string.punctuation)
    stop_words = set(nltk.corpus.stopwords.words(&#39;english&#39;))
    # tokenize, POS-tag, and chunk using regular expressions
    chunker = nltk.chunk.regexp.RegexpParser(grammar)
    tagged_sents = nltk.pos_tag_sents(nltk.word_tokenize(sent) for sent in nltk.sent_tokenize(text))
    all_chunks = list(itertools.chain.from_iterable(nltk.chunk.tree2conlltags(chunker.parse(tagged_sent))
                                                    for tagged_sent in tagged_sents))
    # join constituent chunk words into a single chunked phrase
    candidates = [&#39; &#39;.join(word for word, pos, chunk in group).lower()
                  for key, group in itertools.groupby(all_chunks, lambda (word,pos,chunk): chunk != &#39;O&#39;) if key]

    return [cand for cand in candidates
            if cand not in stop_words and not all(char in punct for char in cand)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When &lt;code&gt;text&lt;/code&gt; is assigned to the first two paragraphs of this post, &lt;code&gt;set(extract_candidate_chunks(text))&lt;/code&gt; returns more or less the same set of candidate keyphrases as listed in 1. Candidate Identification. (Additional cleaning and filtering code improves the list a bit and helps to makes up for tokenizing/tagging/chunking errors.) For comparison, the original TextRank algorithm performs best when extracting all (unigram) nouns and adjectives, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def extract_candidate_words(text, good_tags=set([&#39;JJ&#39;,&#39;JJR&#39;,&#39;JJS&#39;,&#39;NN&#39;,&#39;NNP&#39;,&#39;NNS&#39;,&#39;NNPS&#39;])):
    import itertools, nltk, string

    # exclude candidates that are stop words or entirely punctuation
    punct = set(string.punctuation)
    stop_words = set(nltk.corpus.stopwords.words(&#39;english&#39;))
    # tokenize and POS-tag words
    tagged_words = itertools.chain.from_iterable(nltk.pos_tag_sents(nltk.word_tokenize(sent)
                                                                    for sent in nltk.sent_tokenize(text)))
    # filter on certain POS tags and lowercase all words
    candidates = [word.lower() for word, tag in tagged_words
                  if tag in good_tags and word.lower() not in stop_words
                  and not all(char in punct for char in word)]

    return candidates
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, &lt;code&gt;set(extract_candidate_words(text))&lt;/code&gt; gives basically the same set of words visualized as a network in the sub-section on unsupervised methods.&lt;/p&gt;
&lt;p&gt;Code for keyphrase selection depends entirely on the approach taken, of course. It’s relatively straightforward to implement the simplest, frequency statistic-based approach using &lt;a href=&#34;https://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt; or &lt;a href=&#34;https://radimrehurek.com/gensim/&#34;&gt;gensim&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def score_keyphrases_by_tfidf(texts, candidates=&#39;chunks&#39;):
    import gensim, nltk

    # extract candidates from each text in texts, either chunks or words
    if candidates == &#39;chunks&#39;:
        boc_texts = [extract_candidate_chunks(text) for text in texts]
    elif candidates == &#39;words&#39;:
        boc_texts = [extract_candidate_words(text) for text in texts]
    # make gensim dictionary and corpus
    dictionary = gensim.corpora.Dictionary(boc_texts)
    corpus = [dictionary.doc2bow(boc_text) for boc_text in boc_texts]
    # transform corpus with tf*idf model
    tfidf = gensim.models.TfidfModel(corpus)
    corpus_tfidf = tfidf[corpus]

    return corpus_tfidf, dictionary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First we assign &lt;code&gt;texts&lt;/code&gt; to a list of normalized text content (stripped of various YAML, HTML, and Markdown formatting) from all previous blog posts plus the first two sections of this post, then we call &lt;code&gt;score_keyphrases_by_tfidf(texts)&lt;/code&gt; to get all posts back in a sparse, tf&lt;em&gt;idf-weighted representation. It’s now trivial to print out the 20 candidate keyphrases with the highest tf&lt;/em&gt;idf values for this blog post:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keyphrase                           tfidf
-----------------------------------------
keyphrases......................... 0.573
document........................... 0.375
candidates......................... 0.306
approaches......................... 0.191
approach........................... 0.115
candidate.......................... 0.115
major topics....................... 0.115
methods............................ 0.115
automatic keyphrase extraction..... 0.076
frequency statistics............... 0.076
keyphrase.......................... 0.076
keyphrase candidates............... 0.076
network............................ 0.076
relatedness........................ 0.076
researchers........................ 0.076
set of keyphrases.................. 0.076
state.............................. 0.076
survey............................. 0.076
function........................... 0.075
performance........................ 0.075
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not too shabby! Although you can clearly see how &lt;a href=&#34;https://en.wikipedia.org/wiki/Stemming&#34;&gt;stemming&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Lemmatisation&#34;&gt;lemmatizing&lt;/a&gt; candidates would improve results (candidate / candidates, approach / approaches, and keyphrase / keyphrases would normalize together). You can also see that this approach seems to favor unigram keyphrases, likely owing to their much higher frequencies of occurrence in natural language texts. Considering that human-selected keyphrases are most often bigrams (according to the analysis in &lt;a href=&#34;http://vis.stanford.edu/papers/keyphrases&#34;&gt;Descriptive Keyphrases for Text Visualization&lt;/a&gt;), this seems to be another limitation of such simplistic methods.&lt;/p&gt;
&lt;p&gt;Now, let’s try a bare-bones implementation of the TextRank algorithm. To keep it simple, only unigram candidates (not chunks or n-grams) are added to the network as nodes, the co-occurrence window size is fixed at 2 (so only adjacent words are said to “co-occur”), and the edges between nodes are unweighted (rather than weighted by the number of co-occurrences). The N top-scoring candidates are taken to be its keywords; sequences of adjacent keywords are merged to form key phrases and their individual PageRank scores are averaged, so as not to bias for longer keyphrases.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def score_keyphrases_by_textrank(text, n_keywords=0.05):
    from itertools import takewhile, tee, izip
    import networkx, nltk

    # tokenize for all words, and extract *candidate* words
    words = [word.lower()
             for sent in nltk.sent_tokenize(text)
             for word in nltk.word_tokenize(sent)]
    candidates = extract_candidate_words(text)
    # build graph, each node is a unique candidate
    graph = networkx.Graph()
    graph.add_nodes_from(set(candidates))
    # iterate over word-pairs, add unweighted edges into graph
    def pairwise(iterable):
        &amp;quot;&amp;quot;&amp;quot;s -&amp;gt; (s0,s1), (s1,s2), (s2, s3), ...&amp;quot;&amp;quot;&amp;quot;
        a, b = tee(iterable)
        next(b, None)
        return izip(a, b)
    for w1, w2 in pairwise(candidates):
        if w2:
            graph.add_edge(*sorted([w1, w2]))
    # score nodes using default pagerank algorithm, sort by score, keep top n_keywords
    ranks = networkx.pagerank(graph)
    if 0 &amp;lt; n_keywords &amp;lt; 1:
        n_keywords = int(round(len(candidates) * n_keywords))
    word_ranks = {word_rank[0]: word_rank[1]
                  for word_rank in sorted(ranks.iteritems(), key=lambda x: x[1], reverse=True)[:n_keywords]}
    keywords = set(word_ranks.keys())
    # merge keywords into keyphrases
    keyphrases = {}
    j = 0
    for i, word in enumerate(words):
        if i &amp;lt; j:
            continue
        if word in keywords:
            kp_words = list(takewhile(lambda x: x in keywords, words[i:i+10]))
            avg_pagerank = sum(word_ranks[w] for w in kp_words) / float(len(kp_words))
            keyphrases[&#39; &#39;.join(kp_words)] = avg_pagerank
            # counter as hackish way to ensure merged keyphrases are non-overlapping
            j = i + len(kp_words)

    return sorted(keyphrases.iteritems(), key=lambda x: x[1], reverse=True)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With &lt;code&gt;text&lt;/code&gt; as the first two sections of this post, calling &lt;code&gt;score_keyphrases_by_textrank(text)&lt;/code&gt; returns the following top 20 keyphrases:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keyphrase                           textrank
--------------------------------------------
keyphrases.........................    0.028
candidates.........................    0.022
document...........................    0.022
candidate keyphrases...............    0.019
best keyphrases....................    0.018
keyphrase candidates...............    0.017
likely candidates..................    0.015
best candidates....................    0.015
best keyphrase candidates..........    0.014
features...........................    0.013
keyphrase..........................    0.012
keyphrase extraction...............    0.012
extraction.........................    0.012
methods............................    0.011
candidate..........................     0.01
words..............................     0.01
automatic keyphrase extraction.....     0.01
approaches.........................    0.009
problem............................    0.009
set................................    0.008
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, not too shabby, but obviously there’s room for improvement. You can see that this algorithm occasionally produces novel and high-quality keyphrases, but there’s a fair amount of noise, too. Normalization of candidates (keyphrase / keyphrases, …) could help, as could better cleaning and filtering. Furthermore, experimenting with different aspects of the algorithm — like DivRank, SingleRank, &lt;a href=&#34;http://www.aaai.org/Papers/AAAI/2008/AAAI08-136.pdf&#34;&gt;ExpandRank&lt;/a&gt;, &lt;a href=&#34;http://www.aclweb.org/anthology/C/C08/C08-1122.pdf&#34;&gt;CollabRank&lt;/a&gt;, and others — including co-occurrence window size, weighted graphs, and the manner in which keywords are merged into keyphrases, has been shown to produce better results.&lt;/p&gt;
&lt;p&gt;Lastly, let’s try a supervised algorithm. I prefer a ranking approach over binary classification, for conceptual as well as result quality reasons. Conveniently, someone has already implemented a &lt;a href=&#34;https://gist.github.com/agramfort/2071994&#34;&gt;pairwise Ranking SVM&lt;/a&gt; in Python — and &lt;a href=&#34;http://fa.bianp.net/blog/2012/learning-to-rank-with-scikit-learn-the-pairwise-transform/&#34;&gt;blogged about it!&lt;/a&gt; Feature design is something of an art; drawing on multiple sources for inspiration, I extracted a diverse grab-bag of features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;frequency-based&lt;/strong&gt;: term frequency, g&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;, corpus and web “commonness” (as defined &lt;a href=&#34;http://vis.stanford.edu/papers/keyphrases&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;statistical&lt;/strong&gt;: term length, spread, lexical cohesion, max word length&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;grammatical&lt;/strong&gt;: “is acronym”, “is &lt;a href=&#34;https://en.wikipedia.org/wiki/Named-entity_recognition&#34;&gt;named entity&lt;/a&gt;”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;positional&lt;/strong&gt;: normalized positions of first and last occurrence, “is in title”, “is in key excerpt” (such as an abstract or introductory paragraph)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feature extraction can get very complicated and convoluted. In the interest of brevity and simplicity, then, here’s a partial example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def extract_candidate_features(candidates, doc_text, doc_excerpt, doc_title):
    import collections, math, nltk, re

    candidate_scores = collections.OrderedDict()

    # get word counts for document
    doc_word_counts = collections.Counter(word.lower()
                                          for sent in nltk.sent_tokenize(doc_text)
                                          for word in nltk.word_tokenize(sent))

    for candidate in candidates:

        pattern = re.compile(r&#39;\b&#39;+re.escape(candidate)+r&#39;(\b|[,;.!?]|\s)&#39;, re.IGNORECASE)

        # frequency-based
        # number of times candidate appears in document
        cand_doc_count = len(pattern.findall(doc_text))
        # count could be 0 for multiple reasons; shit happens in a simplified example
        if not cand_doc_count:
            print &#39;**WARNING:&#39;, candidate, &#39;not found!&#39;
            continue

        # statistical
        candidate_words = candidate.split()
        max_word_length = max(len(w) for w in candidate_words)
        term_length = len(candidate_words)
        # get frequencies for term and constituent words
        sum_doc_word_counts = float(sum(doc_word_counts[w] for w in candidate_words))
        try:
            # lexical cohesion doesn&#39;t make sense for 1-word terms
            if term_length == 1:
                lexical_cohesion = 0.0
            else:
                lexical_cohesion = term_length * (1 + math.log(cand_doc_count, 10)) * cand_doc_count / sum_doc_word_counts
        except (ValueError, ZeroDivisionError) as e:
            lexical_cohesion = 0.0

        # positional
        # found in title, key excerpt
        in_title = 1 if pattern.search(doc_title) else 0
        in_excerpt = 1 if pattern.search(doc_excerpt) else 0
        # first/last position, difference between them (spread)
        doc_text_length = float(len(doc_text))
        first_match = pattern.search(doc_text)
        abs_first_occurrence = first_match.start() / doc_text_length
        if cand_doc_count == 1:
            spread = 0.0
            abs_last_occurrence = abs_first_occurrence
        else:
            for last_match in pattern.finditer(doc_text):
                pass
            abs_last_occurrence = last_match.start() / doc_text_length
            spread = abs_last_occurrence - abs_first_occurrence

        candidate_scores[candidate] = {&#39;term_count&#39;: cand_doc_count,
                                       &#39;term_length&#39;: term_length, &#39;max_word_length&#39;: max_word_length,
                                       &#39;spread&#39;: spread, &#39;lexical_cohesion&#39;: lexical_cohesion,
                                       &#39;in_excerpt&#39;: in_excerpt, &#39;in_title&#39;: in_title,
                                       &#39;abs_first_occurrence&#39;: abs_first_occurrence,
                                       &#39;abs_last_occurrence&#39;: abs_last_occurrence}

    return candidate_scores
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As an example, &lt;code&gt;candidate_scores[&amp;quot;automatic keyphrase extraction&amp;quot;]&lt;/code&gt; returns the following features:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&#39;abs_first_occurrence&#39;: 0.029178287921046986,
 &#39;abs_last_occurrence&#39;: 0.9301652006007295,
 &#39;in_excerpt&#39;: 1,
 &#39;in_title&#39;: 1,
 &#39;lexical_cohesion&#39;: 0.9699006820274416,
 &#39;max_word_length&#39;: 10,
 &#39;spread&#39;: 0.9009869126796826,
 &#39;term_count&#39;: 6,
 &#39;term_length&#39;: 3}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The last thing to do is train a Ranking SVM model on an already-labeled dataset; I used the SemEval 2010 keyphrase extraction dataset, plus a couple extra bits and pieces, which can be found in this GitHub repo. When applied to the first two sections of this blog post, the 20 top-scoring candidates are as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keyphrase                           ranksvm
-------------------------------------------
keyphrase extraction...............   1.736
document categorization............   1.151
particular knowledge domains.......   1.031
phrases from documents.............   1.014
keyphrase..........................    0.97
terminology extraction.............   0.951
keyphrases.........................   0.909
set of keyphrases..................   0.895
concise description................   0.873
document...........................   0.691
human-labeled keyphrases...........   0.643
candidate identification...........   0.642
frequency of co-occurrence.........   0.636
candidate keyphrases...............   0.624
wide applicability.................   0.604
rest as non-keyphrases.............   0.578
binary classification problem......   0.567
canonical unsupervised approach....   0.566
structural inconsistency...........   0.556
paragraphs as candidates...........   0.548
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that is a nice set of keyphrases! There’s some bias for longer keyphrases (and longer words within keyphrases), perhaps because the training dataset was about 90% scientific articles, but it’s not inappropriate for this science-ish blog’s content.&lt;/p&gt;
&lt;p&gt;All of the code shown here has been pared down and simplified for demonstration purposes. Adding extensive candidate cleaning, filtering, case/syntactic normalization, and de-duplication can dramatically reduce noise and improve results, as can incorporating additional features and external resources into the keyphrase selection algorithm. Furthermore, although all of these methods were presented in the context of single-document keyphrase extraction, there are ways to extract keyphrases from multiple documents and thus categorize/cluster/summarize/index/conceptualize entire corpora. This really is just an introduction to an ongoing challenge in natural language processing research.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Page content on your Hugo homepage</title>
        <link>https://azharkhan.in/articles/hugo-page-content-on-homepage/</link>
        <pubDate>Fri, 02 Mar 2018 15:44:49 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-page-content-on-homepage/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    A simple Hugo snippet for displaying content from a specific page on your site homepage.
&lt;/p&gt;

&lt;p&gt;Say for example I wanted to add the title and content from a page called “How it works” on my homepage.&lt;/p&gt;
&lt;p&gt;First I’d need to create a page called how it works.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new page/how-it-works.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the page front matter add a parameter called &lt;code&gt;type&lt;/code&gt; and give it a value which makes sense.&lt;/p&gt;
&lt;p&gt;That might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;How It Works&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2018-03-02T14:58:10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then in your &lt;code&gt;index.html&lt;/code&gt; add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;works&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;look&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;front&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matter&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;f3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Data Science. What the heck is that?</title>
        <link>https://azharkhan.in/articles/data-science.-what-the-heck-is-that/</link>
        <pubDate>Sat, 05 Nov 2016 14:10:29 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/data-science.-what-the-heck-is-that/</guid>
        <description>&lt;p&gt;If I’m to write about becoming a &lt;em&gt;data scientist&lt;/em&gt;, I should first define what I mean by &lt;em&gt;data science&lt;/em&gt;. A simple &lt;a href=&#34;http://lmgtfy.com/?q=what+is+data+science%3F&#34;&gt;Google search&lt;/a&gt; yields over one billion results… so I’ll do my best to summarize. (This is easier said than done, of course, since the concept has been around and &lt;a href=&#34;https://www.smartdatacollective.com/evolution-what-data-science/&#34;&gt;evolved considerably&lt;/a&gt; since the 1970s, and a generally-accepted definition does not appear to exist.)&lt;/p&gt;
&lt;p&gt;Data science is a relatively new field that lies at the intersection of math and statistics, computing and hacking, machine learning and data mining. As such, its practitioners (data scientists) are inherently interdisciplinary, problem-solving generalists who, according to Mike Loukides in his seminal article “&lt;a href=&#34;https://www.oreilly.com/ideas/what-is-data-science&#34;&gt;What is data science?&lt;/a&gt;”, “can think outside the box to come up with new ways to view the problem, or to work with very broadly defined problems: ‘here’s a lot of data, what can you make from it?’” In an &lt;a href=&#34;https://techcrunch.com/2012/09/06/in-the-studio-linkedins-pete-skomoroch-discusses-the-voltron-of-data-science/&#34;&gt;interview&lt;/a&gt; with &lt;a href=&#34;https://twitter.com/peteskomoroch&#34;&gt;Peter Skomoroch&lt;/a&gt; of LinkedIn, the “&lt;a href=&#34;https://www.youtube.com/watch?v=tZZv5Z2Iz_s&amp;amp;feature=youtu.be&#34;&gt;Voltron&lt;/a&gt; of data science” is characterized by a technical ability to code, mathematical know-how to build algorithms, and overall business intelligence. &lt;a href=&#34;https://twitter.com/dpatil&#34;&gt;DJ Patil&lt;/a&gt; describes data scientists in “&lt;a href=&#34;http://radar.oreilly.com/2011/09/building-data-science-teams.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+oreilly%2Fradar%2Fatom+%28O%27Reilly+Radar%29&amp;amp;utm_content=My+Yahoo&#34;&gt;Building data science teams&lt;/a&gt;” as “those who use both data and science to create something new.” He goes on to stress the importance of curiosity and cleverness as personality traits of successful data scientists.&lt;/p&gt;
&lt;p&gt;A visual attempt at definition comes in the form of &lt;a href=&#34;http://drewconway.com/zia/?p=2378&#34;&gt;The Data Science Venn Diagram&lt;/a&gt; by &lt;a href=&#34;&#34;&gt;Drew Conway&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.squarespace-cdn.com/content/v1/5150aec6e4b0e340ec52710a/1364352051365-HZAS3CLBF7ABLE3F5OBY/ke17ZwdGBToddI8pDm48kB2M2-8_3EzuSSXvzQBRsa1Zw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpxPe_8B-x4gq2tfVez1FwLYYZXud0o-3jV-FAs7tmkMHY-a7GzQZKbHRGZboWC-fOc/Data_Science_VD.png?format=1500w&#34; alt=&#34;Venn_Diag&#34;&gt;&lt;/p&gt;
&lt;p&gt;The emphasis here is, again, on the interdisciplinary nature of data science, which lies at the intersection of three general domains of knowledge and experience. His inclusion of “substantive expertise” points to what makes data science (and data scientists) new and distinct from, say, business intelligence analysts: It’s not just about the existence of the data and the ability to quantitatively analyze it; data science is about testing hypotheses, and deriving new knowledge from the data, then making sure that the conclusions are valid. It’s about &lt;em&gt;discovery&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another way to define data science is to describe the sort of work that’s actually performed by data scientists. In &lt;a href=&#34;http://www.dataists.com/2010/09/a-taxonomy-of-data-science/&#34;&gt;A Taxonomy of Data Science&lt;/a&gt;, &lt;a href=&#34;https://hilarymason.com/about/&#34;&gt;Hilary Mason&lt;/a&gt; and &lt;a href=&#34;http://www.columbia.edu/~chw2/&#34;&gt;Chris Wiggins&lt;/a&gt; list what a data scientist actually does, in approximate chronological order: obtain (finding and getting sufficient amounts of data from a variety of sources); scrub (cleaning up messy and/or incomplete data to make analysis possible); explore (looking at the data by reading numbers, basic plotting, and unsupervised clustering techniques); model (producing the most predictive model of the data possible, quantifying the accuracy of its predictions); and interpret (gleaning generalized insight from the model to produce data products and suggest directions for further inquiry). Not surprisingly, data scientists perform a wide array of specific tasks. According to Jeff Hammerbacher&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”… on any given day, a team member could author a multistage processing pipeline in Python, design a hypothesis test, perform a regression analysis over data samples with R, design and implement an algorithm for some data-intensive product or service in Hadoop, or communicate the results of our analyses to other members of the organization.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Amazing. Mike Driscoll details the three sexy skills of data geeks — statistics, data munging, and visualization — the last of which is a critical component of data science that I’ve not yet mentioned. Presenting the data such that its underlying structure is clear and visible facilitates a better understanding of the dataset itself, not to mention communication of your conclusions with others!&lt;/p&gt;
&lt;p&gt;So, as far as I can tell, that’s data science in a nutshell. But, given that it’s a new and varied field, I’ve probably might have missed some important points.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Jekyll &#43; Hydeout &#43; Github Pages</title>
        <link>https://azharkhan.in/articles/jekyll-hydeout-github-pages/</link>
        <pubDate>Sun, 25 Sep 2016 14:10:29 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/jekyll-hydeout-github-pages/</guid>
        <description>&lt;p&gt;I recently migrated my old website from Wordpress to Github pages using Jekyll and Hydeout. Over time, I grew to really dislike how heavy-weight Wordpress is. The WYSIWYG editors make it really hard to work out what HTML is being generated and have an inclination to bloat the code that&amp;rsquo;s produced. I found the Wordpress plugin system so confusing that i wont to be afraid to try and do to customize the layout of anything.&lt;/p&gt;
&lt;p&gt;The process of backing up Wordpress is a huge pain. I was annoyed constantly installing security updates. I hated having to keep an opaque database in order to keep all of my content. And whenever I went in to edit my website, I was always afraid that I would fat-finger change something and have no idea what happened.&lt;/p&gt;
&lt;p&gt;So when I learned about &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;, it seemed like a great alternative. I like the idea that my entire blog is a set of static files. Besides its simplicity, it makes backups so much easier and avoids most common security concerns caused by running dynamic websites. I could write my posts in &lt;a href=&#34;http://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;, which is quite handy. Also, Jekyll allows for code examples to be very nicely embedded in the website. Finally, Jekyll is very lightweight and allows for very minimal websites without any bloat.&lt;/p&gt;
&lt;p&gt;The fact that GitHub provides &lt;a href=&#34;http://pages.github.com&#34;&gt;free hosting for Jekyll blogs&lt;/a&gt; is just icing on the cake. It will save me a few extra dollars each year in hosting. GitHub provides automatic version control of my blog. I can use GitHub&amp;rsquo;s web editor to write blog posts online. And I can still connect it to my custom domain.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;I came across this really cool git repo called &lt;a href=&#34;https://github.com/fongandrew/hydeout&#34;&gt;Hydeout&lt;/a&gt; which was super easy to setup. Hydeout is a theme built on top of &lt;a href=&#34;https://github.com/poole/poole&#34;&gt;poole&lt;/a&gt;. Hydeout updates the original &lt;a href=&#34;https://github.com/poole/hyde&#34;&gt;Hyde&lt;/a&gt; theme of poole for Jekyll 3.x and adds new functionality.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://fongandrew.github.io/hydeout/&#34;&gt;fongandrew.github.io&lt;/a&gt; is a working demo of the Hydeout website that looks like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xor97.github.io/assets/demo.png&#34; alt=&#34;The demo Hydeout website&#34;&gt;&lt;/p&gt;
&lt;p&gt;To get started with my blog, all I had to do was create a new Git repo with the name &lt;a href=&#34;http://XOR97.github.io&#34;&gt;XOR97.github.io&lt;/a&gt;, download the Hydeout repository, and push it to my git repo. A few minutes later the website azkh93.github.io was ready! I only had a few posts on my previous website so I just copied them over manually. But there is &lt;a href=&#34;http://jekyllrb.com/docs/migrations&#34;&gt;a package&lt;/a&gt; for migrating blogs to Jekyll.&lt;/p&gt;
&lt;h2 id=&#34;blog-layout&#34;&gt;Blog Layout&lt;/h2&gt;
&lt;p&gt;The initial state of the Hydeout repository is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -1
404.html
Gemfile
CNAME
LICENSE.md
README.md
_config.yml
_includes
_layouts
_posts
_sass
_screenshots
assests/css
category
about.md
favicon.ico
favicon.png
atom.xml
index.html
search.html
tags.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can view the folder structure on &lt;a href=&#34;https://github.com/fongandrew/hydeout&#34;&gt;GitHub&lt;/a&gt;.
When you run Jekyll, it creates a folder called _site with the
static website inside of it. Every file or folder in the repo will get copied
into the _site folder unless it begins with an underscore.
Markdown files will get automatically converted to HTML
and Hydeout uses the &lt;a href=&#34;http://liquidmarkup.org&#34;&gt;Liquid&lt;/a&gt; templating system to allow
for somewhat dynamic content on the website.&lt;/p&gt;
&lt;p&gt;The folder &lt;a href=&#34;https://github.com/fongandrew/hydeout/tree/master/_posts&#34;&gt;_posts&lt;/a&gt; contains all of the blog posts in markdown format.
Some example posts that come with Hydeout are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -1 _posts/
2013-12-31-whats-jekyll.md
2014-01-01-example-content.md
2014-01-02-introducing-hyde.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/fongandrew/hydeout/blob/master/index.html&#34;&gt;index.html&lt;/a&gt;
contains the front page of the blog and
&lt;a href=&#34;https://github.com/fongandrew/hydeout/blob/master/about.md&#34;&gt;about.md&lt;/a&gt; is a
static post in markdown format.
If you want to have more static files, you can just add them to the
repo and Hydeout will copy them to the _site folder when rendering the website.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fongandrew/hydeout/blob/master/_config.yml&#34;&gt;_config.yml&lt;/a&gt;
contains general configuration stuff for the website:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Setup
title:            Hydeout
tagline:          &#39;The Jekyll theme&#39;
description:      &#39;The &amp;lt;a href=&amp;quot;http://hyde.getpoole.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Hyde&amp;lt;/a&amp;gt; theme for &amp;lt;a href=&amp;quot;http://jekyllrb.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Jekyll&amp;lt;/a&amp;gt;, refreshed.&#39;
url:              https://fongandrew.github.io
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, the folders &lt;a href=&#34;https://github.com/fongandrew/hydeout/tree/master/_layouts&#34;&gt;_layouts&lt;/a&gt;
and &lt;a href=&#34;https://github.com/fongandrew/hydeout/tree/master/_includes&#34;&gt;_includes&lt;/a&gt;
contain boiler-plate HTML for building the website.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -1 _layouts/
default.html
page.html
category.html
index.html
post.html
search.html
tags.html

$ ls -1 _includes/
category-links.html     custom-head.html        favicons.html           page-links.html         post-tags.html          sidebar-nav-links.html
comments.html           custom-icon-links.html  font-includes.html      pagination-newer.html   related_posts.html      sidebar.html
copyright.html          custom-nav-links.html   google-analytics.html   pagination-older.html   search-form.html        svg
custom-foot.html        disqus.html             head.html               post-meta.html          sidebar-icon-links.html tags-list.html
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;disqus-comments&#34;&gt;Disqus Comments&lt;/h2&gt;
&lt;p&gt;Disqus integration is ready out of the box. Just add the following to
your config file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;disqus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;shortname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;my-disqus-shortname&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you don&amp;rsquo;t want Disqus or want to use something else, override
&lt;code&gt;comments.html&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h2&gt;
&lt;p&gt;For Google Analytics support, define a &lt;code&gt;google_analytics&lt;/code&gt; variable with your tracking ID in your config file.&lt;/p&gt;
&lt;h2 id=&#34;getting-a-custom-url&#34;&gt;Getting a Custom URL&lt;/h2&gt;
&lt;p&gt;Once I got my blog up to speed on GitHub with the URL &lt;a href=&#34;https://XOR97.github.io&#34;&gt;XOR97.github.io&lt;/a&gt;, it was easy to link my personal domain to it. I use GoDaddy to host my domain, so I followed the instructions &lt;a href=&#34;https://hackernoon.com/how-to-set-up-godaddy-domain-with-github-pages-a9300366c7b&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this blog post will help you get up to speed quickly with GitHub Pages, Jekyll, and Hydeout.
If you have any questions about my implementation, you can view my entire website on &lt;a href=&#34;https://github.com/azkh93/azkh93.github.io&#34;&gt;GitHub&lt;/a&gt; or leave a question below.&lt;/p&gt;
&lt;h2 id=&#34;more-links&#34;&gt;More Links&lt;/h2&gt;
&lt;p&gt;Here are some links which helped me along the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The official &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; website, along with detailed &lt;a href=&#34;http://jekyllrb.com/docs/home&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Documentation by GitHub about hosting static webpages with &lt;a href=&#34;http://pages.github.com&#34;&gt;GitHub pages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/poole/poole&#34;&gt;poole&lt;/a&gt; GitHub repository.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/fongandrew/hydeout&#34;&gt;Hydeout&lt;/a&gt; GitHub repository.&lt;/li&gt;
&lt;li&gt;The GitHub repository for my &lt;a href=&#34;https://github.com/XOR97/XOR97.github.io&#34;&gt;personal website&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Inception</title>
        <link>https://azharkhan.in/articles/inception/</link>
        <pubDate>Fri, 15 Jul 2016 14:10:29 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/inception/</guid>
        <description>&lt;h4 id=&#34;hello-world-this-is-where-it-all-begins-more-to-follow&#34;&gt;Hello World. This is where it all begins. More to follow&amp;hellip;&lt;/h4&gt;
</description>
      </item>
      
    
  </channel>
</rss>