<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Azhar Khan</title>
    <link>https://azharkhan.in/tags/design/</link>
    <description>Recent content in Design on Azhar Khan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>azhar932@icloud.com (Azhar Khan)</managingEditor>
    <webMaster>azhar932@icloud.com (Azhar Khan)</webMaster>
    <lastBuildDate>Fri, 17 May 2019 15:12:50 +0200</lastBuildDate>
    
        <atom:link href="https://azharkhan.in/tags/design/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
      
    
      
      <item>
        <title>Better design systems in Sketch 2</title>
        <link>https://azharkhan.in/articles/better-design-systems-sketch-libraries-part-2/</link>
        <pubDate>Thu, 28 Jun 2018 16:35:12 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/better-design-systems-sketch-libraries-part-2/</guid>
        <description>&lt;p class=&#34;Message&#34;&gt;
    
This article was originally posted (with supporting imagery) on &lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-to-build-a-better-ui-design-system-part-2-8de6cef5adc5&#34;&gt;Medium.com&lt;/a&gt;

&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Prerequisite: This article requires &lt;a href=&#34;https://www.sketch.com/updates/&#34;&gt;Sketch 47&lt;/a&gt; as it make use of the long awaited new ‘Libraries’ feature.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;the first part&lt;/a&gt; gives you an intro to building ‘primitive’ Libraries to use in a UI design system, this article focuses on using the Symbols stored in these Libraries to build a highly flexible Atom level component.&lt;/p&gt;
&lt;p&gt;For those new to these concepts, the term primitives is used to describe subatomic properties; the lowest level ‘particles’ from which everything else in a system is composed. These ideas are explored in depth in Dan Eden’s work on &lt;a href=&#34;https://daneden.me/2018/01/05/subatomic-design-systems/&#34;&gt;Subatomic Design Systems&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Rather than creating a limited and vast set of UI elements, you define the system in terms of its particle properties, thus limiting the available styles but opening potentially unlimited avenues of creativity for the actual pieces of UI.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;  Dan Eden&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;We can use the concept of ‘particles’ to better understand the Libraries created in the first article. As the process involves identifying or extracting the core properties from our work and storing them in Libraries for reuse.&lt;/p&gt;
&lt;p&gt;But why do this? Our intention is to reference these particles when building pieces of UI. As our components will share properties they’ll remain consistent, yet flexible enough to allow for creativity in their construction.&lt;/p&gt;
&lt;p&gt;The particular pieces of UI we’ll focus on here are commonly known as Atoms. Atoms are the smallest identifiable components in a system, taken from &lt;a href=&#34;http://bradfrost.com/blog/post/atomic-web-design/&#34;&gt;Brad Frost’s Atomic Design&lt;/a&gt; which you’ll likely be familiar with.&lt;/p&gt;
&lt;p&gt;As Atomic Design is widely understood we might use it as the principle guide for our component structures, borrowing the concept of ‘particles’ from Subatomic Design to help explain properties composing an Atom.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://miro.medium.com/max/4440/1*h4vUVzQL5iDd4BEE6dUCyw.png&#34;&gt;This diagram&lt;/a&gt; illustrates where we are on a scale of UI complexity. At this stage we’re primarily concerned with subatomic properties and how we can use them to build Atoms.&lt;/p&gt;
&lt;p&gt;By storing these properties (particles per Subatomic Design) as a collection Symbols and Symbol Overrides in Sketch Libraries, we can build a highly flexible system of low level UI components (Atoms per Atomic Design). And with these components, rapid prototype complex structures with minimal cognitive load.&lt;/p&gt;
&lt;p&gt;Before we get onto the practical stuff ahead, here’s a few reasons why you might consider ditching the ‘single file UI Kit’ approach in favour of breaking your UI system into multiple files. And how Sketch Libraries can take your UI design system process to the next level.&lt;/p&gt;
&lt;h2 id=&#34;how-libraries-improve-our-design-systems&#34;&gt;How Libraries improve our design systems&lt;/h2&gt;
&lt;p&gt;Fundamentally, Libraries help reduce complexity and inconsistency in our work and increase portability and reuse of UI assets.
In other words, Libraries help us create useful work which serves our needs for the long term. As design systems thinker &lt;a href=&#34;https://medium.com/@nathanacurtis&#34;&gt;Nathan Curtis&lt;/a&gt; puts it:&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Focusing on style guide delivery as the climax is the wrong story to tell. A system isn’t a project with an end, it’s the origin story of a living and evolving product that’ll serve other products.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;   Nathan Curtis&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;Benefits of using Libraries to create systems that last:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organised, maintainable projects:&lt;/strong&gt; More files, fewer moving parts per file. Sync changes from a single source of truth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced design debt and redundancy:&lt;/strong&gt; No more broken Symbols and inconsistencies as you’ll be building comps using shared properties stored in ‘primitive’ Libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scaleable, flexible systems:&lt;/strong&gt; Make changes, sync updates and evolve your system with relative ease. Symbol Overrides allows for fewer Symbols and flexible components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Portable design assets:&lt;/strong&gt; Libraries are independent files and so can be used across multiple Sketch files and reused in other projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where you may have struggled to maintain a system in the past, Sketch Libraries help you build lightweight systems which are easier to manage as your product grows and evolves.&lt;/p&gt;
&lt;p&gt;By organising Symbols in multiple Library files, we can nest a Symbols from one file within another and keep those files both light in complexity and small in size. With Libraries, our assets become portable and updates easier to sync across entire projects.&lt;/p&gt;
&lt;p&gt;That means no more redundant design mockups post developer hand-off, no more battling to keep your designs up to date and generally a stress free time with Sketch.&lt;/p&gt;
&lt;p&gt;So how can you adopt this approach to UI design systems with Libraries?&lt;/p&gt;
&lt;h2 id=&#34;using-libraries-for-a-ui-design-system&#34;&gt;Using Libraries for a UI design system&lt;/h2&gt;
&lt;p&gt;Theory aside, building a design systems with Libraries is fairly simple. A high level overview might look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decouple reoccurring properties found in your designs.&lt;/li&gt;
&lt;li&gt;Store properties as Symbols in a series of Library files.&lt;/li&gt;
&lt;li&gt;Use Libraries to build identifiable components.&lt;/li&gt;
&lt;li&gt;Use components to rapid prototype design comps&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I cover the first 2 parts above in &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;the first article&lt;/a&gt;. The third part is where we’ll focus from here. Let’s get on with that now.&lt;/p&gt;
&lt;h2 id=&#34;building-an-atom-using-sketch-libraries&#34;&gt;Building an Atom using Sketch Libraries&lt;/h2&gt;
&lt;p&gt;Now we’re all familiar with Atomic Design, we have a good understanding of how we can use primitive or particle properties to build an Atom. Then in future cases Atoms to build Molecules, Molecules to build Organisms etc.&lt;/p&gt;
&lt;p&gt;As I’ve shared &lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-and-primitives-to-build-an-even-better-system-of-buttons-ecc8f25486ac&#34;&gt;my process for building buttons&lt;/a&gt;, we’ll look at building a flexible Avatar component, another low level Atom. Later we’ll use this Avatar inside a card component. Expect to read about that in a future article.&lt;/p&gt;
&lt;p&gt;With some design system methodology in mind, we will start by identifying the properties needed to build the component.&lt;/p&gt;
&lt;h2 id=&#34;step-1-audit-your-work&#34;&gt;Step 1: Audit your work&lt;/h2&gt;
&lt;p&gt;Call it what you like, Brad frost refers to this as a &lt;a href=&#34;http://bradfrost.com/blog/post/interface-inventory/&#34;&gt;Interface Inventory&lt;/a&gt;, but ‘Audit’ is nice and short so lets go with that for now.&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “An interface inventory is a comprehensive collection of the bits and pieces that make up your interface.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;  Brad Frost&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;However you choose to do it — whether using a spreadsheet, in Evernote, on a piece of paper—just do it. Taking a holistic view of your entire product will help you identify patterns and relationships between different UI components.&lt;/p&gt;
&lt;p&gt;In our case this means potential cases of reusability among properties, which we can decouple from our design and store in Libraries.&lt;/p&gt;
&lt;p&gt;When auditing my work on the &lt;a href=&#34;https://ainlabs.netlify.com/&#34;&gt;AIN design system&lt;/a&gt;, I realised many design patterns in the product were made from variables of a handful of property types: &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;icon&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In theory, this meant I could build the majority of any component (Avatars included) using variables of these 5 primitive properties. This made a good starting point when considering what to store in primitive Libraries.&lt;/p&gt;
&lt;h3 id=&#34;adding-missing-libraries&#34;&gt;Adding missing Libraries&lt;/h3&gt;
&lt;p&gt;If you read &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;the first part&lt;/a&gt; you’ll know I already built Libraries for 2 out of the 5 primitive properties used in my system: &lt;code&gt;colors&lt;/code&gt;, and &lt;code&gt;icons&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I’ve since built Libraries for &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt;, which contain all instances of these properties used in my designs.&lt;/p&gt;
&lt;p&gt;At this point you might be thinking; why not use Layer Styles?&lt;/p&gt;
&lt;p&gt;New for Sketch 51 (currently in Beta): Both Text Styles and Layer Styles defined in Libraries will be available in all documents, just like Symbols are. This is a huge update and will help us solve inconsistencies across Styles which currently we have to recreate for each Library.&lt;/p&gt;
&lt;p&gt;Layer Styles, however, still don’t maintain shape, meaning we have no way to control border radius when using Layer Styles.&lt;/p&gt;
&lt;p&gt;For this reason, I chose to ditch Layer Styles altogether, instead creating Symbols for all instances of shape, storing them in Libraries which can be used across the entire system.&lt;/p&gt;
&lt;p&gt;By doing this I could reduce the number of unique Symbols created on a component level and reduce the complexity of each component.&lt;/p&gt;
&lt;h3 id=&#34;handling-text-on-a-component-level&#34;&gt;Handling text on a component level&lt;/h3&gt;
&lt;p&gt;Typography in Sketch, as you’ll know, is no easy beast to tame. For this reason, I decided against creating a &lt;code&gt;text&lt;/code&gt; Library. Instead I handle all instances of text on a ‘per component’ basis, meaning any text required will live in same file as the component itself.&lt;/p&gt;
&lt;p&gt;This isn’t a big deal if you set your text using a &lt;a href=&#34;https://www.modularscale.com/&#34;&gt;modular scale&lt;/a&gt; or create shared Text Styles with &lt;a href=&#34;http://www.textstyl.es/&#34;&gt;Text Styles plugin&lt;/a&gt; to avoid inconsistency. But keep in mind you won’t need the plugin come Sketch 51.&lt;/p&gt;
&lt;p&gt;Now I have 4 primitive Libraries which I can use to build components. As the majority of components will reference these Libraries, component files will become smaller, less complex and easier to manage. Components will contain only a very few unique symbols, native to their file.&lt;/p&gt;
&lt;p&gt;Fewer unique parts means components remain ultra lightweight. Using Symbols store in my Libraries, I can now utilise Overrides to build highly flexible components.&lt;/p&gt;
&lt;p&gt;Let’s leave these 4 Library files for now. We’ll come back to them later when it’s time to construct the component.&lt;/p&gt;
&lt;h2 id=&#34;step-2-identify-component-variables&#34;&gt;Step 2: Identify component variables&lt;/h2&gt;
&lt;p&gt;Before building your component, aim to identify the requirements of the particular component. In other words, what are the unique attributes comprising the component?&lt;/p&gt;
&lt;p&gt;For the &lt;a href=&#34;https://ainlabs.netlify.com/components.html#avatars&#34;&gt;AIN Design System&lt;/a&gt; it made sense to build 2 styles of Avatar, to differentiate between the 2 different user types in the product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People — in the form of a profile image.&lt;/li&gt;
&lt;li&gt;Projects — in the form of a company logo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make these 2 user types noticeably different, a design decision was taken to use 2 visually different styles: &lt;code&gt;round&lt;/code&gt; for users and &lt;code&gt;square&lt;/code&gt; for companies.&lt;/p&gt;
&lt;p&gt;The next variable to consider was whether or not a user uploads an image or not. This meant we would have to create 2 component states, one &lt;code&gt;with an image&lt;/code&gt; and one &lt;code&gt;without an image&lt;/code&gt;, for both &lt;code&gt;round&lt;/code&gt; and &lt;code&gt;square&lt;/code&gt; styles.&lt;/p&gt;
&lt;p&gt;We decided to fallback to the users initials for cases when an image isn’t uploaded. This meant &lt;code&gt;text&lt;/code&gt; would also have to be considered for both styles.&lt;/p&gt;
&lt;p&gt;The final variable to consider was the &lt;code&gt;size&lt;/code&gt; of the Avatar. This was tricky to get exactly right before we knew all the potential use cases. It required some fine tuning after we began using the system, however the sizing scale remained true to the &lt;a href=&#34;https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632&#34;&gt;8pt grid&lt;/a&gt;, which we used for all components and spacing in the final system. If you’re new to the 8pt grid, this means all spacing units are multiples of 8, which helps ensure a consistent rhythm in your work.&lt;/p&gt;
&lt;p&gt;Ok that’s a lot to remember! Let’s break down these component requirements so they’re more manageable and we have a clear direction to take.&lt;/p&gt;
&lt;h3 id=&#34;breaking-down-the-requirements&#34;&gt;Breaking down the requirements&lt;/h3&gt;
&lt;p&gt;Avatars will need to have Override states for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Round&lt;/strong&gt;: (99px radius) for user avatars&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Square&lt;/strong&gt;: (4px radius) for company logos avatars&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;With an image&lt;/strong&gt;: for when a user uploads one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;With initials and a colour background&lt;/strong&gt;: for when a user doesn’t upload an image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5 sizes&lt;/strong&gt;: xl, l, m, s and xs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-identify-cases-of-reusability&#34;&gt;Step 3: Identify cases of reusability&lt;/h2&gt;
&lt;p&gt;Now we know the requirements for the component, let’s come back to those 4 primitive Libraries. Which of these existing Libraries can we use to build our Avatar component?&lt;/p&gt;
&lt;p&gt;As identified in my audit, Avatars in the system are made up of 5 primitive properties:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Color&lt;/code&gt;, &lt;code&gt;Shape&lt;/code&gt;, &lt;code&gt;Border&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt; and &lt;code&gt;Image&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3 of which can make use of the Libraries we made:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Color&lt;/code&gt;, &lt;code&gt;Shape&lt;/code&gt; and &lt;code&gt;Border&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Text&lt;/code&gt; and in this case &lt;code&gt;Image&lt;/code&gt;, are both specific to the Avatar component, meaning these have little to no re-use elsewhere in my system. So it makes sense to handle these specificities directly within the Avatar Sketch file.&lt;/p&gt;
&lt;h2 id=&#34;step-4-build-the-avatar-component&#34;&gt;Step 4: Build the avatar component&lt;/h2&gt;
&lt;p&gt;Now we know the requirements, it’s time to create a new Sketch file and build our component. In my case I called the file &lt;code&gt;AIN-avatars&lt;/code&gt;, where &lt;code&gt;AIN–&lt;/code&gt; is the project name prefix. Useful for if you decide to create more than one system.&lt;/p&gt;
&lt;p&gt;From here I updated my folder structure from a flat system to organising Libraries by Atomic Design principles. This step isn’t crucial but it may help you think about the parts to your system in order of complexity.&lt;/p&gt;
&lt;h3 id=&#34;method-using-abstract-for-version-control&#34;&gt;Method using Abstract for version control&lt;/h3&gt;
&lt;p&gt;If you are using Abstract to keep track of revisions and changes, files set up is slightly different. You will want to &lt;strong&gt;create your file from within Abstract&lt;/strong&gt;: &lt;em&gt;Add File &amp;gt; Create Sketch file as Library&lt;/em&gt;. This will prevent you running into problems where Abstract doesn’t recognise Symbols you made previously.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pro tips for Abstract: Always open files from within Abstract via the ‘Edit in Sketch’ button and not from Sketch. This will ensure the changes you make to your files are tracked by Abstract.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-symbol-overrides-for-avatar-images&#34;&gt;Create Symbol Overrides for avatar images&lt;/h3&gt;
&lt;p&gt;Inside my new file I created 5 Artboards, at my &lt;code&gt;xl&lt;/code&gt; size (120px x 120px), giving me 5 override options to use for user profile images.&lt;/p&gt;
&lt;p&gt;Remembering the shape of my user profile images, I named these Artboards &lt;code&gt;avatar / image / rounded / 1&lt;/code&gt; (1 through to 5) and created a 120px circle to fill each Artboard. Then I turned each shape into a mask: ctrl + click on the layer, then select Mask.&lt;/p&gt;
&lt;p&gt;I used the &lt;a href=&#34;https://uifaces.co/sketch-plugin&#34;&gt;UI Faces Sketch Plugin&lt;/a&gt; to auto generate my 5 images. Of course, you don’t have to stick to 5 images here, you could create as many user image overrides as you need. Once this is done turn each Artboard into a Symbol.&lt;/p&gt;
&lt;p&gt;From here, I created 5 more Artboards, again at my &lt;code&gt;xl&lt;/code&gt; size for my 5 company logo overrides. I names these Artboards &lt;code&gt;avatar / image / 4px / 1&lt;/code&gt; (1 through to 5). Next I added a shape layer with 4px radius, changed the color fill and added a different logo option for each. In my case I used logos from our other products, but you can use whichever Logos or graphics you wish.&lt;/p&gt;
&lt;p&gt;Don’t forget to turn your new Artboards into symbols once you’re done.&lt;/p&gt;
&lt;p&gt;Great! Now I have a total of 10 new symbols to use as Overrides for user profile images and company logos.&lt;/p&gt;
&lt;h3 id=&#34;create-master-symbol-for-each-component-size&#34;&gt;Create master Symbol for each component size&lt;/h3&gt;
&lt;p&gt;Building the master component is where the real Library magic happens. Here we’ll make use of our &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; Libraries from earlier. I call it a ‘master’ component as this is the Avatar component we’ll place into designs when building larger components and design comps.&lt;/p&gt;
&lt;p&gt;To make the master components, I made 5 more Artboards, at the 5 different sizes determined using the 8pt grid system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xl&lt;/code&gt;: 120px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: 96px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: 80px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: 64px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xs&lt;/code&gt;: 40px&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adding-symbol-overrides-from-libraries&#34;&gt;Adding Symbol Overrides from Libraries&lt;/h3&gt;
&lt;p&gt;Now we need to insert our &lt;code&gt;Shape&lt;/code&gt; Library. Do this for each of the 5 Artboard sizes: &lt;em&gt;Insert &amp;gt; AIN-shapes &amp;gt; shape/radius &amp;gt; rounded&lt;/em&gt;. This will allow us to change the Avatar shape from round to square for company logos.&lt;/p&gt;
&lt;p&gt;As my Color Library is nested inside my shape Library, that kills two birds with one stone. We now have control of our Avatar shape and color in the form of Symbol Overrides.&lt;/p&gt;
&lt;p&gt;Make sure the shape layer sits at the bottom, and you’ve renamed the layer &lt;code&gt;shape&lt;/code&gt; for clean naming in your Override options.&lt;/p&gt;
&lt;p&gt;Now let’s do the same for the border. Our border will be handy for when the Avatar contains an image which clashes with the background colour of its container. Insert a border for each Artboard size now: &lt;em&gt;Insert &amp;gt; AIN-borders &amp;gt; border/radius &amp;gt; rounded &amp;gt; white&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once you’ve placed your border library and it matches the shape, make sure the new layer sits at the top of the layer stack and you’ve renamed the layer to &lt;code&gt;border&lt;/code&gt;. Again, this will keep your Overrides panel clean and easy to read.&lt;/p&gt;
&lt;h3 id=&#34;adding-the-image-override-symbol-to-master-component&#34;&gt;Adding the image Override Symbol to master component&lt;/h3&gt;
&lt;p&gt;Now let’s insert those image overrides we created earlier. Providing you named your Artboards sequentially, following the same naming convention, you should be able to override your image with any of the 5 options we made earlier: &lt;em&gt;Insert &amp;gt; Symbols &amp;gt; avatar &amp;gt; image &amp;gt; rounded &amp;gt; 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you do this for each size. Again, rename the new layer to &lt;code&gt;image&lt;/code&gt; for clean override names. Your image layer should sit above your shape layer.&lt;/p&gt;
&lt;h3 id=&#34;adding-text-for-users-initials&#34;&gt;Adding text for users initials&lt;/h3&gt;
&lt;p&gt;The final stage is to add the text used to write the initials of our user or company name. Initials only show in the component if a user fails to upload an image, for both user profile images and company logos.&lt;/p&gt;
&lt;p&gt;As mentioned, you can create text styles based on your typography scale, or use the &lt;a href=&#34;http://www.textstyl.es/&#34;&gt;Textstyl.es plugin&lt;/a&gt; to synced your shared text styles* from another sketch file to your Avatar component file.&lt;/p&gt;
&lt;p&gt;*Shared text styles will become a native Sketch feature called ‘Library Styles’ in Sketch 51.&lt;/p&gt;
&lt;p&gt;Using the type scale used throughout my design system, I chose 3 font sizes: &lt;code&gt;20px&lt;/code&gt;, &lt;code&gt;16px&lt;/code&gt;, &lt;code&gt;14px&lt;/code&gt; which fit all 5 component sizes.&lt;/p&gt;
&lt;p&gt;I made a new text layer for each Symbol size, placing it below the image layer. Now the text will be hidden from view whenever an image is selected.&lt;/p&gt;
&lt;h2 id=&#34;step-5-using-component-overrides&#34;&gt;Step 5: using component overrides&lt;/h2&gt;
&lt;p&gt;You should now have a flexible &lt;code&gt;Avatar&lt;/code&gt; component, built using the fewest number of unique symbols possible.&lt;/p&gt;
&lt;p&gt;In order to test out your new component and its Overrides, insert a master symbol at the size of your choice: &lt;em&gt;Insert &amp;gt; Symbol &amp;gt; Avatar &amp;gt; xlarge&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Providing you have the symbol selected, in the Inspector window on the right you will see all the possible overrides including those from your external Libraries.&lt;/p&gt;
&lt;p&gt;To make sense of all my Override options I made a page called &lt;code&gt;Avatars&lt;/code&gt; where I keep a visual reference of all possible instances of Avatars used in my design.&lt;/p&gt;
&lt;p&gt;You should now have a complete Avatar component stored in a Library which can be nested in other Sketch files. We’ll take a look at how this works when we make a card component in the next article.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;There are a number of ways you can improve your workflow from here. I’ll start with a few essentials and let you run with it from there. You may well have specific requirements for your project which I haven’t accounted for.&lt;/p&gt;
&lt;h3 id=&#34;using-sketch-runner-to-improve-speed-and-efficiency&#34;&gt;Using Sketch Runner to improve speed and efficiency&lt;/h3&gt;
&lt;p&gt;Sketch runner is a valuable tool when it comes to using your Symbols and Libraries. Insert your components with &lt;code&gt;cmd + &#39;&lt;/code&gt;, then start typing the name of your symbol. This will become the fastest way to build mockups using your components as you start to remember all your various component names.&lt;/p&gt;
&lt;h3 id=&#34;versioning-and-collaborating-on-libraries-using-abstract&#34;&gt;Versioning and collaborating on Libraries using Abstract&lt;/h3&gt;
&lt;p&gt;I touched earlier on using Abstract for versioning your work.&lt;/p&gt;
&lt;p&gt;When you follow a component based workflow using multiple Libraries, Abstract will help you stay on top of all your files as your system grows or if you’re working as part of a team.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Protip: Add your files to Abstract from the start. This will prevent you from having to comb through your files updating Symbols in order for Abstract to track them. I had to do this, and it wasn’t much fun!&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-libraries-with-your-team-via-sketch-cloud&#34;&gt;Sharing Libraries with your team via Sketch Cloud&lt;/h3&gt;
&lt;p&gt;Sketch 49 saw the release of Sketch Cloud. Native sharing and collaborating on your Libraries with other designers is now possible, so no need for Dropbox or Google Drive.&lt;/p&gt;
&lt;p&gt;Personally I’ve been working as a solo design on the design systems I’ve created so haven’t used Sketch Cloud but would be interested in hearing from anyone who has.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this article we’ve looked at how adopting principles from both Atomic and Subatomic Design can help us better understand how to build highly flexible Atom level components, using Sketch Libraries and Symbol Overrides.&lt;/p&gt;
&lt;p&gt;By building components primarily using Symbols from Libraries, we can reduce redundancy and design debt. Whilst Symbol Overrides allow us to maintain maximum flexibility in our components. Storing our components in Libraries keeps files lightweight, making our system easier to maintenance and less of a hassle to update.&lt;/p&gt;
&lt;p&gt;These components will become an integral part of our component based UI design system, as we use them as building blocks to rapid prototype larger parts of UI faster and with fewer inconsistencies.&lt;/p&gt;
&lt;p&gt;In the next part we’ll look at using Atom level components — the Avatars built here along with buttons — to build more complex component patterns, such as cards. You might categorise these larger components as Molecules, as per Atomic Design, but of course that’s totally your call.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://daneden.me/2018/01/05/subatomic-design-systems/&#34;&gt;Subatomic Design Systems&lt;/a&gt; by Daniel Eden&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atomicdesign.bradfrost.com/chapter-5/&#34;&gt;Maintaining Design Systems&lt;/a&gt; by Brad Frost&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.invisionapp.com/inside-design/guide-to-design-systems/&#34;&gt;A Comprehensive Guide to Design Systems&lt;/a&gt; by Will Fanguy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-and-primitives-to-build-an-even-better-system-of-buttons-ecc8f25486ac&#34;&gt;Sketch Libraries: Building a better system of buttons&lt;/a&gt; by me.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/ux-power-tools/sketch-libraries-how-they-work-and-the-crazy-stuff-you-can-do-with-them-fc10f142ac80&#34;&gt;Sketch Libraries: How they work, and the crazy stuff you can do with them&lt;/a&gt; by Jon Moore.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/sketch-app-sources/text-system-mastery-with-shared-styles-9931bea7d085&#34;&gt;Text System Mastery with Shared Styles&lt;/a&gt; by Bunin Dmitriy&lt;/li&gt;
&lt;li&gt;Exporting text styles with &lt;a href=&#34;http://www.textstyl.es/&#34;&gt;Textstyl.es&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zeroheight/library-styles-sync&#34;&gt;Library Styles Sync plugin&lt;/a&gt; to sync shared styles from Library to doc&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Building With Your Users</title>
        <link>https://azharkhan.in/notes/building-with-your-users/</link>
        <pubDate>Thu, 15 Mar 2018 11:18:40 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/notes/building-with-your-users/</guid>
        <description>&lt;p&gt;”Build with your users, get quick feedback loops, and iterate after. We are so biased and imperfect as humans that it&amp;rsquo;s impossible to get it right from the start. Also, you might get it right, but you might miss other bigger opportunities. Focus, start quickly, and put your product in front of users and let the free market destroy it or love it.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This was taken from an interview with &lt;a href=&#34;https://twitter.com/vinrob&#34;&gt;Robin Vander Heyden&lt;/a&gt; on &lt;a href=&#34;https://www.indiehackers.com/&#34;&gt;Indie hackers&lt;/a&gt; where he discusses the success of his company &lt;a href=&#34;https://www.manypixels.co/&#34;&gt;ManyPixels&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiehackers.com/interview/finding-inspiration-abroad-shipping-fast-and-growing-to-50k-mo-e55f6feafd&#34;&gt;Finding Inspiration Abroad, Shipping Fast, and Growing to $50k/mo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      
    
      
      <item>
        <title>Better design systems in Sketch</title>
        <link>https://azharkhan.in/articles/better-design-systems-sketch-libraries/</link>
        <pubDate>Thu, 19 Oct 2017 21:15:59 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/better-design-systems-sketch-libraries/</guid>
        <description>&lt;p class=&#34;Message&#34;&gt;
    
This article was originally posted on &lt;a href=&#34;https://blog.usejournal.com/using-sketch-libraries-to-build-a-better-ui-design-system-part-1-26f5660f3c98&#34;&gt;Medium.com&lt;/a&gt;

&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Design is just problem solving within a set of constraints. In the grand scheme of things, it rarely has anything to do with graphics.” 
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash;  Adam Morse&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;Designers who have worked with &lt;a href=&#34;https://airbnb.design/building-a-visual-language/&#34;&gt;a design system&lt;/a&gt; before will understand constraints as the various elements in a visual language, constructed to guide our every decision. Colors, icons and buttons are just some of these elements which together, form a unified system of tools to work with.&lt;/p&gt;
&lt;p&gt;Systems of constraint help us pave a path in which to follow, improving the efficiency and speed of our process. Promoting reusability and consistency in our work, they enable us to design better digital products. When used effectively, our projects are scalable and maintaining them easier.&lt;/p&gt;
&lt;p&gt;That being said, often the reality of managing these systems is quite different. Whilst Sketch has made the process easier, it’s still not without it’s quirks.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Before the arrival of Sketch Libraries we had &lt;a href=&#34;https://www.sketch.com/docs/symbols/&#34;&gt;Symbols&lt;/a&gt;— the biggest leap forward to date, in the world of design systems. Symbols helped solve issues concerning consistency, making parts of our interface re-usable. However Symbols were document dependent. Until now, there was no native way for Symbols to transcend the Sketch files they lived in.&lt;/p&gt;
&lt;h3 id=&#34;why-is-this-a-problem&#34;&gt;Why is this a problem?&lt;/h3&gt;
&lt;p&gt;For small projects this wasn’t a big deal. You could keep your entire design in one Sketch document. Mockups, wireframes, userflows, UI Kit, the lot. Symbols worked fine as all your project required was in one document.&lt;/p&gt;
&lt;p&gt;But what happens when you’re designing bigger projects? Perhaps you want Sketch to run fast and free of bloat, so you split your project into multiple sketch files, surely it will be easier to manage? It will. That is until you want these various files to reference one set of symbols.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&#34;https://www.angelinvestmentnetwork.co.uk/&#34;&gt;AIN&lt;/a&gt; we have 3 different products which all utilise one design system (or set of symbols). The challenge has been working out how to use the same set of symbols simultaneously, for all 3 projects. Bare in mind these projects are big, each one containing hundreds of Artboards. Using one Sketch document for everything just wouldn’t make sense—the file size would be unmanageable.&lt;/p&gt;
&lt;h3 id=&#34;the-old-way-of-doing-it&#34;&gt;The old way of doing it&lt;/h3&gt;
&lt;p&gt;My old process involved using a Sketch Template for my Symbols, which I picked up from &lt;a href=&#34;https://blog.marvelapp.com/creating-maintaining-marvel-style-guide-sketch/&#34;&gt;Yavor Punchev’s awesome process for the Marvel style guide&lt;/a&gt;. I extended Yavor’s method by pulling Symbols into different Sketch documents using the Shared Library feature of Craft plugin by Invision. Maybe this process sounds familiar?&lt;/p&gt;
&lt;p&gt;Truth be told, this is a hacky process which I don’t recommend using. Yes my files were bloat free, and I could insert Symbols into multiple documents, but I had no way of syncing updates to those Symbols already in use across different files.&lt;/p&gt;
&lt;p&gt;Symbols are designed to make projects easier to maintain. Whilst this method allowed for re-usability, it made maintaining and updating existing symbols impossible.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: I couldn’t use Sketch Runner to search for and insert symbols on the fly using this process. Nothing major but still annoying as Runner is a huge time saver.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Luckily, the solution arrives with Libraries, new for Sketch 47.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.sketchapp.com/libraries-an-in-depth-look-56b147022e1f&#34;&gt;Sketch Libraries&lt;/a&gt; allow you to create a Library of Symbols, which can be use across multiple documents. We’re talking SASS partials for the developers out there. On top of that, you can also nest Libraries within Libraries. This is big news.&lt;/p&gt;
&lt;p&gt;Essentially, you can now keep different groups of symbols in their own Sketch file. That means different document for your buttons, colours, icons, form elements, and whatever else you might use in your system. Other documents in your project can then reference the symbols in these source files, and at the click of a button sync when you make any updates to those symbols.&lt;/p&gt;
&lt;p&gt;Simply put; you now have one source of truth for all your different UI element, which, in turn, all your other Sketch files reference. The advantages to doing this will soon become clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smaller file sizes&lt;/li&gt;
&lt;li&gt;Faster Sketch performance&lt;/li&gt;
&lt;li&gt;Reusable components&lt;/li&gt;
&lt;li&gt;Maintainable projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@pablostanley&#34;&gt;Pablo Stanley&lt;/a&gt; summed it up pretty well: “This is like the holy grail of product design”. You can watch Pablo getting excited about Libraries here.&lt;/p&gt;
&lt;p&gt;Libraries explained by the Sketch team:&lt;/p&gt;
&lt;p&gt;_“A Library is just an ordinary Sketch document that contains Symbols which you can then use in any other Sketch document. If you update any of those Symbols in your Library file, documents containing instances of those Symbols will receive a notification telling you that they can be updated. Here you can preview, check, and confirm changes — and by doing so, you can always ensure your documents are using the up-to-date copies of those components.” _&lt;/p&gt;
&lt;h2 id=&#34;putting-sketch-libraries-into-practice-to-build-a-component-library&#34;&gt;Putting Sketch Libraries into practice to build a component library&lt;/h2&gt;
&lt;p&gt;The next part of this article will look how I’m using Sketch Libraries to maintain a system of UI components. But first, there are a few things to keep in mind:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think like a developer&lt;/strong&gt;
Adopting the developer mindset when designing systems is imperative. There are many lessons we can learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D.R.Y — Don’t repeat yourself&lt;/strong&gt;
The idea is to create re-usable components. This keeps our files lightweight and our design consistent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think in Primitives&lt;/strong&gt;
Every component we create is made up of a certain set of properties. These properties are the most ‘primitive’ elements, used throughout a design system. A developer would create variables for these properties to prevent duplicates in the code. We can do the same, by creating a Library files for all primitives which we can utilise when we build larger components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomic Design Methodology&lt;/strong&gt;
I’m following &lt;a href=&#34;http://bradfrost.com/blog/post/atomic-web-design/&#34;&gt;Brad Frost’s Atomic Design Methodology&lt;/a&gt; for building scaleable interfaces. Primarily because it’s easy follow and everyone understands the principles.&lt;/p&gt;
&lt;p&gt;In a nutshell, Atomic Design takes inspiration from the molecular structure of the natural word. Where Atoms; the basic building blocks or in our case the smallest parts of a visibly recognisable UI, combine to form Molecules; the larger parts of our interface. Organisms are the assemblies of these Molecules and represent even larger, more complex parts of our interface.&lt;/p&gt;
&lt;h3 id=&#34;separate-sketch-documents-for-all-groups-of-symbols&#34;&gt;Separate Sketch documents for all groups of symbols&lt;/h3&gt;
&lt;p&gt;Of course, you can still create one file for all your components if you prefer—and reference Symbols from that file in other documents—however my suggestion (and the way we’ll be doing it here) is to create individual documents for each group of Symbols.&lt;/p&gt;
&lt;p&gt;Again, this is similar to how a developer might use Sass partials. Using lots of smaller documents make our design system easier to manage. The other advantage is our Library files will be re-useable in other projects and importantly, it will be scaleable.&lt;/p&gt;
&lt;p&gt;By thinking in primitives, we can start by creating Libraries for the core elements which will be used across our entire design system. These basic properties will make up all Atoms, Molecules and Organisms.&lt;/p&gt;
&lt;p&gt;Let’s start by creating a new Sketch document for the colors in our system. Colors are highly reusable and found throughout our UI—a sensible place to start.&lt;/p&gt;
&lt;h2 id=&#34;step-1-create-a-new-sketch-document-for-your-colors&#34;&gt;Step 1: create a new Sketch document for your colors&lt;/h2&gt;
&lt;p&gt;I started by prefixing the name of my sketch document with AIN- so not to confuse them with any other ‘non AIN’ projects I’m currently working on. For example AIN-colors and so fourth.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Obviously this part is totally optional but you might find it useful if, like me, you work on several different unrelated projects and like to be organised.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Following this, I made a Shared Style for each colour in our design system and organised them into categories: brand, greyscale and ui by using a ‘/’ in the name, to build the folder structure.&lt;/p&gt;
&lt;p&gt;Then I made each color style into a Symbol, and arranged them on my Symbols page using the &lt;a href=&#34;https://github.com/sonburn/symbol-organizer&#34;&gt;Symbol Organiser&lt;/a&gt; plugin. My category naming convention from the previous step made this process nice and straight forward. Now all my Symbols are clearly labeled and organised.&lt;/p&gt;
&lt;h2 id=&#34;step-2-turn-your-colors-document-into-a-library&#34;&gt;Step 2: turn your colors document into a Library&lt;/h2&gt;
&lt;p&gt;The next step is to turn your file to a Sketch Library. We will need to do this each time we want to use a Sketch file into a Library.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Sketch &amp;gt; Preferences&lt;/em&gt;, you’ll find the new Libraries tab. Click Add Library and locate your new file.&lt;/p&gt;
&lt;p&gt;Using my example from above, I made my AIN-colors document into my first Library. As my colors document is now a Library, I can nest my colors inside of other Sketch files. This is where the power of Libraries comes in. We will see how helpful this is when I create the next Library document in the system – for my icons.&lt;/p&gt;
&lt;h2 id=&#34;step-3-create-a-new-sketch-file-for-your-icons&#34;&gt;Step 3: create a new Sketch file for your icons&lt;/h2&gt;
&lt;p&gt;Next I did the same thing as I just did for my colors, but this time for icons.&lt;/p&gt;
&lt;p&gt;First create a file for your all your icons. This time I named the document AIN-icons and saved it in the same folder as my AIN-colors file. This is the start of my ‘folder of truth’—the directory that all the components in my design system will live in.&lt;/p&gt;
&lt;p&gt;I then created a 24x24px Artboard and placed the icon. I made a 24x24px transparent container below the icon shape (if your using Google’s Material Icons this will already be in place), then I inserted the brand color Symbol from my AIN-colors Library (Insert &amp;gt; AIN-colors) on top of my icon shape. Resizing the Symbol to 24x24px after.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: the purple Symbol icon in the layer view is now a link, instead of the usual rotating arrows. This means your Symbol is from an external library which your file is referencing. So don’t expect to find it on the Symbols page in your current document.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next I turned my icon shape into a mask (Ctrl + Click &amp;gt; Mask), which reveals the original icon shape below. Now our icon shape is masking the color Symbol from our Color Library.&lt;/p&gt;
&lt;p&gt;Awesome, I’ve used my first Library. That means I can now change the color of my icons throughout my system, to any color in my color Library. If I need to make changes to my AIN-color file, those changes will also occur in my icons file or anywhere else I reference my colors Library.&lt;/p&gt;
&lt;p&gt;Next, be sure to turn each icon Artboard into a Symbol, this is important if you want to use your icons document as a Library—which we do.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pro tip: When creating your icon Symbols, make sure you check “Adjust content on resize” and set “pin object to all edges on re-size”, this will ensure you icon scales, should you wish to use it at bigger or smaller sizes than the base size of 24px. Also make sure your size dimensions are locked so the whole Symbol scales correctly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I repeated this process for all icons used in the AIN design system, each set at a base size of 24px. Then I organised my Symbols using the Symbols Organizer plugin, as before.&lt;/p&gt;
&lt;h2 id=&#34;step-4-turn-your-icons-file-into-a-library&#34;&gt;Step 4: turn your icons file into a Library&lt;/h2&gt;
&lt;p&gt;This is the same process as Step 2 above, so follow that again, but this time for your icons.&lt;/p&gt;
&lt;p&gt;At this point you should have 2 Library files. In my case I have AIN-colors and AIN-icons. Now our icons are ready to use in other documents.&lt;/p&gt;
&lt;h2 id=&#34;step-5-repeat-the-process-for-your-atoms&#34;&gt;Step 5: repeat the process for your atoms&lt;/h2&gt;
&lt;p&gt;Hopefully this has been enough to help you get the gist of this workflow.&lt;/p&gt;
&lt;p&gt;Continue with your own system by creating Library files for all the different Atoms in your design system. Build your Atoms from the Primitive Library files you’ve created. Nesting them as you go. For the design system at AIN, I made Libraries for my buttons, form elements, avatars and so on, until I had a folder of truth containing all the atom level elements in our system. I can now reference these Libraries in other documents, where I’m designing even larger components of the interface and hi-fidelity mockups.&lt;/p&gt;
&lt;h3 id=&#34;updating-your-library-files&#34;&gt;Updating your Library files&lt;/h3&gt;
&lt;p&gt;Inevitably, you will at some point need to make changes to Symbols in your core Library files. Luckily this is pretty straight forward, just make your changes as normal. When changes are made, any other documents containing the updated Symbols will show an alert in the top right corner of the Sketch document which needs updating.&lt;/p&gt;
&lt;p&gt;When you see this, make sure you click it. Sketch will show you the outdated symbols and the new versions which will replace them. Click Update Symbols to sync the changes across documents. That’s it, pretty simple.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;Once you’ve built your Atoms, you’re ready to start building more complex parts of your UI; your ‘Molecules’ if you like, and following that, your ‘Organisms’. Each time making use of the Libraries you’ve created by nesting them inside one another.&lt;/p&gt;
&lt;p&gt;As your system become more complex and you build out your interface, you can utilise these Libraries you’ve created. In essence, you will now have a Sketch design system to work with, usable in any document or any project.&lt;/p&gt;
&lt;p&gt;In the second part we’ll look at putting our system to use, by building out the more complex components, for now here are a few ideas of where to go next:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible ideas for Molecules:&lt;/strong&gt; Navigation, Hero, Banner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible ideas for Organisms:&lt;/strong&gt; Cards, Media, Header, Footer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The Atomic Design Methodology is just a guideline, there are no set rules. If your navigation is complex it might be more suited to being an Organism. In that case go with it. Use the method as you see fit. Alternatively come up with a method of your own.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-libraries-across-different-devices&#34;&gt;Sharing Libraries across different devices&lt;/h3&gt;
&lt;p&gt;One thing I haven’t looked at is how Libraries work with Dropbox or Google Drive. I’m guessing this isn’t a big deal, but I haven’t tried it yet. This would be super useful for remote workers or teams looking to share design assets or work with a system across multiple devices. Perhaps you know more about this than I do?&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We just looked at using &lt;a href=&#34;https://www.sketch.com/docs/libraries/&#34;&gt;Libraries&lt;/a&gt; new for &lt;a href=&#34;https://blog.sketchapp.com/introducing-libraries-and-smooth-corners-in-sketch-47-2abc5dfc1fb3&#34;&gt;Sketch 47&lt;/a&gt; to create a modular system or component library to use in our design projects. Hopefully by now it’s clear how powerful the feature is.&lt;/p&gt;
&lt;p&gt;If you’re working in a team of designers, sharing design elements or working independently and looking for a better way to manage on-going projects then try incorporating Libraries into your workflow. Libraries are easily the biggest leap forward for Sketch users since Symbols when it comes to the challenging process of maintaining a design system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dropbox.com/home/harrycresswell/05_writing/graphics%20and%20images/medium%20articles/sketch-libraries-part-1/sample%20project%20for%20download/folder%20of%20truth&#34;&gt;Download the example project&lt;/a&gt; for reference, it includes files for colors, icons and buttons, plus a quick example project which uses these Library files. I hope it helps you to see how I’ve set things up. Bare in mind you’ll need a copy of Sketch 47 for all this stuff to work.&lt;/p&gt;
&lt;p&gt;If you found this article helpful, please share it with any friends who would benefit. Thanks for reading!&lt;/p&gt;
&lt;p&gt;Looking for part 2? You can &lt;a href=&#34;https://medium.com/sketch-app-sources/using-sketch-libraries-to-build-a-better-ui-design-system-part-2-8de6cef5adc5&#34;&gt;find it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sketchapp.com/libraries-an-in-depth-look-56b147022e1f&#34;&gt;Libraries, an in depth look&lt;/a&gt; by Sketch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/ux-power-tools/sketch-libraries-how-they-work-and-the-crazy-stuff-you-can-do-with-them-fc10f142ac80&#34;&gt;Sketch Libraries&lt;/a&gt; by Jon Moore&lt;/li&gt;
&lt;li&gt;Brad Frost’s &lt;a href=&#34;http://atomicdesign.bradfrost.com/chapter-2/&#34;&gt;Atomic Design Methodology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pablo Stanley on &lt;a href=&#34;http://atomicdesign.bradfrost.com/chapter-2/&#34;&gt;Sketch Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sketchapp.com/introducing-libraries-and-smooth-corners-in-sketch-47-2abc5dfc1fb3&#34;&gt;Introducing Libraries&lt;/a&gt; by Sketch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://airbnb.design/building-a-visual-language/&#34;&gt;Airbnb: Building a Visual Language&lt;/a&gt; from Karri Saarinen&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Naming Artboards for responsive web design</title>
        <link>https://azharkhan.in/articles/artboards/</link>
        <pubDate>Sun, 02 Apr 2017 21:34:41 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/artboards/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Naming Artboards might not be the most exciting subject, but non the less, it&#39;s an important one. If it&#39;s not already, a solid Artboard naming system should be a critical part of your design process.
&lt;/p&gt;

&lt;p&gt;A year or so ago I started thinking more about how best to name Artboards in Sketch. After a fair bit of trial and error, I arrived at a particular technique which just works. &lt;strong&gt;I&amp;rsquo;ve used this method extensively for a year&lt;/strong&gt; or so now without having to revisit it.&lt;/p&gt;
&lt;p&gt;More recently, I decided to find out if anyone else had approached the subject of naming Artboards, but I found very little. Seeing as not much had been written, I figured it was time to share my method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This technique is best suited to Responsive Web Design (RWD)&lt;/strong&gt;. That being said, if your focus is on design for mobile the principles still remain the same and it should work just as well.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used this technique both for personal projects and in production working with teams. It has helped us to clean up (and stay on top of) otherwise complex and unmanageable Sketch files. Without much thought, we&amp;rsquo;re now producing &lt;strong&gt;well organised, scaleable mockups which are easy to maintain&lt;/strong&gt;. At the very least, using this technique should help you avoid the numerous headaches caused by messy Sketch files, when you’re working on big projects or as part of a team.&lt;/p&gt;
&lt;p&gt;Before I get into explaining the technique, let&amp;rsquo;s first look at why you might want to consider using a system to name your Artboards in the first place.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-organised-albion-03.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;A well organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;A well organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;maintainability&#34;&gt;Maintainability&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re designers. We like to be organised.&lt;/p&gt;
&lt;p&gt;Nobody wants to fire open a sketch file in 6 months time and find a mess of arbitrarily named Artboards. I certainly don&amp;rsquo;t, i&amp;rsquo;m sure you don&amp;rsquo;t either. &lt;strong&gt;It pays to be organised, and that goes for your Artboards too&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So the point is this; we want to be able to know exactly what state, in what stage, of what flow any given Artboard belongs to. In order to do this we need a system. A system that is quick to understand — by anyone in our team — and efficient in its implementation. No nonsense. Minimal fuss.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;ll agree with me here. The sketch file below — where the Artboards are clearly named and numbered — will be easier to manage than the Sketch file below that.&lt;/p&gt;
&lt;p&gt;This Sketch file isn&amp;rsquo;t doing anyone any favours. As this file grows it&amp;rsquo;ll become a nightmare to deal with.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-unorganised.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;A badly organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;A badly organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;scalability&#34;&gt;Scalability&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does it scale?&lt;/strong&gt; We&amp;rsquo;re not talking about front end frameworks here (let&amp;rsquo;s leave that for another one). Instead, we&amp;rsquo;re trying to solve the problem you have when you need to add in an extra step (or stage) to a flow you created a last week, let&amp;rsquo;s say. &lt;strong&gt;Does your system allow you to add in extra Artboards — anywhere in the sequence&lt;/strong&gt; — without you having to go through and rename the rest of your Artboards to maintain some sort of order?&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-organised-albion-02.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Another well organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Another well organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;communication&#34;&gt;Communication&lt;/h2&gt;
&lt;p&gt;In most cases the design process tends to involve a few more people than just one designer.&lt;/p&gt;
&lt;p&gt;So the question is; &lt;strong&gt;does the rest of our team also understand what&amp;rsquo;s going on in our Sketch file?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok, I doubt all team members will need access to our Sketch files, but they will have to see them at some point. Without a naming system, the problems will start to show when you start using a prototyping tool like Invison. Unless your working on a side project, your team, your client or whoever will need to feedback on your designs. Sure they can comment on Invision, but all too often you&amp;rsquo;ll find you need a simple way to verbally discuss an Artboard. Let&amp;rsquo;s say by using a reference code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Giving your team a quick and easy way to reference Artboards will make your life a lot easier&lt;/strong&gt;, particularly as your project grows.  We like our team right? Let&amp;rsquo;s introduce a system which is great for them and not just ourselves.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-invision.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Prefixing Artboard names with a reference short code makes discussion and organisation easier&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Prefixing Artboard names with a reference short code makes discussion and organisation easier&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;Ok enough of the reasoning, i&amp;rsquo;m sure you get the idea by now. Let&amp;rsquo;s look take a look at the system and explain how it works.&lt;/p&gt;
&lt;h2 id=&#34;how-the-system-works&#34;&gt;How the system works&lt;/h2&gt;
&lt;p&gt;Ok, the basic idea is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you use a 4 level sequence.&lt;/li&gt;
&lt;li&gt;Use both a reference code and a description.&lt;/li&gt;
&lt;li&gt;Pick a clear and descriptive, sequential structure (i.e Breakpoint, Flow, Stage, State).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-a-4-level-sequence&#34;&gt;Using a 4 level sequence&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m using &lt;strong&gt;a 4 level numerical sequence followed by a description&lt;/strong&gt;, where the purpose of the description is to explain the numerical sequence in a more verbose manor.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264882/hc/naming-artboards-in-sketch-01.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;4 level sequence — Breakpoint, Flow, Stage, State&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;4 level sequence — Breakpoint, Flow, Stage, State&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;The four levels represent the &lt;strong&gt;Breakpoint, the flow, the stage and the state&lt;/strong&gt; of our design.&lt;/p&gt;
&lt;p&gt;I will come to exactly what I mean by this a bit later, but first let&amp;rsquo;s look at why we&amp;rsquo;re using a code and a description.&lt;/p&gt;
&lt;h3 id=&#34;use-a-reference-code-and-a-description&#34;&gt;Use a reference code and a description&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Using both a code and a description makes our Artboards easy to understand and equally as easy to reference&lt;/strong&gt; — and not just by us — by the whole of our team.&lt;/p&gt;
&lt;p&gt;On it&amp;rsquo;s own, the description (let&amp;rsquo;s call it the &lt;code&gt;Unique Identifying Description&lt;/code&gt; or &lt;code&gt;UID&lt;/code&gt; for short) isn&amp;rsquo;t exactly quick to reference, and it doesn&amp;rsquo;t help us order our Artboards in any way, but it is still important as it accurately explains the contents of our Artboard.&lt;/p&gt;
&lt;p&gt;By prefixing the &lt;code&gt;UID&lt;/code&gt; with a numerical sequence, we now have a quick and easy reference code, if you like. By adding this code (let&amp;rsquo;s call it the &lt;code&gt;Unique Identifier Code&lt;/code&gt; or &lt;code&gt;UIC&lt;/code&gt; for short) we now have a clear system for ordering our Artboards. &lt;strong&gt;This is particularly useful when we start using tools like Invision&lt;/strong&gt; and you or another team member needs to pin point a particular Artboard to discuss.&lt;/p&gt;
&lt;p&gt;Likewise, using the &lt;code&gt;UIC&lt;/code&gt; alone won&amp;rsquo;t make much sense — it&amp;rsquo;s not descriptive of the Artboards contents. But add the two together and you have a quick shortcode (the &lt;code&gt;UIC&lt;/code&gt;) used for reference purposes, and a more descriptive text version (the &lt;code&gt;UID&lt;/code&gt;), which helps us further identify the design on our Artboard.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264891/hc/naming-artboards-in-sketch-02.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Using a unique identifying code and description&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Using a unique identifying code and description&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;the-sequential-structure&#34;&gt;The sequential structure&lt;/h2&gt;
&lt;p&gt;Ok. So why use four levels, isn&amp;rsquo;t that over kill? Surely one level is enough? Can&amp;rsquo;t we just use something like &lt;code&gt;1 - homepage&lt;/code&gt;, &lt;code&gt;2 - checkout&lt;/code&gt; etc, and be done with it? And, &lt;strong&gt;what exactly does the Breakpoint, Flow, Stage and State represent?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at that now — it will help us understand why having four levels in the sequence is important.&lt;/p&gt;
&lt;h3 id=&#34;the-breakpoint&#34;&gt;The Breakpoint&lt;/h3&gt;
&lt;p&gt;In RWD, the Breakpoint is very important, so we will consider this first. &lt;strong&gt;The breakpoint is the screen resolution you are designing for&lt;/strong&gt;, in case you didn&amp;rsquo;t know. Think &lt;code&gt;1200px&lt;/code&gt;, &lt;code&gt;960px&lt;/code&gt;, &lt;code&gt;768px&lt;/code&gt;, &lt;code&gt;320px&lt;/code&gt; or if you prefer Desktop HD, Desktop, Tablet, Mobile etc. This should be the deciding factor that determines what Artboard size you choose for your design.&lt;/p&gt;
&lt;p&gt;If you are design a responsive website you&amp;rsquo;re design will most likely change at different screen sizes. We&amp;rsquo;ll need a different Artboard to show how the design looks for each size.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say our design isn&amp;rsquo;t a mockup of the large desktop view (like in the example above), but in fact a regular desktop view or a mockup of our website at a breakpoint of &lt;code&gt;960px&lt;/code&gt;. In this case we would create a new Artboard and change the breakpoint in our Artboard name to reflect that.&lt;/p&gt;
&lt;p&gt;In the example below you can see the Breakpoint is &lt;code&gt;960&lt;/code&gt;. this, of course, stands for &lt;code&gt;960px&lt;/code&gt; or our desktop size. Suggesting the Artboard shows how our website will look on a Desktop browser.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-03.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Breaking down the identifier code&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Breaking down the identifier code&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h3 id=&#34;the-flow&#34;&gt;The Flow&lt;/h3&gt;
&lt;p&gt;Flow is second in the sequence. This is &lt;strong&gt;the particular user flow you are designing&lt;/strong&gt;. An obvious example would be, let&amp;rsquo;s say, the &lt;code&gt;Checkout&lt;/code&gt; flow. Think UX here. &lt;strong&gt;A flow is the journey a user takes around a site to complete a particular action&lt;/strong&gt;. A flow will most likely consist of a number of pages or stages, if you like.&lt;/p&gt;
&lt;p&gt;Ok, so you&amp;rsquo;ve got the hand of it now.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-04.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The checkout (or second) flow at a breakpoint of 960px&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The checkout (or second) flow at a breakpoint of 960px&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This tells us that the Artboard shows our design at a breakpoint of &lt;code&gt;960px&lt;/code&gt; (i.e desktop) and the design is part of the checkout flow. Which is the second flow in our website. Notice the second number in the sequence has now changed to 2.&lt;/p&gt;
&lt;h3 id=&#34;the-stage&#34;&gt;The Stage&lt;/h3&gt;
&lt;p&gt;Third in the sequence is the stage. &lt;strong&gt;The stage represents the part or step within in a flow&lt;/strong&gt;. If we think back to our example &lt;code&gt;checkout&lt;/code&gt; flow, a familiar stage in this flow might be &lt;code&gt;payment details&lt;/code&gt;, as opposed to &lt;code&gt;shipping details&lt;/code&gt;, or &lt;code&gt;checkout complete&lt;/code&gt;. These are all stages, which might make up our &lt;code&gt;checkout&lt;/code&gt; flow.&lt;/p&gt;
&lt;p&gt;Updating our example above might result in something like this:&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-05.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The payment details stage in the checkout flow&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The payment details stage in the checkout flow&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This Artboard shows our design for the &lt;code&gt;Payment Details&lt;/code&gt; stage in the &lt;code&gt;checkout&lt;/code&gt; flow of our website. And this is how our design should look on a desktop monitor, or there abouts.&lt;/p&gt;
&lt;h3 id=&#34;the-state&#34;&gt;The State&lt;/h3&gt;
&lt;p&gt;Last in the four level sequence is the state. &lt;strong&gt;States are used to show different versions of the same stage in a flow&lt;/strong&gt;. For example, you might need to design certain error states in a form. Perhaps a particular user action changes the look of a specific stage, and you need to show this in your design. A success notification would be a good example. Or if we think back to our example; when a user enters the incorrect card details. We might need to design the error message for this.&lt;/p&gt;
&lt;p&gt;Think of the state as the same page — if you like — as the stage, only the users action has modified the view of the stage in some way. So for this case we would add a new Artboard into our sequence and use it to mockup the state.&lt;/p&gt;
&lt;p&gt;If we update our example above, it might result in this:&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-06.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Form errors on the checkout stage&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Form errors on the checkout stage&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This tells us that &lt;code&gt;Form error&lt;/code&gt; is the second state we have designed this particular state in the flow (the payment details stage which is part of the checkout flow). In this case the first state was the normal page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: having said all this, I don&amp;rsquo;t always use states. The reason being, I tend to work with a UI kit or front end framework, where the states have already been determined. If this is the case, (as you&amp;rsquo;ve probably noticed in the example) I will just leave a 1 on the end of the sequence. This suggests that the current Artboard is the first and only state.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In some other cases I use the last number in the sequence not for a state but as a quick and dirty way to fudge in an extra Artboard, half way through a sequence.&lt;/p&gt;
&lt;p&gt;This happens quite a lot when you return to past projects and you need to add Artboard into the flow. It&amp;rsquo;s hacky but it will prevent you from having to go through and re-jig all your other Artboard names to make your Artboard sequence run in order.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-07.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The text description explains the identifier code in more detail&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The text description explains the identifier code in more detail&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Ok, this technique might seem a little over the top for a small project, but if like me, you work on big on-going websites and web apps then then having an Artboard naming system is 100% the way to go. It will save your skin 10 times over.&lt;/p&gt;
&lt;p&gt;Whatever system you choose to use, the most important thing is that &lt;strong&gt;your Artboards names are descriptive of the design that is on it&lt;/strong&gt;. Now this might sound obvious, but you&amp;rsquo;d be surprised. I&amp;rsquo;ve seen some strange Artboards names before now, which give you no indication of what the design consists of and are totally illegible to a team. Furthermore, &lt;strong&gt;Artboards should be quick and easy to understand and reference&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always discuss a new system with your team&lt;/strong&gt;, so that everyone understands it and is on the same page. Above all this will allow you to communicate any design decision you make effectively and with minimal fuss.&lt;/p&gt;
&lt;p&gt;If you have any thoughts on this approach or ways to improve it, i’d love to hear from you. Likewise any questions I will do my best to answer.&lt;/p&gt;
&lt;p&gt;Heres to a stress free time with Artboards in Sketch.  &lt;code&gt;#artboardmaster&lt;/code&gt;&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>