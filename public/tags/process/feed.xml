<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Process on Azhar Khan</title>
    <link>https://azharkhan.in/tags/process/</link>
    <description>Recent content in Process on Azhar Khan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>azhar932@icloud.com (Azhar Khan)</managingEditor>
    <webMaster>azhar932@icloud.com (Azhar Khan)</webMaster>
    <lastBuildDate>Mon, 26 Mar 2018 13:28:18 +0100</lastBuildDate>
    
        <atom:link href="https://azharkhan.in/tags/process/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
      <item>
        <title>Type Emojiâ€™s on Mac shortcut</title>
        <link>https://azharkhan.in/articles/emoji-mac/</link>
        <pubDate>Mon, 26 Mar 2018 13:28:18 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/emoji-mac/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Itâ€™s hard to avoid Emojis. Whether you like using them on not theyâ€™re a great way to help visually communicate your thoughts and ideas.
&lt;/p&gt;

&lt;p&gt;We all know how to use Emojiâ€™s on a phone but do you know how to access the Emoji panel on a mac?&lt;/p&gt;
&lt;p&gt;The Mac Emoji keyboard shortcut is really easy to remember, whilst your cursor is in type mode, use the shortcut: &lt;code&gt;Command + Control + Spacebar&lt;/code&gt; to bring up the Emoji character panel.&lt;/p&gt;
&lt;p&gt;Then select the Emoji to type it. The panel works exactly the way it does on an iPhone. Easy peasy! ðŸ¤™&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Launching successful side projects</title>
        <link>https://azharkhan.in/launch/</link>
        <pubDate>Fri, 14 Jul 2017 21:34:41 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/launch/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Starting a new project can be a daunting process. Often we start with an idea in our head, then picture the final outcome â€“ a finely polished product, the ideal scenario.
&lt;/p&gt;

&lt;p&gt;At this early stage it might feel like an impossible task to get there, like youâ€™re at the foot of a mountain unable to see the summit.&lt;/p&gt;
&lt;p&gt;This is the point where a lot of us give up or start feeling overwhelmed by the task ahead. Itâ€™s so easy to feel like this. Youâ€™ve imagined up this big idea and you have no idea where to start.&lt;/p&gt;
&lt;p&gt;If you manage to get past that first stage, congratulations, youâ€™re half way there. But maybe now youâ€™re working tirelessly around the clock to perfect your product in time for launch. Then you launch, expecting great things to happen and an unmanageable stream of interest to come flooding in.&lt;/p&gt;
&lt;p&gt;In reality itâ€™s often the complete opposite. Maybe this sounds familiar or at least you know someone whoâ€™s been there. I feel like we all have in some form at some point in our lives. Be it when launching new a business, working on an article, writing a book or whatever.&lt;/p&gt;
&lt;p&gt;Hereâ€™s some ideas Iâ€™ve picked up along the way, to give you the best possible chance of launching products that donâ€™t fall flat on their face, leaving you feeling disheartened and ready to chuck it all in.&lt;/p&gt;
&lt;h2 id=&#34;get-your-ideas-out-there&#34;&gt;Get your ideas out there&lt;/h2&gt;
&lt;p&gt;If you donâ€™t have a product yet, donâ€™t let that stop you. Launch your ideas instead. Before you even entertain the idea of building a product, get your ideas out there in their rawest form. This is a very low risk way of proving a concept and validating the potential of your ideas.&lt;/p&gt;
&lt;p&gt;Itâ€™s the easiest way to test the water and see if people like what youâ€™re building. The worst thing you can do is waste your time and energy working on something no one wants. If youâ€™re building something interesting, then start telling people about it. Whatâ€™s the worst that can happen? Maybe youâ€™ll start a few more conversations and open a few more doors. Whatever it is, trust that only good things will happen.&lt;/p&gt;
&lt;h2 id=&#34;launch-before-youre-ready&#34;&gt;Launch before youâ€™re ready&lt;/h2&gt;
&lt;p&gt;Iâ€™ve read a lot lately on why we should in fact be launching polished products from day one, but I remain firmly rooted in the camp that says &lt;strong&gt;launch your product before itâ€™s ready&lt;/strong&gt;. If you know whatâ€™s what you will have already launched when it was just an idea in itâ€™s infancy.&lt;/p&gt;
&lt;p&gt;As we all know, products and business are a constant work in progress, inevitably they evolve and change in time. Like our own lives, they take a great deal of iteration and fine tuning, they require us to listen to ourselves and our audience, in order to truly understand the direction to take.&lt;/p&gt;
&lt;p&gt;So if youâ€™re waiting for the perfect time to launch, know that day will never come. If your work is never be done, then there is no perfect time to launch. Donâ€™t make the mistake of waiting until you perfect it, before you release it. Launch now, perfect later.&lt;/p&gt;
&lt;h2 id=&#34;always-work-on-more-than-one-thing&#34;&gt;Always work on more than one thing&lt;/h2&gt;
&lt;p&gt;When I said launch ideas I didnâ€™t mean â€™launch an ideaâ€™. The cold reality is most projects will fail, so donâ€™t go put all your energy into just one. Launch as many ideas as you can, then see which sticks. That way you wonâ€™t get hung up if one fails, as more than likely you will just shift your focus to the one with more potential.&lt;/p&gt;
&lt;p&gt;Think about how all todays great companies started for a second. A lot of them were side projects or just simple far flung ideas. At least they were nothing like they do today. Think Air Bed and Breakfast, Apple when it had the Newton logo, or when Elon Musk was laughed out of Russia when he tried to buy an ex-Soviet rocket. Whoâ€™s laughing now.&lt;/p&gt;
&lt;p&gt;Hunt down your target audience and start collecting feedback. Send out a questionnaire, a tweet, pick up the phone and find out if theres any interest in your ideas.&lt;/p&gt;
&lt;h2 id=&#34;dont-be-too-precious&#34;&gt;Don&amp;rsquo;t be too precious&lt;/h2&gt;
&lt;p&gt;9 times out of 10, someone has already had your idea, or nobody really cares to try and built it. So forget the NDA&amp;rsquo;s and secrecy, itâ€™s all in the execution after all, not the idea. Even if someone else steals your idea, the end result will be quite different. After all, as much as we try and copy each other, human nature doesnâ€™t allow for this level of perfection. &lt;a href=&#34;https://www.tesla.com/blog/all-our-patent-are-belong-you&#34;&gt;Did anyone build Tesla when Elon Musk released the patents?&lt;/a&gt; It takes more than an idea to build products. The more open you are, the more interest you will attract.&lt;/p&gt;
&lt;h2 id=&#34;listen-to-your-audience&#34;&gt;Listen to your audience&lt;/h2&gt;
&lt;p&gt;Always gather feedback from your audience and work with real data. Collecting data as your product evolves is invaluable. Whether it be analytics or feedback from users and customers, itâ€™s absolutely vital. This is the best way to learn about what works and what doesnâ€™t. If your product is out to solve problems then you ought to find out what the problems are that need solving. If youâ€™ve build a website, you probably want to reach out to your audience to find out what they are struggling with or what new featured they would like to see added.&lt;/p&gt;
&lt;p&gt;By doing this you can safely make iterations to your product without a negative impact, because you know youâ€™re are doing the right thing. If you do this you will find yourself creating the product that people want. No second guessing. No building products based on assumption. You know &lt;a href=&#34;https://blog.kissmetrics.com/how-netflix-uses-analytics/&#34;&gt;Netflix creates series based on the data they collect&lt;/a&gt;, now we all know why they are so successfully. This is user centered design at itâ€™s best.  Essentially they pre-empt a shows success before theyâ€™ve even made it, because they know they have an audience which matches the criteria.&lt;/p&gt;
&lt;h2 id=&#34;always-back-up-assumptions-with-real-data&#34;&gt;Always back up assumptions with real data&lt;/h2&gt;
&lt;p&gt;Ok so Iâ€™m kind of repeating myself here but thatâ€™s only to stress the importance of data. Donâ€™t build products you think people want. Build products you know there is already a demand for. Itâ€™s never been easier to reach an audience and ask for feedback, so before you start building your product start collecting data to work with. It can be as simple as &lt;a href=&#34;https://www.typeform.com/blog/guides/minimum-viable-product/&#34;&gt;Sending out a survey or a questionnaire&lt;/a&gt; or building &lt;a href=&#34;https://blog.bufferapp.com/idea-to-paying-customers-in-7-weeks-how-we-did-it&#34;&gt;a clever product landing page&lt;/a&gt;. It doesnâ€™t get more straight forward than creating a new Instagram page and seeing what posts get the most engagement. Think about where your audience hangs out. Start conversations and share what youâ€™re working on. Always try and look for quick and easy ways test your ideas before you dive in head first.&lt;/p&gt;
&lt;p&gt;As long as you get the worst, most unpolished version of your product out there first, and then improve it based on the data you collect, you will set yourself up for the best chance of success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: These thoughts were initially sparked after reading a post by Joel Gascoigne of Buffer fame (link below), many years ago. I apply this same mentality to writing. Get it out there even if it sucks. Then go back and improve it later.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tesla.com/blog/all-our-patent-are-belong-you&#34;&gt;All Our Patents Belong to You&lt;/a&gt; by Elon Musk, CEO Tesla&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.kissmetrics.com/how-netflix-uses-analytics/&#34;&gt;How Netflix uses analytics&lt;/a&gt; by Zach Bulygo, Kissmetrics blog.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.bufferapp.com/idea-to-paying-customers-in-7-weeks-how-we-did-it&#34;&gt;Idea to Paying Customers in 7 Weeks: How We Did It&lt;/a&gt; by Joel Gascoigne, CEO Buffer&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.typeform.com/blog/guides/minimum-viable-product/&#34;&gt;How to validate your next big idea&lt;/a&gt; from the Typeform Blog.&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Naming Artboards for responsive web design</title>
        <link>https://azharkhan.in/articles/artboards/</link>
        <pubDate>Sun, 02 Apr 2017 21:34:41 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/artboards/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    Naming Artboards might not be the most exciting subject, but non the less, it&#39;s an important one. If it&#39;s not already, a solid Artboard naming system should be a critical part of your design process.
&lt;/p&gt;

&lt;p&gt;A year or so ago I started thinking more about how best to name Artboards in Sketch. After a fair bit of trial and error, I arrived at a particular technique which just works. &lt;strong&gt;I&amp;rsquo;ve used this method extensively for a year&lt;/strong&gt; or so now without having to revisit it.&lt;/p&gt;
&lt;p&gt;More recently, I decided to find out if anyone else had approached the subject of naming Artboards, but I found very little. Seeing as not much had been written, I figured it was time to share my method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This technique is best suited to Responsive Web Design (RWD)&lt;/strong&gt;. That being said, if your focus is on design for mobile the principles still remain the same and it should work just as well.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used this technique both for personal projects and in production working with teams. It has helped us to clean up (and stay on top of) otherwise complex and unmanageable Sketch files. Without much thought, we&amp;rsquo;re now producing &lt;strong&gt;well organised, scaleable mockups which are easy to maintain&lt;/strong&gt;. At the very least, using this technique should help you avoid the numerous headaches caused by messy Sketch files, when youâ€™re working on big projects or as part of a team.&lt;/p&gt;
&lt;p&gt;Before I get into explaining the technique, let&amp;rsquo;s first look at why you might want to consider using a system to name your Artboards in the first place.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-organised-albion-03.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;A well organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;A well organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;maintainability&#34;&gt;Maintainability&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re designers. We like to be organised.&lt;/p&gt;
&lt;p&gt;Nobody wants to fire open a sketch file in 6 months time and find a mess of arbitrarily named Artboards. I certainly don&amp;rsquo;t, i&amp;rsquo;m sure you don&amp;rsquo;t either. &lt;strong&gt;It pays to be organised, and that goes for your Artboards too&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So the point is this; we want to be able to know exactly what state, in what stage, of what flow any given Artboard belongs to. In order to do this we need a system. A system that is quick to understand â€” by anyone in our team â€” and efficient in its implementation. No nonsense. Minimal fuss.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you&amp;rsquo;ll agree with me here. The sketch file below â€” where the Artboards are clearly named and numbered â€” will be easier to manage than the Sketch file below that.&lt;/p&gt;
&lt;p&gt;This Sketch file isn&amp;rsquo;t doing anyone any favours. As this file grows it&amp;rsquo;ll become a nightmare to deal with.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-unorganised.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;A badly organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;A badly organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;scalability&#34;&gt;Scalability&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does it scale?&lt;/strong&gt; We&amp;rsquo;re not talking about front end frameworks here (let&amp;rsquo;s leave that for another one). Instead, we&amp;rsquo;re trying to solve the problem you have when you need to add in an extra step (or stage) to a flow you created a last week, let&amp;rsquo;s say. &lt;strong&gt;Does your system allow you to add in extra Artboards â€” anywhere in the sequence&lt;/strong&gt; â€” without you having to go through and rename the rest of your Artboards to maintain some sort of order?&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-organised-albion-02.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Another well organised Sketch file&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Another well organised Sketch file&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;communication&#34;&gt;Communication&lt;/h2&gt;
&lt;p&gt;In most cases the design process tends to involve a few more people than just one designer.&lt;/p&gt;
&lt;p&gt;So the question is; &lt;strong&gt;does the rest of our team also understand what&amp;rsquo;s going on in our Sketch file?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok, I doubt all team members will need access to our Sketch files, but they will have to see them at some point. Without a naming system, the problems will start to show when you start using a prototyping tool like Invison. Unless your working on a side project, your team, your client or whoever will need to feedback on your designs. Sure they can comment on Invision, but all too often you&amp;rsquo;ll find you need a simple way to verbally discuss an Artboard. Let&amp;rsquo;s say by using a reference code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Giving your team a quick and easy way to reference Artboards will make your life a lot easier&lt;/strong&gt;, particularly as your project grows.  We like our team right? Let&amp;rsquo;s introduce a system which is great for them and not just ourselves.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264893/hc/naming-artboards-in-sketch-invision.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Prefixing Artboard names with a reference short code makes discussion and organisation easier&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Prefixing Artboard names with a reference short code makes discussion and organisation easier&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;Ok enough of the reasoning, i&amp;rsquo;m sure you get the idea by now. Let&amp;rsquo;s look take a look at the system and explain how it works.&lt;/p&gt;
&lt;h2 id=&#34;how-the-system-works&#34;&gt;How the system works&lt;/h2&gt;
&lt;p&gt;Ok, the basic idea is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you use a 4 level sequence.&lt;/li&gt;
&lt;li&gt;Use both a reference code and a description.&lt;/li&gt;
&lt;li&gt;Pick a clear and descriptive, sequential structure (i.e Breakpoint, Flow, Stage, State).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-a-4-level-sequence&#34;&gt;Using a 4 level sequence&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m using &lt;strong&gt;a 4 level numerical sequence followed by a description&lt;/strong&gt;, where the purpose of the description is to explain the numerical sequence in a more verbose manor.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264882/hc/naming-artboards-in-sketch-01.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;4 level sequence â€” Breakpoint, Flow, Stage, State&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;4 level sequence â€” Breakpoint, Flow, Stage, State&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;The four levels represent the &lt;strong&gt;Breakpoint, the flow, the stage and the state&lt;/strong&gt; of our design.&lt;/p&gt;
&lt;p&gt;I will come to exactly what I mean by this a bit later, but first let&amp;rsquo;s look at why we&amp;rsquo;re using a code and a description.&lt;/p&gt;
&lt;h3 id=&#34;use-a-reference-code-and-a-description&#34;&gt;Use a reference code and a description&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Using both a code and a description makes our Artboards easy to understand and equally as easy to reference&lt;/strong&gt; â€” and not just by us â€” by the whole of our team.&lt;/p&gt;
&lt;p&gt;On it&amp;rsquo;s own, the description (let&amp;rsquo;s call it the &lt;code&gt;Unique Identifying Description&lt;/code&gt; or &lt;code&gt;UID&lt;/code&gt; for short) isn&amp;rsquo;t exactly quick to reference, and it doesn&amp;rsquo;t help us order our Artboards in any way, but it is still important as it accurately explains the contents of our Artboard.&lt;/p&gt;
&lt;p&gt;By prefixing the &lt;code&gt;UID&lt;/code&gt; with a numerical sequence, we now have a quick and easy reference code, if you like. By adding this code (let&amp;rsquo;s call it the &lt;code&gt;Unique Identifier Code&lt;/code&gt; or &lt;code&gt;UIC&lt;/code&gt; for short) we now have a clear system for ordering our Artboards. &lt;strong&gt;This is particularly useful when we start using tools like Invision&lt;/strong&gt; and you or another team member needs to pin point a particular Artboard to discuss.&lt;/p&gt;
&lt;p&gt;Likewise, using the &lt;code&gt;UIC&lt;/code&gt; alone won&amp;rsquo;t make much sense â€” it&amp;rsquo;s not descriptive of the Artboards contents. But add the two together and you have a quick shortcode (the &lt;code&gt;UIC&lt;/code&gt;) used for reference purposes, and a more descriptive text version (the &lt;code&gt;UID&lt;/code&gt;), which helps us further identify the design on our Artboard.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264891/hc/naming-artboards-in-sketch-02.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Using a unique identifying code and description&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Using a unique identifying code and description&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;the-sequential-structure&#34;&gt;The sequential structure&lt;/h2&gt;
&lt;p&gt;Ok. So why use four levels, isn&amp;rsquo;t that over kill? Surely one level is enough? Can&amp;rsquo;t we just use something like &lt;code&gt;1 - homepage&lt;/code&gt;, &lt;code&gt;2 - checkout&lt;/code&gt; etc, and be done with it? And, &lt;strong&gt;what exactly does the Breakpoint, Flow, Stage and State represent?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at that now â€” it will help us understand why having four levels in the sequence is important.&lt;/p&gt;
&lt;h3 id=&#34;the-breakpoint&#34;&gt;The Breakpoint&lt;/h3&gt;
&lt;p&gt;In RWD, the Breakpoint is very important, so we will consider this first. &lt;strong&gt;The breakpoint is the screen resolution you are designing for&lt;/strong&gt;, in case you didn&amp;rsquo;t know. Think &lt;code&gt;1200px&lt;/code&gt;, &lt;code&gt;960px&lt;/code&gt;, &lt;code&gt;768px&lt;/code&gt;, &lt;code&gt;320px&lt;/code&gt; or if you prefer Desktop HD, Desktop, Tablet, Mobile etc. This should be the deciding factor that determines what Artboard size you choose for your design.&lt;/p&gt;
&lt;p&gt;If you are design a responsive website you&amp;rsquo;re design will most likely change at different screen sizes. We&amp;rsquo;ll need a different Artboard to show how the design looks for each size.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say our design isn&amp;rsquo;t a mockup of the large desktop view (like in the example above), but in fact a regular desktop view or a mockup of our website at a breakpoint of &lt;code&gt;960px&lt;/code&gt;. In this case we would create a new Artboard and change the breakpoint in our Artboard name to reflect that.&lt;/p&gt;
&lt;p&gt;In the example below you can see the Breakpoint is &lt;code&gt;960&lt;/code&gt;. this, of course, stands for &lt;code&gt;960px&lt;/code&gt; or our desktop size. Suggesting the Artboard shows how our website will look on a Desktop browser.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-03.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Breaking down the identifier code&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Breaking down the identifier code&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h3 id=&#34;the-flow&#34;&gt;The Flow&lt;/h3&gt;
&lt;p&gt;Flow is second in the sequence. This is &lt;strong&gt;the particular user flow you are designing&lt;/strong&gt;. An obvious example would be, let&amp;rsquo;s say, the &lt;code&gt;Checkout&lt;/code&gt; flow. Think UX here. &lt;strong&gt;A flow is the journey a user takes around a site to complete a particular action&lt;/strong&gt;. A flow will most likely consist of a number of pages or stages, if you like.&lt;/p&gt;
&lt;p&gt;Ok, so you&amp;rsquo;ve got the hand of it now.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-04.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The checkout (or second) flow at a breakpoint of 960px&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The checkout (or second) flow at a breakpoint of 960px&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This tells us that the Artboard shows our design at a breakpoint of &lt;code&gt;960px&lt;/code&gt; (i.e desktop) and the design is part of the checkout flow. Which is the second flow in our website. Notice the second number in the sequence has now changed to 2.&lt;/p&gt;
&lt;h3 id=&#34;the-stage&#34;&gt;The Stage&lt;/h3&gt;
&lt;p&gt;Third in the sequence is the stage. &lt;strong&gt;The stage represents the part or step within in a flow&lt;/strong&gt;. If we think back to our example &lt;code&gt;checkout&lt;/code&gt; flow, a familiar stage in this flow might be &lt;code&gt;payment details&lt;/code&gt;, as opposed to &lt;code&gt;shipping details&lt;/code&gt;, or &lt;code&gt;checkout complete&lt;/code&gt;. These are all stages, which might make up our &lt;code&gt;checkout&lt;/code&gt; flow.&lt;/p&gt;
&lt;p&gt;Updating our example above might result in something like this:&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-05.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The payment details stage in the checkout flow&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The payment details stage in the checkout flow&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This Artboard shows our design for the &lt;code&gt;Payment Details&lt;/code&gt; stage in the &lt;code&gt;checkout&lt;/code&gt; flow of our website. And this is how our design should look on a desktop monitor, or there abouts.&lt;/p&gt;
&lt;h3 id=&#34;the-state&#34;&gt;The State&lt;/h3&gt;
&lt;p&gt;Last in the four level sequence is the state. &lt;strong&gt;States are used to show different versions of the same stage in a flow&lt;/strong&gt;. For example, you might need to design certain error states in a form. Perhaps a particular user action changes the look of a specific stage, and you need to show this in your design. A success notification would be a good example. Or if we think back to our example; when a user enters the incorrect card details. We might need to design the error message for this.&lt;/p&gt;
&lt;p&gt;Think of the state as the same page â€” if you like â€” as the stage, only the users action has modified the view of the stage in some way. So for this case we would add a new Artboard into our sequence and use it to mockup the state.&lt;/p&gt;
&lt;p&gt;If we update our example above, it might result in this:&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-06.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;Form errors on the checkout stage&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;Form errors on the checkout stage&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;p&gt;This tells us that &lt;code&gt;Form error&lt;/code&gt; is the second state we have designed this particular state in the flow (the payment details stage which is part of the checkout flow). In this case the first state was the normal page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: having said all this, I don&amp;rsquo;t always use states. The reason being, I tend to work with a UI kit or front end framework, where the states have already been determined. If this is the case, (as you&amp;rsquo;ve probably noticed in the example) I will just leave a 1 on the end of the sequence. This suggests that the current Artboard is the first and only state.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In some other cases I use the last number in the sequence not for a state but as a quick and dirty way to fudge in an extra Artboard, half way through a sequence.&lt;/p&gt;
&lt;p&gt;This happens quite a lot when you return to past projects and you need to add Artboard into the flow. It&amp;rsquo;s hacky but it will prevent you from having to go through and re-jig all your other Artboard names to make your Artboard sequence run in order.&lt;/p&gt;
&lt;div class=&#34;Image&#34;&gt;
  &lt;div class=&#34;Ratio Ratio--3by2&#34;&gt;
    &lt;img
      data-src=&#34;https://res.cloudinary.com/azhar932/image/upload/w_auto,dpr_auto,c_scale,f_auto,q_auto/v1550264892/hc/naming-artboards-in-sketch-07.jpg&#34;
      class=&#34;cld-responsive lazyload &#34; alt=&#34;The text description explains the identifier code in more detail&#34;&gt;
  &lt;/div&gt;
  
      &lt;figure&gt;
      
      
        &lt;figcaption&gt;The text description explains the identifier code in more detail&lt;/figcaption&gt;
      &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Ok, this technique might seem a little over the top for a small project, but if like me, you work on big on-going websites and web apps then then having an Artboard naming system is 100% the way to go. It will save your skin 10 times over.&lt;/p&gt;
&lt;p&gt;Whatever system you choose to use, the most important thing is that &lt;strong&gt;your Artboards names are descriptive of the design that is on it&lt;/strong&gt;. Now this might sound obvious, but you&amp;rsquo;d be surprised. I&amp;rsquo;ve seen some strange Artboards names before now, which give you no indication of what the design consists of and are totally illegible to a team. Furthermore, &lt;strong&gt;Artboards should be quick and easy to understand and reference&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always discuss a new system with your team&lt;/strong&gt;, so that everyone understands it and is on the same page. Above all this will allow you to communicate any design decision you make effectively and with minimal fuss.&lt;/p&gt;
&lt;p&gt;If you have any thoughts on this approach or ways to improve it, iâ€™d love to hear from you. Likewise any questions I will do my best to answer.&lt;/p&gt;
&lt;p&gt;Heres to a stress free time with Artboards in Sketch.  &lt;code&gt;#artboardmaster&lt;/code&gt;&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>