<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Azhar Khan</title>
    <link>https://azharkhan.in/tags/hugo/</link>
    <description>Recent content in Hugo on Azhar Khan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>azhar932@icloud.com (Azhar Khan)</managingEditor>
    <webMaster>azhar932@icloud.com (Azhar Khan)</webMaster>
    <lastBuildDate>Wed, 15 Apr 2020 10:50:11 +0100</lastBuildDate>
    
        <atom:link href="https://azharkhan.in/tags/hugo/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
      <item>
        <title>Listing page content in Hugo</title>
        <link>https://azharkhan.in/articles/listing-page-content-in-hugo/</link>
        <pubDate>Wed, 15 Apr 2020 10:50:11 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/listing-page-content-in-hugo/</guid>
        <description>&lt;p&gt;In Hugo, &lt;a href=&#34;https://bepsays.com/en/2016/12/19/hugo-018/&#34;&gt;everything is a page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common thing to do with these pages is make lists of them. By doing so you make your content easily accessible to readers.&lt;/p&gt;
&lt;p&gt;A list of pages, at the very least, might look like a collection of page titles, which hyperlink to the pages themselves.&lt;/p&gt;
&lt;p&gt;In plain old HTML that might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #1&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #2&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/page-3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Page #3&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that’s just the basics. You can create a list of any data associated with your content.&lt;/p&gt;
&lt;p&gt;In Hugo, unfortunately there’s no one size fits all approach to rending content.&lt;/p&gt;
&lt;p&gt;The context of the code you write changes depending on which template you’re working in. This can often produce unexpected results.&lt;/p&gt;
&lt;p&gt;In this piece we’ll learn about the specific functions and variables you can use to create lists of different content types and look at how context effects the content rendered on a page.&lt;/p&gt;
&lt;p&gt;Let’s start by considering how we create lists of data, from a technical perspective, when using a static site generator like Hugo.&lt;/p&gt;
&lt;h2 id=&#34;what-does-it-mean-to-list-content&#34;&gt;What does it mean to list content?&lt;/h2&gt;
&lt;p&gt;When we programatically create a list of anything, essentially all we’re doing is iterating over a map of data.&lt;/p&gt;
&lt;p&gt;In other words, looping through an array – a list of items – which, in other programming languages, you might do with a for loop, or a map function.&lt;/p&gt;
&lt;p&gt;In Hugo, in the context of pages, you do this with the range function.&lt;/p&gt;
&lt;h2 id=&#34;understanding-range&#34;&gt;Understanding range&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/range/&#34;&gt;range&lt;/a&gt; function provides an easy way to iterate over a map, array or slice of data. Think of it as grabbing a collection of pages, or a “range” of pages.&lt;/p&gt;
&lt;p&gt;Range is fundamental to templating in Hugo and it’s the only function we’ll need to return a lists of pages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But using range alone won&amp;rsquo;t return any data.&lt;/p&gt;
&lt;p&gt;To get hold of our pages, we need to pass a &lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;page variable&lt;/a&gt; to the range function. This variable will give you access to different collections of content, depending on which variable you pass in and which template you write the code in.&lt;/p&gt;
&lt;p&gt;There’s quite a few different variables you can choose from, but for now, let’s focus on some of the main ones.&lt;/p&gt;
&lt;h2 id=&#34;combining-site-and-pages&#34;&gt;Combining .Site and .Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/variables/site/&#34;&gt;.Site&lt;/a&gt; gives you access to global values in your templates.&lt;/p&gt;
&lt;p&gt;So regardless of where you are writing your code, with &lt;code&gt;.Site&lt;/code&gt; you can get hold of all site-wide variables. These are either defined in your site’s configuration or directly built-in to Hugo.&lt;/p&gt;
&lt;p&gt;In the interest of listing page content, we can combine &lt;code&gt;.Site&lt;/code&gt; with a built-in variable called &lt;code&gt;.Pages&lt;/code&gt; to access all pages across our website.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Hugo docs describe &lt;a href=&#34;https://gohugo.io/variables/site/#site-pages&#34;&gt;.Site.Pages&lt;/a&gt; as a super set of everything.&lt;/p&gt;
&lt;p&gt;This means by passing &lt;code&gt;.Site.Pages&lt;/code&gt; to the range function we can grab data associated with every single page on our site. It will return regular pages, collections, taxonomies, and so on.&lt;/p&gt;
&lt;p&gt;In the case above, we’re rendering all page titles, with a permalink to those pages.&lt;/p&gt;
&lt;p&gt;A few things to note.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; doesn’t care if you store your content in subdirectories, for example posts in &lt;code&gt;./content/posts&lt;/code&gt; or pages inside &lt;code&gt;./content/pages&lt;/code&gt;. It will render all content types regardless of your content directory structure.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; also doesn’t care which template you use it in. The object returned will always be the same.&lt;/p&gt;
&lt;h2 id=&#34;pages-without-site&#34;&gt;.Pages without .Site&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.Pages&lt;/code&gt; can be used without &lt;code&gt;.Site&lt;/code&gt;, but the content returned will be different, depending on where you use it.&lt;/p&gt;
&lt;p&gt;Where &lt;code&gt;.Site&lt;/code&gt; gives you access to the global values in your templates, &lt;code&gt;.Pages&lt;/code&gt; only returns a collection of regular pages and only first-level section pages under the current list page.&lt;/p&gt;
&lt;p&gt;To make sense of this let’s turn now to list templates, and talk a bit about what they are and how you can use them.&lt;/p&gt;
&lt;h2 id=&#34;the-list-template&#34;&gt;The list template&lt;/h2&gt;
&lt;p&gt;List templates are key part of rendering specific collections of pages. For the sake of clarity, let’s call these ”lists” of pages.&lt;/p&gt;
&lt;p&gt;The only &lt;code&gt;list.html&lt;/code&gt; template you need to render a list of pages in Hugo is kept at &lt;code&gt;.layouts/_default/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This acts as the default template for all collections, sections, taxonomies and terms. It’s the first list template Hugo will look for when it tries to render lists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/_default/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we’re no longer using &lt;code&gt;.Site.Pages&lt;/code&gt;, but just &lt;code&gt;.Pages&lt;/code&gt;. It will soon become clear why.&lt;/p&gt;
&lt;p&gt;Now let’s say you have a content collection at &lt;code&gt;./content/posts&lt;/code&gt; and you want to create a specific list template for this collection, which renders the posts on the &lt;code&gt;/posts&lt;/code&gt; page of your website.&lt;/p&gt;
&lt;p&gt;To do this you might want to override the default list template by adding another list template, using the exact same code, but this time located at &lt;code&gt;./layouts/posts/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/posts/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the location of this list template mirrors the content directory structure.&lt;/p&gt;
&lt;p&gt;Now we can customise the template however we like and Hugo will only return content from the corresponding folder at &lt;code&gt;./content/posts&lt;/code&gt;. Whilst all other pages will continue to use the default list template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/posts/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;intro&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Summary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s important to note that if we used &lt;code&gt;.Site.Pages&lt;/code&gt;, as we have done previously, Hugo will return an object of all our site pages, which isn’t what we want in this case.&lt;/p&gt;
&lt;p&gt;We’re specifically interesed in the collection of post pages, so we use the &lt;code&gt;.Page&lt;/code&gt; variable in a new list template, kept in a directory which mirrors our content structure.&lt;/p&gt;
&lt;p&gt;Now we’re starting to see how context effects the results of the code we write.&lt;/p&gt;
&lt;p&gt;Let’s look at another example to make this absolutely clear.&lt;/p&gt;
&lt;p&gt;Say we have another template with the exact same code at &lt;code&gt;./layouts/notes/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ./layouts/notes/list.html
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time &lt;code&gt;list.html&lt;/code&gt; will only return content from the corresponding content folder located at &lt;code&gt;./content/notes&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We can see now that the context of &lt;code&gt;.Pages&lt;/code&gt; changes, depending on the location of your list template. And it’s something to keep in mind, as it can be confusing at first.&lt;/p&gt;
&lt;p&gt;Ok, so how does Hugo know which template to use?&lt;/p&gt;
&lt;p&gt;Hugo picks the template it uses to render content based on something called the lookup order.&lt;/p&gt;
&lt;p&gt;Let’s get into that next.&lt;/p&gt;
&lt;h2 id=&#34;the-lookup-order&#34;&gt;The lookup order&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34;&gt;The lookup order&lt;/a&gt; is how Hugo decides which layout template to use for a given page, based on a well defined order of priority.&lt;/p&gt;
&lt;p&gt;The default list template (that one at &lt;code&gt;./layouts/_default/list.html&lt;/code&gt;) will serve all content, unless it is overridden by another template, with a higher priority in the lookup order.&lt;/p&gt;
&lt;p&gt;This is what is happening with our list template at &lt;code&gt;./layouts/posts/list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Understanding the lookup order, and how context changes, will help you understand which variables to use in certain situations and why the same variable can produce different results.&lt;/p&gt;
&lt;p&gt;Ok, let’s move on to a few other interesting things we can do.&lt;/p&gt;
&lt;h2 id=&#34;using-the-first-function&#34;&gt;Using the first function&lt;/h2&gt;
&lt;p&gt;Now let’s try something a bit different, this time with &lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;the first function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can add the first function to range, to reduce the array of data returned to only the first N elements. Where N is the value you set.&lt;/p&gt;
&lt;p&gt;Think of first as an argument which you pass in alongside your page variables.&lt;/p&gt;
&lt;p&gt;Here we’re returning the first 10 pages across all our content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But what if you want to loop through a specific collection of content? Let’s use our example of a collection posts stored inside &lt;code&gt;./content/posts&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;Let’s say now we want to list our posts on the &lt;code&gt;index.html&lt;/code&gt; page. We can’t just use &lt;code&gt;.Pages&lt;/code&gt; in this case, as we’re no longer in our post specific &lt;code&gt;list.html&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;.Site.RegularPages&lt;/code&gt; is helpful.&lt;/p&gt;
&lt;h2 id=&#34;understanding-siteregularpages&#34;&gt;Understanding .Site.RegularPages&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;.Site.RegularPages&lt;/code&gt; variable is similar to &lt;code&gt;.Site.Pages&lt;/code&gt;, but instead of returning all pages, it returns all collections.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RegularPages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tite&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Hugo, collections are known as &lt;a href=&#34;https://gohugo.io/content-management/types/&#34;&gt;Content Types&lt;/a&gt;, which basically means anything stored within the &lt;code&gt;./content&lt;/code&gt; directory or inside subdirectories within.&lt;/p&gt;
&lt;p&gt;To give you an example, on this site I have three collections of content. &lt;code&gt;./content/articles&lt;/code&gt;, &lt;code&gt;./content/notes&lt;/code&gt; and &lt;code&gt;./content/projects&lt;/code&gt;. Each directory contains pages created in markdown.&lt;/p&gt;
&lt;p&gt;Here, the &lt;code&gt;.Site.RegularPages&lt;/code&gt; variable would return all pages from across these three collections, and ignore any else, such as pages inside &lt;code&gt;./content/pages&lt;/code&gt; or taxonomy pages.&lt;/p&gt;
&lt;p&gt;But what if you only want to loop through your &lt;code&gt;./content/articles&lt;/code&gt; collection? How might you handle this kind of behaviour?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.Type&lt;/code&gt; variable is useful in the scenario.&lt;/p&gt;
&lt;h2 id=&#34;filtering-pages-by-type&#34;&gt;Filtering pages by .Type&lt;/h2&gt;
&lt;p&gt;As per the docs; “Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path.” So what does this mean, exactly?&lt;/p&gt;
&lt;p&gt;It means that if we want to render specific content types, we have two options.&lt;/p&gt;
&lt;p&gt;We can either a), set &lt;code&gt;type&lt;/code&gt; inline in the front matter of our pages, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;My&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;first&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;post&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or b), make directories within &lt;code&gt;./content&lt;/code&gt; to mirror how we want to filter our content, as we’ve already seen in the earlier examples.&lt;/p&gt;
&lt;p&gt;So for our post example, this approach means we have to keep our posts inside &lt;code&gt;./content/post&lt;/code&gt; for it to work.&lt;/p&gt;
&lt;p&gt;Regardless of whether you go with a) the frontmatter method or b) the directory structure method, you use the same code to render the content.&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we combine range with the conditional &lt;a href=&#34;https://gohugo.io/functions/where/&#34;&gt;where&lt;/a&gt; function. This allows us to filter our array to only the elements containing a matching value of “type” &lt;em&gt;post&lt;/em&gt;. In this case, only our posts will be returned.&lt;/p&gt;
&lt;p&gt;This is a useful snippet. The frontmatter approach is particular useful when you want to group together a selection of pages, perhaps as featured content.&lt;/p&gt;
&lt;p&gt;You’ll also find this approach useful when you want to render specific content outside of the context of a list template, for example on the homepage of your website, as we’ve imagined here.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a quick introduction to the functions and variables in Hugo that help you list different pages of content, in different places on a Hugo website.&lt;/p&gt;
&lt;p&gt;At times it can be confusing to know which variable to use in a given situation to effectively render the content you wish. But with some practice it will start to sink in.&lt;/p&gt;
&lt;p&gt;I hope this has made things a bit clearer and given you a few ideas for your next project. We’ve only just scratched the surface, but what we’ve covered should help get you off to a good start, with a good idea of some of what’s possible.&lt;/p&gt;
&lt;p&gt;As always, if you spot any mistakes or something doesn’t look quite right, please let me know and I will make sure I make changes.&lt;/p&gt;
&lt;p&gt;I’m aiming to keep this post updated with new examples and scenarios, as I come across them and use them in my own projects. In the meantime, here’s a list of articles which should help give you a better understanding of what we’ve covered.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/range/&#34;&gt;The Range Function&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/lists/&#34;&gt;Lists of content in Hugo&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/variables/page/&#34;&gt;Page Variables&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regisphilibert.com/blog/2018/02/hugo-the-scope-the-context-and-the-dot/&#34;&gt;Hugo, the scope, the context and the dot&lt;/a&gt; from Regis Philibert&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/first/&#34;&gt;The First function&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/types&#34;&gt;Content types&lt;/a&gt; from the Hugo Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/functions/where/&#34;&gt;The Where function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%EF%BF%BChttps://gohugo.io/templates/homepage/%EF%BF%BC&#34;&gt;Homepage Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.gohugo.io/t/different-page-types-without-organising-into-subdirectories/558/3&#34;&gt;Different page types without organising into subdirectories&lt;/a&gt; from Stiobhart&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Performant syntax highlighting in Hugo</title>
        <link>https://azharkhan.in/articles/performant-syntax-highlighting-in-hugo/</link>
        <pubDate>Mon, 02 Dec 2019 12:56:26 +0000</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/performant-syntax-highlighting-in-hugo/</guid>
        <description>&lt;p&gt;The quickest way to use syntax highlighting in Hugo is with &lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;Chroma&lt;/a&gt;, the default syntax highlighter. Without any config, you can wrap a code block in the built in &lt;code&gt;highlight&lt;/code&gt; Shortcode, pass in the language as a variable and you’re code will be highlighted:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;lt; highlight go &amp;gt;}
	// Html code to highlight
{&amp;lt; / highlight &amp;gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note: to render the example above on the page I have used single curly braces. You will need to use double curly braces.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The advantage of using Chroma over other JavaScript libraries like &lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; or &lt;a href=&#34;https://prismjs.com/&#34;&gt;Prisma.js&lt;/a&gt; is that it’s built right into Hugo and doesn’t require any external dependencies. This make it extremely fast and reliable.&lt;/p&gt;
&lt;p&gt;Out of the box, however, Chroma doesn’t give us much control over the style of our highlighted code. To change that all we need to do is add one line of code to the top level of our &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Enable for syntax highlighting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;pygmentsUseClasses&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: It’s important you add this line to the top level and not under &lt;code&gt;[params]&lt;/code&gt; if you want it to work. Something like this should do it:&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;baseurl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:1313/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;theme=&lt;span class=&#34;s2&#34;&gt;&amp;#34;theme name&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;languageCode&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;title&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;your site title&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Enable for syntax highlighting&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;pygmentsUseClasses&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-option-for-code-fencing&#34;&gt;Adding option for code fencing&lt;/h2&gt;
&lt;p&gt;It is also possible to add syntax highlighting to code within code fences. To enable this add the following to your &lt;code&gt;config.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;pygmentsCodefences&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can wrap your code in two sets of triple backticks (```) and specify the language after the opening set to highlight the code correctly. Make sure you check the &lt;a href=&#34;https://github.com/alecthomas/chroma#supported-languages&#34;&gt;list of supported langauges&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(```) yaml
pygmentsUseClasses = true
pygmentsCodeFences = true
(```)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Note: Make sure you omit the parentheses as seen above. This is just to show you the code without it rendering.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now you can highlight any syntax inside of code fences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;width=device-width, initial-scale=1, shrink-to-fit=no&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;customising-your-syntax-theme&#34;&gt;Customising your syntax theme&lt;/h2&gt;
&lt;p&gt;To change the theme of your syntax highlighting generate &lt;code&gt;chromastyles&lt;/code&gt;. Then set the name of the theme you want using the &lt;code&gt;--style&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;From the command line run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo gen chromastyles --style=lovelace &amp;gt; syntax.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will generate the &lt;code&gt;syntax.css&lt;/code&gt; file at the root of your project.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://xyproto.github.io/splash/docs/&#34;&gt;https://xyproto.github.io/splash/docs/&lt;/a&gt; for available themes. You can also run &lt;code&gt;hugo gen chromastyles -h&lt;/code&gt; to see more options.&lt;/p&gt;
&lt;p&gt;Don’t forget to link to the stylesheet from the &lt;!-- raw HTML omitted --&gt; of your document otherwise your theme won’t work!&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>SEO in Hugo: Unique, Accurate Page Titles</title>
        <link>https://azharkhan.in/articles/hugo-seo-accurate-page-titles/</link>
        <pubDate>Fri, 02 Nov 2018 10:32:26 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-seo-accurate-page-titles/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;According to &lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=en#uniquepagetitles&#34;&gt;Google’s SEO starter guide&lt;/a&gt;, “Each page on your site should ideally have a unique title, which helps Google know how the page is distinct from the others on your site.”&lt;/p&gt;
&lt;p&gt;At all costs avoid default, vague titles which have no relation to the content on the page and never use a single title across all pages on your site.&lt;/p&gt;
&lt;p&gt;This piece is for those building sites with Hugo. It introduces a common mistake, often seen in &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo starter themes&lt;/a&gt; – where the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag renders generic page titles – and offers a simple concise solution to get your pages into Google’s good books and ranking properly.&lt;/p&gt;
&lt;h2 id=&#34;the-big-mistake-with-page-titles&#34;&gt;The big mistake with page titles&lt;/h2&gt;
&lt;p&gt;When building a theme for your new Hugo site, you might be tempted to dig through the &lt;code&gt;_default&lt;/code&gt; templates of a Hugo starter theme for some tips on where to begin.&lt;/p&gt;
&lt;p&gt;No bad thing, it’s a great way to learn, but approach this method with caution, starter themes can also contain bad practices.&lt;/p&gt;
&lt;p&gt;In many cases, a quick look inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; will often reveal the following seemly simple but potentially harmful code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ $.Site.Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here?&lt;/p&gt;
&lt;p&gt;Here we’re taking the title of our site directly from our &lt;code&gt;config.toml&lt;/code&gt; file and applying it to each and every page on our site. That means every page on our site now has the same name.&lt;/p&gt;
&lt;p&gt;In terms of SEO this is bad news, as we now know.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-elegant-solution&#34;&gt;A simple elegant solution&lt;/h2&gt;
&lt;p&gt;A better solution would be to use the conditional &lt;code&gt;if&lt;/code&gt; statement and reach for the title set in the front matter of each page when possible. We can make this happen with something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if .IsHome -}}
  &amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt;
{{- else -}}
  &amp;lt;title&amp;gt;{{ .Title }} – {{ .Site.Title }}&amp;lt;/title&amp;gt;
{{- end }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference here is that &lt;code&gt;{{ .Site.Title }}&lt;/code&gt; is only used if the current page is the homepage.&lt;/p&gt;
&lt;p&gt;For every other page, we use the page title specified in the page front matter, which should almost always be unique and therefore good for SEO.&lt;/p&gt;
&lt;p&gt;For an alternative solution try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ if .Page.Title }}{{ .Page.Title }} - {{ end }}{{ .Site.Title }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should be fairly self explanatory and produces the same results, in an arguably cleaner single line of code.&lt;/p&gt;
&lt;h2 id=&#34;taking-it-further&#34;&gt;Taking it further&lt;/h2&gt;
&lt;p&gt;For an added SEO boost, try applying the same thinking to your page descriptions. According to Google, “A page&amp;rsquo;s description meta tag gives Google and other search engines a summary of what the page is about. Description meta tags are important because Google might use them as snippets for your pages”.&lt;/p&gt;
&lt;p&gt;The simple solution would be to define the description in the front matter of each page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hugo SEO: Unique, Accurate page titles&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Get an SEO boost on your website pages with descriptive page titles which make search engines happy&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Harry Cresswell&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then call the &lt;code&gt;Parmeter&lt;/code&gt; in a meta tag in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ $.Param &amp;quot;description&amp;quot; }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There you have it. A couple of simple fixes to optimise your web pages and improve your chances of ranking higher in search engines.&lt;/p&gt;
&lt;p&gt;I hope this has been a helpful read.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=en#uniquepagetitles&#34;&gt;Create unique, accurate page titles&lt;/a&gt; from Google’s SEO Starter Guide&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.el-chavez.me/2015/11/26/go-hugo-seo/&#34;&gt;Go Hugo SEO&lt;/a&gt; from MT Chavez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rankbio.com&#34;&gt;Rank Bio&lt;/a&gt; - test your websites for best practices&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Working with Data in Hugo</title>
        <link>https://azharkhan.in/articles/data-hugo/</link>
        <pubDate>Wed, 18 Jul 2018 14:35:58 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/data-hugo/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    This articles demonstrates a practical use case of working with data files in Hugo. It will show you where to store your data and how to call your data into a template in order to render it on your site.
&lt;/p&gt;

&lt;p&gt;Whilst front-end prototyping the design of a &lt;a href=&#34;http://www.harrycresswell.co.uk/client/ain/ain-filters/&#34;&gt;system of content search filters&lt;/a&gt;, I found myself in a situation where I needed to list the major countries in each inhabited Continent. The countries would take the form of checkboxes in a filter dropdown.&lt;/p&gt;
&lt;p&gt;A basic solution might be to list each country manually in an unordered list on the page. But that sound like a time consuming task and unnecessarily repetitive. No one wants a cluttered template with a verbose amount of code.&lt;/p&gt;
&lt;p&gt;Ideally I could abstract the data away from the page and leave my template clean and concise. Instead, storing the data in a separate data file which I could call in my template wherever needed.&lt;/p&gt;
&lt;p&gt;Enter Data files.&lt;/p&gt;
&lt;h2 id=&#34;data-files-and-the-data-folder&#34;&gt;Data files and the data folder&lt;/h2&gt;
&lt;p&gt;In Hugo, &lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;data files&lt;/a&gt; are stored in the data folder. Think of the data folder as a mini database where you can keep lists of data to use in your pages.&lt;/p&gt;
&lt;p&gt;Inside the data folder you can organise files into any number of sub-folders.&lt;/p&gt;
&lt;p&gt;Hugo accepts &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt; and &lt;code&gt;TOML&lt;/code&gt; files, just like the front matter in your posts and pages.&lt;/p&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data structure&lt;/h3&gt;
&lt;p&gt;In my data folder I have a sub-folder called &lt;code&gt;countries&lt;/code&gt; and inside that folder I have a another folder called &lt;code&gt;continent&lt;/code&gt; where I keep 5 &lt;code&gt;YAML&lt;/code&gt; files: &lt;code&gt;africaa.yaml&lt;/code&gt;, &lt;code&gt;asia.yaml&lt;/code&gt;, &lt;code&gt;europe.yaml&lt;/code&gt;, &lt;code&gt;northamerica.yaml&lt;/code&gt; and &lt;code&gt;southamerica.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For all the geography nerds out there; I combined Australia with Asia as it didn’t make sense to have a data file containing one country.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;└── countries
    └── continent
        ├── africa.yaml
        ├── asia.yaml
        ├── europe.yaml
        └── northamerica.yaml
      	└── southamerica.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I called the top level sub-folder countries so the data type was clearly organised and easy to understand.&lt;/p&gt;
&lt;h3 id=&#34;inside-the-data-file&#34;&gt;Inside the data file&lt;/h3&gt;
&lt;p&gt;Inside each continent &lt;code&gt;YAML&lt;/code&gt; file, I listed the countries in that continent under &lt;code&gt;country&lt;/code&gt;, using an object &lt;code&gt;name&lt;/code&gt; where the value is the country name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Algeria&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Angola&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Cameroon&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Comoros&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Gambia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ghana&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Ivory&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Coast&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Kenya&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Lesotho&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Madagascar&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Malawi&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Mauritius&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Morocco&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Nigeria&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Namibia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Senegal&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Sierra&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Leone&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;South&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Africa&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Swaziland&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tanzania&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Tunisia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Uganda&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Zambia&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Zimbabwe&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-the-data&#34;&gt;Using the data&lt;/h3&gt;
&lt;p&gt;By using the &lt;a href=&#34;https://gohugo.io/functions/range/#readout&#34;&gt;range&lt;/a&gt; function you can loop through the content, accessing the data folder with &lt;code&gt;.Site.Data&lt;/code&gt; followed by the name of the file and the nested data structure.&lt;/p&gt;
&lt;p&gt;To retrieve data from my &lt;code&gt;africa.yaml&lt;/code&gt; data file I used the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;countries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;continent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;africa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;country&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;material-icons&amp;#34;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;{{ .name }}&lt;/code&gt; prints out the name of the country.&lt;/p&gt;
&lt;p&gt;To see this in action &lt;a href=&#34;http://www.harrycresswell.co.uk/client/ain/ain-filters/&#34;&gt;check out this prototype&lt;/a&gt; and hit the filter button above the search called &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are applying this to your own data be sure to update &lt;code&gt;countries.continent.africa.country&lt;/code&gt; with your specific data structure.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Data files in Hugo make working with large amounts of data a whole lot less cumbersome. Abstracting repetitive code away from templates keeps file clean and lightweight and managing content a somewhat easier task.&lt;/p&gt;
&lt;p&gt;For more on data in Hugo head to the docs, where you can learn about “data-driven content” data features, which lets you load any &lt;code&gt;JSON&lt;/code&gt; or &lt;code&gt;CSV&lt;/code&gt; file from nearly any resource.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://novelist.xyz/tech/hugo-data-files/&#34;&gt;How to use Data Files in Hugo: an example&lt;/a&gt; by Peter Y. Chuang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;Data Templates&lt;/a&gt; fro the Hugo Docs&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Static site form handling with Netlify</title>
        <link>https://azharkhan.in/articles/forms-with-netlify/</link>
        <pubDate>Thu, 05 Apr 2018 09:49:36 +0200</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/forms-with-netlify/</guid>
        <description>&lt;p&gt;&lt;em&gt;Note: This tutorial requires you have a static site which you deploy using &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;. If you don‘t use Netlify, read on as you might well be convinced to switch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Chances are you might have read &lt;a href=&#34;https://azharkhan.in/articles/form-data-with-zapier/&#34;&gt;Using Zapier to send form data&lt;/a&gt;. I used Zapier to handle form submissions on the previous incarnation of this site. And it worked great. I was very happy with the fact I could by-pass subscription based static site form services like &lt;a href=&#34;https://formspree.io/&#34;&gt;Formspree&lt;/a&gt; and &lt;a href=&#34;https://formkeep.com/&#34;&gt;Formkeep&lt;/a&gt;, just by using Zapier Webhooks and a bit of AJAX to tidy things up.&lt;/p&gt;
&lt;p&gt;If you’re also running a static site and wondering how best to go about collecting form submissions without a backend, then &lt;a href=&#34;https://azharkhan.in/articles/form-data-with-zapier/&#34;&gt;I’d highly recommend using Zapier&lt;/a&gt;, everytime. There is however one exception, and the reason I made the switch. And that reason is Netlify.&lt;/p&gt;
&lt;p&gt;If you use Netlify to deploy your static site, there’s an even easier way to handle your form submissions. This article looks at how to get set up.&lt;/p&gt;
&lt;p&gt;In case you’re interested in seeing how this form we’re about to build works, then head over to &lt;a href=&#34;https://azharkhan.in/contact/&#34;&gt;my contact page&lt;/a&gt; for a quick demo. Feel free to test it out.&lt;/p&gt;
&lt;h2 id=&#34;why-use-netlify-for-your-form-submissions&#34;&gt;Why use Netlify for your form submissions&lt;/h2&gt;
&lt;p&gt;Before we get into the code, let’s run through why Netlify is an awesome option for static form handling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need for any API calls&lt;/li&gt;
&lt;li&gt;No JS required&lt;/li&gt;
&lt;li&gt;Less code&lt;/li&gt;
&lt;li&gt;Built-in email and slack notification options for form submissions&lt;/li&gt;
&lt;li&gt;Optional integrate with &lt;a href=&#34;https://zapier.com/&#34;&gt;Zapier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Receive file upload submissions&lt;/li&gt;
&lt;li&gt;Export form submissions to a CSV file&lt;/li&gt;
&lt;li&gt;Automatic spam filtering, reCAPTCHA 2 and honeypot field options&lt;/li&gt;
&lt;li&gt;Optional AJAX submissions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a fair amount of cool stuff we can do with Netlify Forms already.&lt;/p&gt;
&lt;h2 id=&#34;so-whats-the-deal&#34;&gt;So What’s the deal?&lt;/h2&gt;
&lt;p&gt;Netlify’s ’Forms Free’ includes up to 100 form submissions per month, if you hit the limit, Netlify will upgrade you to ’Forms Pro’, which includes 1000 submissions per month. Perfect for small business and personal websites.&lt;/p&gt;
&lt;p&gt;With that said, let’s take a look at how to set up a form to work with Netlify. I’ll be using my own setup as an example.&lt;/p&gt;
&lt;h2 id=&#34;how-i-set-up-netlify-to-handle-forms&#34;&gt;How I set up Netlify to handle forms&lt;/h2&gt;
&lt;p&gt;First, I created a new page on my site to host my new contact form. From the command line that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd site
hugo new page/contact.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice I’m using &lt;code&gt;.html&lt;/code&gt; and not &lt;code&gt;.md&lt;/code&gt; as my contact page will contain the HTML needed for my form. Using the &lt;code&gt;.html&lt;/code&gt; extension for pages is perfectly valid in Hugo.&lt;/p&gt;
&lt;p&gt;Inside my &lt;code&gt;contact.html&lt;/code&gt; page I added some basic markup for my form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your name?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your full name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your email address?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What your message?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your message...&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: I’ve removed class names to make it easier to read, you will want to add some in order to style your form.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For Netlify to start receiving my form submissions, it’s as simple as adding the &lt;code&gt;netlify&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Next go ahead and add a &lt;code&gt;name&lt;/code&gt; attribute, so Netlify knows what to call the form in the Netlify web app. If you have more than one form on your site you will need to use unique names. I’ve called mine &lt;code&gt;name=&amp;quot;contact&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Once you push your new form page to your production site, Netlify will start receiving form submissions.&lt;/p&gt;
&lt;h2 id=&#34;extending-your-form-for-spam-filtering&#34;&gt;Extending your form for Spam filtering&lt;/h2&gt;
&lt;p&gt;Netlify runs a spam filter by default when a form is submitted, but you might want to add an extra layer of security by using a “Honeypot” field. This will keep bots from hammering your inbox with junk submissions.&lt;/p&gt;
&lt;p&gt;In the words of Netlify:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;”‘Honeypot‘ fields are hidden form fields that lure bot users into completing a field that human users can’t see. A form submitted with a completed honeypot field can be rejected as spam, because only a bot would see and complete the field.“&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sounds like a good idea to me, so let’s get this set up now.&lt;/p&gt;
&lt;p&gt;All you need to do is add &lt;code&gt;netlify-honeypot=&amp;quot;bot-field&amp;quot;&lt;/code&gt; to your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, then add a new input field in your form to catch those bots, &lt;code&gt;name=&amp;quot;bot-field&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With that done your form should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify-honeypot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;“u-visually-hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Don’t fill this out if you&amp;#39;re human: &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your name?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full-name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your full name&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What is your email address?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your email&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;What your message?
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Your message...&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;textarea&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Form-submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see I’ve added &lt;code&gt;class=&amp;quot;u-visually-hidden&amp;quot;&lt;/code&gt; to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag containing the “Honeypot” field. This is a reusable utility class which will hide the field with some simple CSS. Now bots will find the field but reader won’t.&lt;/p&gt;
&lt;p&gt;At this point Netlify is set up to collect form data and any spam will be filter out. The final thing to do is add some finesse with a custom page redirect.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-success-page&#34;&gt;Adding a custom success page&lt;/h2&gt;
&lt;p&gt;By default, when someone completes your form, they will see a generically styled success message with a link back to the form page, that’s fine but you might want something custom.&lt;/p&gt;
&lt;p&gt;I chose to replace this with &lt;a href=&#34;https://azharkhan.in/success/&#34;&gt;a success page&lt;/a&gt;, to inform visitors their message was submitted successfully and to say thanks.&lt;/p&gt;
&lt;p&gt;To do something similar create a new page, for example &lt;code&gt;/success/&lt;/code&gt; and add an &lt;code&gt;action&lt;/code&gt; attribute to your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;If all’s well and good, your form tag should now look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;netlify-honeypot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bot-field&amp;#34;&lt;/span&gt;   &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/success/&amp;#34;&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;netlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure the path is relative, and starts with a &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Great, now we have a success page. The final thing to do is set up a way to receive our form submissions.&lt;/p&gt;
&lt;h2 id=&#34;receiving-form-submissions&#34;&gt;Receiving form submissions&lt;/h2&gt;
&lt;p&gt;Netlify has a few different notification options for form submissions, including email and Slack notifications.&lt;/p&gt;
&lt;p&gt;This is handled from within the Netlify web app. You can find the options in &lt;strong&gt;Settings &amp;gt; Forms &amp;gt; Form notifications&lt;/strong&gt;. Select the &lt;strong&gt;Add notification&lt;/strong&gt; dropdown to see your options. I chose to keep things simple for now, receiving a notification by email.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this article we’ve looked at setting up static site form submissions using Netlify. If you’ve followed along you should now have a functioning contact form on your site which sends notifications to your email.&lt;/p&gt;
&lt;p&gt;From here you might consider adding more fields to your form or building a success alert using AJAX and ditching the success page.&lt;/p&gt;
&lt;p&gt;Perhaps you’re thinking about adding a few automation steps with Zapier, to send your submission data to other apps in your workflow. Whether that be updating your mailing list in Mailchimp or adding data to a google sheet. The possibilities are almost endless so I’ll leave you to decide where to take it next.&lt;/p&gt;
&lt;p&gt;Finally, if you haven’t seen it already, make sure you check out the article below from the Netlify blog, which goes into more detail on what can be done with form data using Netlify.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netlify.com/docs/form-handling/&#34;&gt;Netlify Docs: Form Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Page content on your Hugo homepage</title>
        <link>https://azharkhan.in/articles/hugo-page-content-on-homepage/</link>
        <pubDate>Fri, 02 Mar 2018 15:44:49 +0100</pubDate>
        <author>azhar932@icloud.com (Azhar Khan)</author>
        <guid>https://azharkhan.in/articles/hugo-page-content-on-homepage/</guid>
        <description>&lt;p class=&#34;intro&#34;&gt;
    A simple Hugo snippet for displaying content from a specific page on your site homepage.
&lt;/p&gt;

&lt;p&gt;Say for example I wanted to add the title and content from a page called “How it works” on my homepage.&lt;/p&gt;
&lt;p&gt;First I’d need to create a page called how it works.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new page/how-it-works.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the page front matter add a parameter called &lt;code&gt;type&lt;/code&gt; and give it a value which makes sense.&lt;/p&gt;
&lt;p&gt;That might look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;How It Works&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2018-03-02T14:58:10&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then in your &lt;code&gt;index.html&lt;/code&gt; add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;works&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;look&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;front&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;matter&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;f3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it!&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>