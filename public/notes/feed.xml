<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azhar Khan – Notes</title>
    <link>https://azharkhan.in/notes/</link>
    <description>Azhar Khan – Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>azhar932@icloud.com (Azhar Khan)</managingEditor>
    <webMaster>azhar932@icloud.com (Azhar Khan)</webMaster>
    <lastBuildDate>Tue, 19 May 2020 07:42:58 +0100</lastBuildDate>
    
        <atom:link href="https://azharkhan.in/notes/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hoisting in Javascript</title>
      <link>https://azharkhan.in/notes/hoisting-javascript/</link>
      <pubDate>Tue, 19 May 2020 07:42:58 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/hoisting-javascript/</guid>
      <description>&lt;p&gt;&lt;em&gt;What exactly is hoisting? These are my notes taken from &lt;a href=&#34;https://beginnerjavascript.com/&#34;&gt;Beginner JavaScript by Wes Bos&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hoisting allows you to access functions and variables before they have been created.&lt;/p&gt;
&lt;p&gt;There are two things that are hoisted in JavaScript; Function declarations and variable declarations.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sayHi();

function sayHi() {
	console.log(&#39;hey!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the code above we’re running the function before we declare it, but the code still works and we see “hey!” in the console.&lt;/p&gt;
&lt;p&gt;Why does this happen?&lt;/p&gt;
&lt;p&gt;This is because when you run your JavaScript code, the JavaScript compiler takes all of your function declarations and moves them to the top of the file so they’re all available to use in the rest of your code. This is what’s called Hoisting.&lt;/p&gt;
&lt;p&gt;So hoisting allows you to run functions before you declare them.&lt;/p&gt;
&lt;p&gt;Now consider the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sayHi();

function sayHi() {
	console.log(&#39;hey!&#39;);
	console.log(add(10,2)):
}

function add(a, b) {
	return 1 + b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will also work fine because the &lt;code&gt;sayHi&lt;/code&gt; function is hoisted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Process JSON data from the command line with JQ</title>
      <link>https://azharkhan.in/notes/process-json-data-with-jq/</link>
      <pubDate>Mon, 30 Mar 2020 17:20:31 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/process-json-data-with-jq/</guid>
      <description>&lt;p&gt;jq is a handy little utility for processing JSON in the command line. It’s useful for turning your data into a more readable format when using &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Without &lt;code&gt;jq&lt;/code&gt;, using &lt;code&gt;curl&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://api.airtable.com/v0/app3fgXYOzsH7WeAf/Form%20data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will return something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;recFjEUzugysAyT1y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Reading&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Zoom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my kitchen &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Saturday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Poetry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;4am&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-22T15:29:34.000Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;recGP8i9VZUVOcHMt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Playing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Periscope&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my bathroom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Wednesday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Ben&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Music&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2am&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-17T16:17:47.000Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;recPtO0aVYNyb7plD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Training&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Instagram&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;The Dagobah System&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Only on leap years&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Yoda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Jedi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;12pm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-22T17:45:36.000Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;recVwaCfR7XTcPOGC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Eating&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Youtube&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my living room&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Monday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Harry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Chess&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;9am&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-17T16:17:47.000Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rectxMQbGwbcbsSOv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Teaching&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Snapchat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my garden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Everyday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Sam&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Oragami&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1am&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-17T16:17:47.000Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}]}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make this unwieldy data easier to read, you can &lt;a href=&#34;https://stedolan.github.io/jq/download/&#34;&gt;install jq&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then use the same command as before, but this time pipe it through jq, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://api.airtable.com/v0/app3fgXYOzsH7WeAf/Form%20data
| jq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;jq will now return our JSON data in a more familiar format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;recFjEUzugysAyT1y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Reading&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Zoom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my kitchen &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Saturday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Poetry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4am&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-22T15:29:34.000Z&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;recGP8i9VZUVOcHMt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Playing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Periscope&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my bathroom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Wednesday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Ben&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Music&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2am&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-17T16:17:47.000Z&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;recPtO0aVYNyb7plD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Training&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Instagram&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;The Dagobah System&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Only on leap years&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Yoda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Jedi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12pm&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-22T17:45:36.000Z&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;recVwaCfR7XTcPOGC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Eating&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Youtube&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my living room&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Monday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Harry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Chess&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;9am&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-17T16:17:47.000Z&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rectxMQbGwbcbsSOv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time zone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GMT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Activity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Teaching&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Social Channel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Snapchat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my garden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;When&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Everyday&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sam&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Thing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Oragami&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1am&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;createdTime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-03-17T16:17:47.000Z&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stedolan&#34;&gt;jq&lt;/a&gt; from Stephen Dolan&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>5 question problem solving strategy</title>
      <link>https://azharkhan.in/notes/5-question-problem-solving-strategy/</link>
      <pubDate>Fri, 21 Feb 2020 17:59:33 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/5-question-problem-solving-strategy/</guid>
      <description>&lt;p&gt;“Having a clearly defined, repeatable strategy is the easiest way to make problem solving more tolerable”, says Nicholas C. Zakas in &lt;a href=&#34;https://humanwhocodes.com/blog/2020/02/how-i-think-about-solving-problems/&#34;&gt;How I think about solving problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s Nicholas’s five questions to ask yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is this really a problem?&lt;/li&gt;
&lt;li&gt;Does the problem need to be solved?&lt;/li&gt;
&lt;li&gt;Does the problem need to be solved now?&lt;/li&gt;
&lt;li&gt;Does the problem need to be solved by me?&lt;/li&gt;
&lt;li&gt;Is there a simpler problem I can solve instead?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nicholas uses these 5 questions to help make decisions and prioritise his actions. They help make him more efficient at problem solving and in general, happier with the outcomes.&lt;/p&gt;
&lt;p&gt;He says that; “Each one of these questions helps reveal something about the problem, so you can make progress or even avoid the problem altogether.”&lt;/p&gt;
&lt;p&gt;I like this pragmatic approach to problemn solving. It reminds me that it’s not just about tackling a problem head on, but about considering the problem from many different perspectives. In some cases, that means figuring out whether it’s a problem worth solving in the first place.&lt;/p&gt;
&lt;p&gt;To quote &lt;a href=&#34;https://fs.blog/2013/10/inversion/&#34;&gt;Charlie Munger&lt;/a&gt;; “..many hard problems are best solved when they are addressed backward.” It reminds me of &lt;a href=&#34;https://azharkhan.in/articles/2019-review/#the-power-of-inversion&#34;&gt;the power of inversion&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;source&#34;&gt;Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://humanwhocodes.com/blog/2020/02/how-i-think-about-solving-problems/&#34;&gt;How I think about solving problems&lt;/a&gt; by Nicholas C. Zakas&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Understanding JavaScript Arrow Function syntax</title>
      <link>https://azharkhan.in/notes/javascript-es6-arrow-function-syntax/</link>
      <pubDate>Mon, 10 Feb 2020 15:06:08 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/javascript-es6-arrow-function-syntax/</guid>
      <description>&lt;p&gt;&lt;em&gt;Notes based on &lt;a href=&#34;https://beginnerjavascript.com/&#34;&gt;Beginner JavaScript by Wes Bos&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To get a good grasp of the arrow function syntax, first you need to get an understanding of a few different ways of expressing a function in JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;a-few-ways-to-make-a-function&#34;&gt;A few ways to make a function&lt;/h2&gt;
&lt;p&gt;Understanding these different methods of expressing a function will help you get your head around the newer ES6 Arrow Function syntax.&lt;/p&gt;
&lt;h3 id=&#34;method-1-using-the-function-keyword&#34;&gt;Method 1: Using the function keyword&lt;/h3&gt;
&lt;p&gt;Use the &lt;code&gt;function&lt;/code&gt; keyword, followed by the name of the function. In this case the function name is &lt;em&gt;doctorize&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Next set a parameter. That’s the placeholder for whatever data you want to pass into your function. In this case &lt;em&gt;firstname&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally use a &lt;code&gt;return&lt;/code&gt; statement to return the data however you wish.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doctorize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Dr. &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s using the function keyword.&lt;/p&gt;
&lt;h3 id=&#34;method-2-anonymous-functions&#34;&gt;Method 2: Anonymous functions&lt;/h3&gt;
&lt;p&gt;An anonymous function is simple a function without a name.&lt;/p&gt;
&lt;p&gt;An anonymous functions isn’t valid JavaScript in it’s own right. However, there are certain ways of using anonymous functions which makes them valid. Such as in callback functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Dr. &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s declaring an anonymous function.&lt;/p&gt;
&lt;h3 id=&#34;method-3-function-expressions&#34;&gt;Method 3: Function expressions&lt;/h3&gt;
&lt;p&gt;A function expression is when you store a function as a value in a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doctorize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Dr. &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstname&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All we’re doing here is taking an anonymous function and sticking it into a variable. Although this is technically still an anonymous function, the browser will use the variable name as the name of the function.&lt;/p&gt;
&lt;p&gt;When you hear someone say “functions are first class citizens”, what they really mean is that you can store functions as variables.&lt;/p&gt;
&lt;p&gt;Function expressions differ from functions created with the function keyword in that the aren’t hoisted.&lt;/p&gt;
&lt;p&gt;Functions created with the function keyword are ‘hoisted’ to the top of the document, which allows you to call the function from anywhere in your document. This isn’ true for function expressions which are &lt;em&gt;not&lt;/em&gt; hoisted.&lt;/p&gt;
&lt;p&gt;Now let’s look at arrow functions.&lt;/p&gt;
&lt;h2 id=&#34;arrow-functions&#34;&gt;Arrow functions&lt;/h2&gt;
&lt;p&gt;Arrow functions offer a concise syntax. They also don’t have their own scope, in reference to the &lt;code&gt;this&lt;/code&gt; keyword. Arrow functions are anonymous functions.&lt;/p&gt;
&lt;p&gt;These are the steps to create an arrow function:&lt;/p&gt;
&lt;h3 id=&#34;step-1-take-a-regular-function&#34;&gt;Step 1: Take a regular function&lt;/h3&gt;
&lt;p&gt;Here’s a regular function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4 lines of code?! Bit lengthy.&lt;/p&gt;
&lt;h3 id=&#34;step-2-return-the-value-itself&#34;&gt;Step 2: Return the value itself&lt;/h3&gt;
&lt;p&gt;To make the function shorter you can return the value instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3-convert-it-to-an-anonymous-function&#34;&gt;Step 3: Convert it to an anonymous function&lt;/h3&gt;
&lt;p&gt;To convert the function to an anonymous function we remove the function name and store it in a variable. Now we have a function expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-4-convert-to-an-arrow-function&#34;&gt;Step 4: Convert to an arrow function&lt;/h3&gt;
&lt;p&gt;Now delete the function keyword, because it’s long and we don’t like that. Then add a fat arrow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-5-switch-from-explicit-to-implicit-return&#34;&gt;Step 5: Switch from explicit to implicit return&lt;/h3&gt;
&lt;p&gt;Move the function to 1 line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Delete the curly brackets.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then remove the &lt;code&gt;return&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we’ve totally removed the function block. However this is optional.&lt;/p&gt;
&lt;p&gt;If there is only one parameter, you can also remove the parentheses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inchToCM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;inches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have an arrow function.&lt;/p&gt;
&lt;p&gt;Keep in mind, you will have to keep the parentheses if you have more than one parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ✅ will work!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ⛔️ won’t work!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Understanding data types: boolean and equality</title>
      <link>https://azharkhan.in/notes/js-data-types-boolean-equality/</link>
      <pubDate>Fri, 17 Jan 2020 08:46:12 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/js-data-types-boolean-equality/</guid>
      <description>&lt;p&gt;&lt;em&gt;These notes are taken from &lt;a href=&#34;https://beginnerjavascript.com/&#34;&gt;Beginner JavaScript&lt;/a&gt; by Wes Bos. Go buy it!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A boolean value is either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Like a light switch it’s either on or off.&lt;/p&gt;
&lt;p&gt;Booleans are used for logic, such as if statements. They can be calculated or manually set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isDrawing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case we have a manually set flag variable which might describe the users actions on a page.&lt;/p&gt;
&lt;p&gt;We can also calculate booleans:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// set the age
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// age is greater than 19
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ofAge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// returns boolean value of false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ofAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;understanding-equality&#34;&gt;Understanding equality&lt;/h2&gt;
&lt;p&gt;We use one equal sign operator (=) to set a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also have double equals (==) and triple equals (===).
But, what’s the difference? And which one should we use?&lt;/p&gt;
&lt;p&gt;Double equals (==) checks the value of the left and right are the same. However it will ignore differences in type.&lt;/p&gt;
&lt;p&gt;Take this example. Both left and right values equal 10, however even though the left value is of type string and the right is a number it still returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In contrast, triple equals (===) will always check that both the value &lt;em&gt;and&lt;/em&gt; the type of the left and right equal the same&lt;/p&gt;
&lt;p&gt;The example below returns &lt;code&gt;true&lt;/code&gt; as the value of the left and right is 10. And both data types are the same. In this case they are both numbers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next take the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the values are the same, but the types differ. The left is a string and the right is a number. So &lt;code&gt;false&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p&gt;You should almost always use triple equals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formatting dates in Gatsby with GraphQL</title>
      <link>https://azharkhan.in/notes/formatting-dates-gatsby/</link>
      <pubDate>Thu, 16 Jan 2020 11:41:11 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/formatting-dates-gatsby/</guid>
      <description>&lt;p&gt;Perhaps the easiest way to format dates in Gatsby is at query-time using Gatsby’s GraphQL layer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;formatString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MMMM Do, YYYY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cmd + click&lt;/code&gt; on the &lt;code&gt;formatString&lt;/code&gt; function in your query to open the schema documentation explorer.&lt;/p&gt;
&lt;p&gt;You’ll see the date is formatted using Moment.js date tokens.&lt;/p&gt;
&lt;p&gt;Head to &lt;a href=&#34;https://momentjs.com/docs/#/displaying/format/&#34;&gt;the MomentJS docs&lt;/a&gt; to see the various format options.&lt;/p&gt;
&lt;p&gt;For a current project I’m using a fairly minimal config.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;formatString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;DD MMM&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which prints out something along the lines of:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;25 Jul&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;adding-the-time&#34;&gt;Adding the time&lt;/h2&gt;
&lt;p&gt;For another project I needed to grab the time, not just the date.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;py&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;formatString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dddd MMMM Do, YYYY hh:mma&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This returns something along the lines of:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Thursday January 16th, 2020&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/docs/graphql-concepts/#formatting-dates&#34;&gt;GraphQL Concepts – Formatting dates&lt;/a&gt; from Gatsby Docs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/docs/graphql-reference/#format&#34;&gt;GraphQL Reference - Dates&lt;/a&gt; from Gatsby Docs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://momentjs.com/docs/#/displaying/format/&#34;&gt;Moment.js Display formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Understanding data types: null vs undefined</title>
      <link>https://azharkhan.in/notes/js-data-types-null-undefined/</link>
      <pubDate>Tue, 14 Jan 2020 20:44:38 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/js-data-types-null-undefined/</guid>
      <description>&lt;p&gt;&lt;em&gt;These notes are taken from &lt;a href=&#34;https://beginnerjavascript.com/&#34;&gt;Beginner JavaScript&lt;/a&gt; by Wes Bos. Go buy it!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to express nothing in JavaScript; &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. But how do they differ?&lt;/p&gt;
&lt;h2 id=&#34;understanding-undefined&#34;&gt;Understanding undefined&lt;/h2&gt;
&lt;p&gt;If we create a variable but don’t set anything to it, the value returned will be &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; is something that has been created, like a variable, but does not yet have a value set to it. In other words, &lt;em&gt;it is not yet defined&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The browser sets this missing value to &lt;code&gt;undefined&lt;/code&gt; because no value exists and so there is nothing to return.&lt;/p&gt;
&lt;p&gt;If we then give the variable a value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dog&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;snickers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The browser will return the new value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;snickers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the value is no longer &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;understanding-null&#34;&gt;Understanding null&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is a value of nothing that has to be explicitly set before it can be returned as &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;somethingNull&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case the value is &lt;code&gt;null&lt;/code&gt;, unlike our example above which is &lt;code&gt;undefined&lt;/code&gt; because it literally has no value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;somethingUndefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example returned &lt;code&gt;undefined&lt;/code&gt; as we have yet to give it a value.&lt;/p&gt;
&lt;h2 id=&#34;a-practical-example&#34;&gt;A practical example&lt;/h2&gt;
&lt;p&gt;We can use the example of a mononymous person (someone known by a single name). In this case we’ll use the singer &lt;a href=&#34;https://en.wikipedia.org/wiki/Cher&#34;&gt;Cher&lt;/a&gt;, who we know only as Cher.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cher&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don’t know Cher’s last name so &lt;code&gt;.last&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;cher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now on to our example of &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The comedian and illusionist &lt;a href=&#34;https://en.wikipedia.org/wiki/Teller_(magician)&#34;&gt;Teller&lt;/a&gt;, the silent half of the duo Penn &amp;amp; Teller, legally changed his original polynym, Raymond Joseph Teller, to the mononym &amp;ldquo;Teller&amp;rdquo; and possesses a United States passport issued in that single name.&lt;/p&gt;
&lt;p&gt;In JavaScript we can represent his original name like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;teller&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Raymond&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Teller&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To represent his legally changed polynym we might update the value of &lt;code&gt;last&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;teller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Teller&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;teller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using CSS Media Queries in React</title>
      <link>https://azharkhan.in/notes/css-media-queries-in-react/</link>
      <pubDate>Wed, 21 Aug 2019 15:41:48 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/css-media-queries-in-react/</guid>
      <description>&lt;p&gt;Being more comfortable with HTML and CSS, than JavaScript and React, I still like the idea of using good ol&amp;rsquo; media queries to show and hide content at certain viewport widths. But how do media queries work with React?&lt;/p&gt;
&lt;p&gt;I found a library called &lt;a href=&#34;https://github.com/ReactTraining/react-media&#34;&gt;React Media&lt;/a&gt; which is essentially a media query component for React that listens for matches to a CSS media query and renders stuff based on whether the query matches or not.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Install from the root of your project using NPM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save react-media
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using &lt;code&gt;react-media&lt;/code&gt; within &lt;code&gt;create-react-app&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Import the media component into your project using ES modules
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Media&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;react-media&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// Render a media component with a query prop whose value is a valid CSS media query. 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Media&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;(max-width: 599px)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// The children prop should be a function whose only argument will be a boolean flag that indicates whether the media query matches or not.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;less&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;than&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;least&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wide&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Media&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what’s going on here? React Media uses a conditional operator to determine what to display based on the query prop, in this case whether the viewport is less than 600px or at least 600px wide.&lt;/p&gt;
&lt;p&gt;This is helpful for rendering different components at different viewports. For example you might have a hamburger icon you want to show on smaller screens but hide on larger screens and an inline navigation which you want to hide on smaller screens but show on larger screens.&lt;/p&gt;
&lt;p&gt;React Media provides a quick solution to help solve this problem.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReactTraining/react-media&#34;&gt;React Media&lt;/a&gt; from React Training.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Real-time updates with Sanity watch mode</title>
      <link>https://azharkhan.in/notes/real-time-updates-sanity-watch-mode/</link>
      <pubDate>Tue, 20 Aug 2019 10:57:26 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/real-time-updates-sanity-watch-mode/</guid>
      <description>&lt;p&gt;Watch mode allows you to see realtime updates without having to manually restart the build process.&lt;/p&gt;
&lt;p&gt;Set &lt;code&gt;watchMode: true&lt;/code&gt; in your &lt;code&gt;gatsby-sanity-source&lt;/code&gt; plugin options, to set up a listener which watches your project for changes.&lt;/p&gt;
&lt;p&gt;Take it further by setting &lt;code&gt;overlayDrafts: true&lt;/code&gt; to immediately apply any changes you make to draft content.&lt;/p&gt;
&lt;p&gt;You will then need to generate a token from the Sanity manage console.&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;manage.sanity.io&lt;/code&gt; &amp;gt; settings &amp;gt; API &amp;gt; Add New Token.&lt;/p&gt;
&lt;p&gt;Create a Read token called Gatsby and add to your &lt;code&gt;gatsby-config.js.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gatsby-source-sanity&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;projectId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_project_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_dataset_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;overlayDrafts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;watchMode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;your_token_id&amp;#39;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Restart &lt;code&gt;gatsby develop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now when you edit content in the Studio CMS you will see changes occur in Gatsby in realtime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Query data from Sanity using GraphQL</title>
      <link>https://azharkhan.in/notes/query-data-from-sanity-using-graphql-and-gatsby/</link>
      <pubDate>Wed, 14 Aug 2019 09:32:35 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/query-data-from-sanity-using-graphql-and-gatsby/</guid>
      <description>&lt;p&gt;I’m making 2 assumptions here, the first is that you have a Sanity project set up, you’ve added at least one content type and you’ve entered some content before &lt;a href=&#34;https://azharkhan.in/notes/til-03-deploy-graphql-api-sanity/&#34;&gt;deploying a GraphQL API&lt;/a&gt;. The second is that you’ve configured a Gatbsy project to work with Sanity, by installing the &lt;code&gt;gatsby-source-sanity&lt;/code&gt; plugin.&lt;/p&gt;
&lt;p&gt;With those steps complete we can now run our site in development mode using &lt;code&gt;gatsby develop&lt;/code&gt;, then head to &lt;code&gt;http://localhost:8000/___graphql&lt;/code&gt; to launch GraphiQL and explore our schema.&lt;/p&gt;
&lt;h2 id=&#34;writing-your-first-sanity-query-in-graphiql&#34;&gt;Writing your first Sanity query in GraphiQL&lt;/h2&gt;
&lt;p&gt;Type &lt;code&gt;allSanity&lt;/code&gt; to launch the options and explore the available document schemas in your API.&lt;/p&gt;
&lt;p&gt;One of the available options in my API is &lt;code&gt;allSanityEvent&lt;/code&gt; which contains all the data associated with a document type I have created called ‘Event’.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-GraphQL&#34; data-lang=&#34;GraphQL&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;allSanityEvent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can make a basic query for an event title like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-GraphQL&#34; data-lang=&#34;GraphQL&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;allSanityEvent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;			&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;				&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;			&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Tip: Hit &lt;code&gt;alt + space&lt;/code&gt; to see the available options at each level of your query&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the particular project I’m working on right now my full query grabs the title, excerpt, slug and image from all events. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	allSanityEvent {
		edges {
			node {
				title
				excerpt
				slug {
					current
				}
				image {
					asset {
						fluid {
							src
						}
					}
				}
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And returns the following JSON object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;allSanityEvent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;edges&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;My second event&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;excerpt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is the excerpt for the second event&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;slug&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;current&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my-second-event&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;asset&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;fluid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://cdn.sanity.io/images/k5nyspnm/production/20ef5df9ed8dac42c2ec50b474a46726143ceb4f-2250x1500.png?w=800&amp;amp;h=533&amp;amp;fit=crop&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nt&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;My first event&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;excerpt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;This is the excerpt for the first event&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;slug&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;current&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my-first-event&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
              &lt;span class=&#34;nt&#34;&gt;&amp;#34;asset&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;fluid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                  &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://cdn.sanity.io/images/k5nyspnm/production/1c6f3cee364b6cf5bfcad46539b0a9cf82ace1c5-800x400.png?w=800&amp;amp;h=400&amp;amp;fit=crop&amp;#34;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;query-your-schema-in-gatsby&#34;&gt;Query your schema in Gatsby&lt;/h2&gt;
&lt;p&gt;Now we have our query we want to show the content in our Gatsby site.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt; first we need to import &lt;code&gt;graphql&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { Link, graphql } from &#39;gatsby&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we can write our query and export it as a variable. Make sure you switch out the image &lt;code&gt;src&lt;/code&gt; for the ￼image fragment reference.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export const queryEvent = graphql`
{
	allSanityEvent {
		edges {
			node {
				title
				excerpt
				slug {
					current
				}
				image {
					asset {
						fluid {
							...GatsbySanityImageFluid
						}
					}
				}
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can grab the data in our layout.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const IndexPage = ({ data }) =&amp;gt; (
&amp;lt;Layout&amp;gt;
	&amp;lt;h1&amp;gt;Events&amp;lt;/h1&amp;gt;
	&amp;lt;ul&amp;gt;
		{data.allSanityEvent.edges.map(({ node: event }) =&amp;gt; (
			&amp;lt;li key={event.slug.current}&amp;gt;
				&amp;lt;h2&amp;gt;{event.title}&amp;lt;/h2&amp;gt;
				&amp;lt;Image fluid={event.image.asset.fluid} alt={event.title} /&amp;gt;
				&amp;lt;p&amp;gt;{event.excerpt}&amp;lt;/p&amp;gt;
			&amp;lt;/li&amp;gt;
		))}
	&amp;lt;/ul&amp;gt;
&amp;lt;/Layout&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have a list of events on our page, including the event title, image and excerpt.&lt;/p&gt;
&lt;p&gt;The next step will be to generate the single pages for each event.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/docs/sourcing-from-sanity/&#34;&gt;Sourcing from Sanity&lt;/a&gt; in the Gatsby Docs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SLGkyodumKI&#34;&gt;Build a portfolio site with Sanity and Gatsby&lt;/a&gt; from Jason Lengstorf.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Set up a Gatsby project with Sanity</title>
      <link>https://azharkhan.in/notes/new-gatsby-site-sanity-cms/</link>
      <pubDate>Mon, 05 Aug 2019 11:32:35 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/new-gatsby-site-sanity-cms/</guid>
      <description>&lt;h2 id=&#34;step-1-create-new-gatsby-project&#34;&gt;Step 1: Create new Gatsby project&lt;/h2&gt;
&lt;p&gt;Create new folder for new Gatsby site.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkdir gatsby-sanity-frontend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Move into that folder and create a fresh Gatsby project using the default Gatsby starter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd gatsby-sanity-frontend &amp;amp;&amp;amp; gatsby new .&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-install-sanity-dependency&#34;&gt;Step 2: Install Sanity dependency&lt;/h2&gt;
&lt;p&gt;Install Gatsby Source Sanity plugin to your project.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install --save gatsby-source-sanity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;gatsby-config.js&lt;/code&gt; add plugin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;gatsby-source-sanity&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;projectId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;yourProjectId&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;yourDatasetName&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will find your &lt;code&gt;projectId&lt;/code&gt; and &lt;code&gt;dataset&lt;/code&gt; inside &lt;code&gt;sanity.json&lt;/code&gt; found within your studio project.&lt;/p&gt;
&lt;p&gt;If you chose to make your dataset private you will also need to add a permissions token like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;gatsby-source-sanity&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;projectId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;yourProjectId&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;dataset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;yourDatasetName&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// a token with read permissions is required
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// if you have a private dataset
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MY_SANITY_TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3-optional-enable-gatsby-watch-mode-for-drafts&#34;&gt;Step 3: (optional) Enable Gatsby watch mode for drafts&lt;/h2&gt;
&lt;p&gt;Sanity has a cool feature which allows for realtime content updates in local development. So if you have your content studio and front end side-by-side in two different browser windows, you will see any changes you make to the content in the studio change in realtime in Gatsby.&lt;/p&gt;
&lt;p&gt;To get this set up correctly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to &lt;code&gt;manage.sanity.io&lt;/code&gt; and find your project (or run the command &lt;code&gt;sanity manage&lt;/code&gt; in the studio folder).&lt;/li&gt;
&lt;li&gt;Head to &lt;code&gt;Settings &amp;gt; API&lt;/code&gt;, then scroll down to the Tokens section&lt;/li&gt;
&lt;li&gt;Add a new token and give it read privileges.&lt;/li&gt;
&lt;li&gt;Back in the root of your &lt;code&gt;/web&lt;/code&gt; project locate &lt;code&gt;.env.development.template&lt;/code&gt; and rename it to &lt;code&gt;.env.development&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add your new token to the key: &lt;code&gt;SANITY_READ_TOKEN=&amp;quot;&amp;lt;token here&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;gatsby-config.js&lt;/code&gt; make sure you have &lt;code&gt;token: process.env.SANITY_READ_TOKEN,&lt;/code&gt; as one of the options in your &lt;code&gt;gatsby-source-sanity&lt;/code&gt; plugin config.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Restart your development environment for the changes to propagate. Make some changes in your studio and watch them appear in realtime in Gatsby.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/blog/2019-01-25-blazing-fast-development-with-gatsby-and-sanity-io/&#34;&gt;Blazing fast development with Gatsby and Sanity.io&lt;/a&gt; from Knut Melvær.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sanity-io/example-company-website-gatsby-sanity-combo#enable-gatsby-watch-mode-for-drafts&#34;&gt;Enable Gatsby Watchmode for Drafts&lt;/a&gt; from Sanity.io&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Deploy a GraphQL API for a Sanity project</title>
      <link>https://azharkhan.in/notes/deploy-graphql-api-sanity/</link>
      <pubDate>Fri, 19 Jul 2019 10:38:59 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/deploy-graphql-api-sanity/</guid>
      <description>&lt;p&gt;If you want to consume your Sanity dataset from a front-end the you will need to set up an API. You can do this using Sanity’s custom query language GROQ or GraphQL. These notes focus on the latter.&lt;/p&gt;
&lt;p&gt;With an API set up you will be able to query your data in any application you create.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: Anytime you make changes to your content schema, you will need to redeploy the GraphQL API&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploying-the-graphql-api&#34;&gt;Deploying the GraphQL API&lt;/h2&gt;
&lt;p&gt;First make sure your running the latest version of Sanity:
&lt;code&gt;sanity upgrade&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;sanity graphql deploy&lt;/code&gt; to deploy a GraphQL API for the dataset configured in &lt;code&gt;sanity.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will then be asked the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Do you want to enable a GraphQL playground? (Y/n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hit &lt;code&gt;Y&lt;/code&gt; and you’ll be able to explore the Schema in a GraphQL Playground.&lt;/p&gt;
&lt;h2 id=&#34;explore-the-schema-from-a-gatsby-project&#34;&gt;Explore the Schema from a Gatsby project&lt;/h2&gt;
&lt;p&gt;Explore &lt;code&gt;￼http://localhost:8000/___graphql&lt;/code&gt; after running &lt;code&gt;gatsby develop&lt;/code&gt; to understand the created data and create a new query and checking available collections and fields by typing &lt;code&gt;CTRL + SPACE&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further Resources&lt;/h2&gt;
&lt;p&gt;For more on this step &lt;a href=&#34;https://www.sanity.io/docs/data-store/graphql#deploying-the-graph-ql-api&#34;&gt;check out the docs&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Content schema in Sanity</title>
      <link>https://azharkhan.in/notes/content-schema-in-sanity/</link>
      <pubDate>Thu, 18 Jul 2019 11:17:25 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/content-schema-in-sanity/</guid>
      <description>&lt;p&gt;This is the bit where you define your data model, meaning the way you structure your content.&lt;/p&gt;
&lt;p&gt;The Sanity team recommend “you start by modelling your data logically, without thinking too much about how it&amp;rsquo;s going to be presented.”&lt;/p&gt;
&lt;p&gt;When modelling your data try and think about your content not as ‘pages’ but as content ‘types’ and establish what fields each of those content types will need.&lt;/p&gt;
&lt;p&gt;So instead of creating a content type called &lt;code&gt;Homepage&lt;/code&gt;, think about the type of content that might exist &lt;em&gt;on&lt;/em&gt; your homepage, and potentially elsewhere on your site.&lt;/p&gt;
&lt;p&gt;For example, your homepage might feature latest posts and you might also have a dedicated page for these posts too. In this case it makes sense to create a content type called &lt;code&gt;post&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next we need to consider the fields associated with our new content type. Think of these as the data attached to the content type. Things like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;slug&lt;/code&gt;, &lt;code&gt;excerpt&lt;/code&gt; and &lt;code&gt;publishedAt&lt;/code&gt; are fairly typical requirements for a post.&lt;/p&gt;
&lt;p&gt;It’s also worth thinking about the relationships between different data types and modelling your content according to what they mean.&lt;/p&gt;
&lt;p&gt;For example the &lt;code&gt;post&lt;/code&gt; content type may also have an author and perhaps a category attached to it. Maybe in the future you decide to add another content type called &lt;code&gt;note&lt;/code&gt;, which also requires an author and a category. This is a good reason to create a content type for both &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;category&lt;/code&gt; and make a reference it from both content types.&lt;/p&gt;
&lt;p&gt;Thinking about your content in this way creates a more flexible data model, as you’re not associating content too tightly to the presentation layer.&lt;/p&gt;
&lt;p&gt;It’s worth reading &lt;a href=&#34;https://www.sanity.io/docs/the-schema/donts-and-dos&#34;&gt;Dont’s and Dos&lt;/a&gt; in the Sanity docs for more on this. Next we’ll put this into practice in a Sanity project.&lt;/p&gt;
&lt;h2 id=&#34;understanding-schemajs&#34;&gt;Understanding schema.js&lt;/h2&gt;
&lt;p&gt;To begin, fire open &lt;code&gt;schemas/schema.js&lt;/code&gt; from inside your Sanity project. The first import you see is the &lt;code&gt;createSchema&lt;/code&gt; function which allows us to create a schema.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import createSchema from &#39;part:@sanity/base/schema-creator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next you’ll see &lt;code&gt;schemaTypes&lt;/code&gt; which imports any schema types required from plugins. To see what plugins are used head to &lt;code&gt;sanity.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The part we’re most concerned with is the &lt;code&gt;createSchema&lt;/code&gt; object. The array inside this object called &lt;code&gt;types&lt;/code&gt; is where we define content types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// We name our schema
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Then proceed to concatenate our document type
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// to the ones provided by any plugins that are installed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schemaTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// The following are document types which will appear
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// in the studio.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;category&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// When added to this list, object types can be used as
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// { type: &amp;#39;typename&amp;#39; } in other document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;blockContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see we have 3 content types &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, and &lt;code&gt;category&lt;/code&gt;. As we started this project using the Blog template these are already defined. If you started with a blank template you won’t see any content types defined.&lt;/p&gt;
&lt;p&gt;Above this block of code you’ll see each content type is stored in an external file and then imported. As our schema grows this will keep our project well organised.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// We import object and document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockContent&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./blockContent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;category&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./category&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The comment tell us that we are importing both &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;document&lt;/code&gt; schemas. We’ll get to this next.&lt;/p&gt;
&lt;h2 id=&#34;building-a-basic-schema&#34;&gt;Building a basic schema&lt;/h2&gt;
&lt;p&gt;Let’s create a new content type for notes. Create a new file &lt;code&gt;schemas/note.js&lt;/code&gt; and create a new object. We’ll also need to export the object so we can use it elsewhere.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to name our content type and define what type of content it is. In this case it’s a &lt;code&gt;document&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to import our new content type to the &lt;code&gt;schema.js&lt;/code&gt; file and add it to the types array so Sanity can see it.&lt;/p&gt;
&lt;p&gt;Back in &lt;code&gt;schema.js&lt;/code&gt; add the following below the &lt;code&gt;author&lt;/code&gt; import:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import note from &#39;./note&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then we need to update the types array to include the &lt;code&gt;note&lt;/code&gt; content type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;createSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// We name our schema
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Then proceed to concatenate our document type
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// to the ones provided by any plugins that are installed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schemaTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// The following are document types which will appear
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// in the studio.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;category&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;note&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// When added to this list, object types can be used as
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// { type: &amp;#39;typename&amp;#39; } in other document schemas
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;blockContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now run the studio locally, head to the browser and you’ll notice a few errors. We need a title for our new content type and an array of fields.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our notes will need a &lt;code&gt;title&lt;/code&gt;, which will be a basic text string type and of course a title so we can identity the field in the studio.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hit save and studio should reload and we can now see our new content type. We can create a new Note and fill in the note Title field.&lt;/p&gt;
&lt;h2 id=&#34;referencing-other-document-content-types&#34;&gt;Referencing other document content types.&lt;/h2&gt;
&lt;p&gt;Earlier I mentioned creating relationships between content types. The &lt;code&gt;reference&lt;/code&gt; type make this possible.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;note.js&lt;/code&gt; let’s add a reference that points to the &lt;code&gt;author&lt;/code&gt; content type, &lt;code&gt;author&lt;/code&gt; should already exist if you started with the Blog template.&lt;/p&gt;
&lt;p&gt;To specific what content type we want author to reference we can use the &lt;code&gt;to&lt;/code&gt; field. This takes one rule, that the type is &lt;code&gt;author&lt;/code&gt;. Now author will only allow references to the author content type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Note&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Author&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reference&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Back in Sanity studio we can see a new field titled Author which allows us to select an Author. If you haven’t added an author yet you’ll need to do this in the Author type first.&lt;/p&gt;
&lt;h2 id=&#34;further-resources&#34;&gt;Further resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sanity.io/docs/content-studio/the-schema&#34;&gt;The Schema&lt;/a&gt; from the Sanity Docs&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Starting a new Sanity project</title>
      <link>https://azharkhan.in/notes/new-sanity-project/</link>
      <pubDate>Tue, 09 Jul 2019 15:11:58 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/new-sanity-project/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sanity.io/&#34;&gt;Sanity.io&lt;/a&gt; is a headless CMS that allows you to structure your content by building custom schemas and deliver it as a flexible API, which you can then query using the front-end technology of your choice.&lt;/p&gt;
&lt;h2 id=&#34;install-sanity&#34;&gt;Install Sanity&lt;/h2&gt;
&lt;p&gt;Install Sanity studio globally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g @sanity/cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will allow you to use the &lt;code&gt;sanity&lt;/code&gt; CLI and scaffold new projects directly from the command line.&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-project&#34;&gt;Create a new project&lt;/h2&gt;
&lt;p&gt;To start a new project create a new project directory and move into it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir new-project &amp;amp;&amp;amp; cd new-project
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run &lt;code&gt;sanity init&lt;/code&gt; to log in Sanity, set up a dataset, and generate the files needed to run the editing environment locally.&lt;/p&gt;
&lt;p&gt;If this is your first project choose &lt;code&gt;Create new project&lt;/code&gt;, then give your project a name and name your dataset, this can be anything you like. If you leave blank it will be given the default name &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next select dataset visibility, choose the output path and select a template. It’s a good idea to choose &lt;code&gt;blog&lt;/code&gt; if this is your first project as it will give you a clue how to structure your schema. You can always delete the default schema later.&lt;/p&gt;
&lt;p&gt;Sanity will resolve dependencies then you will be ready to start the project.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Launch the project in VSCode, using &lt;code&gt;code .&lt;/code&gt; from the root directory, then use &lt;code&gt;sanity start&lt;/code&gt; to run a locally instance of the studio in your browser.&lt;/p&gt;
&lt;p&gt;Now you‘re ready to start building your content schema.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sanity.io/docs/introduction/getting-started&#34;&gt;Getting started with Sanity&lt;/a&gt; from the Sanity Docs.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Destroy all for loops</title>
      <link>https://azharkhan.in/notes/destroy-all-for-loops/</link>
      <pubDate>Wed, 29 May 2019 16:14:14 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/destroy-all-for-loops/</guid>
      <description>&lt;p&gt;These are my notes from Gordon Zhu’s free course &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;, which teaches you how to create a todo app in vanilla JavaScript.&lt;/p&gt;
&lt;p&gt;Now we’ve had some practice with Higher Order Functions and Callback Functions, theres a few places in our app that we can make improvements using what we know.&lt;/p&gt;
&lt;p&gt;Version 11 will look at refactoring our code to use these new methods.&lt;/p&gt;
&lt;h2 id=&#34;requirements-v11&#34;&gt;Requirements v11&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;todoList.toggleAll&lt;/code&gt; should use &lt;code&gt;forEach&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;view.displayTodos&lt;/code&gt; should use &lt;code&gt;forEach&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of this version we will have replaced all &lt;code&gt;for&lt;/code&gt; loops in our app wth &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;todolisttoggleall-should-use-foreach&#34;&gt;todoList.toggleAll should use forEach&lt;/h2&gt;
&lt;p&gt;Our &lt;code&gt;toggleAll&lt;/code&gt; method on the &lt;code&gt;todoList&lt;/code&gt; object currently has 3 &lt;code&gt;for&lt;/code&gt; loops. In this part we’ll focus on one at a time and refactor the code into a &lt;code&gt;forEach&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;We can comment out the first one so we can see what behaviour we need to replicate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   if (this.todos[i].completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     completedTodos++;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have it working the way we want it we can get rid of this old code.&lt;/p&gt;
&lt;p&gt;Now we can use the built in &lt;code&gt;forEach&lt;/code&gt; method that every array comes with. So if you think about what’s happening in the code above, we’re trying to iterate over all items in &lt;code&gt;this.todos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we can grab &lt;code&gt;this.todos&lt;/code&gt; then call the &lt;code&gt;forEach&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   if (this.todos[i].completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     completedTodos++;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we need to give &lt;code&gt;forEach&lt;/code&gt; a callback function, which &lt;code&gt;forEach&lt;/code&gt; will run for us. Each time it runs the function, it will pass in each item in the array. So we will need to pass in the &lt;code&gt;todo&lt;/code&gt; parameter to make this happen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   if (this.todos[i].completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     completedTodos++;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, the code is more or less the same, except we no longer need to pass in &lt;code&gt;i&lt;/code&gt;, as our &lt;code&gt;for&lt;/code&gt; loop no longer exists.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   if (this.todos[i].completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     completedTodos++;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can remove the old code we commeneted out and take a look at the second &lt;code&gt;for&lt;/code&gt; loop statement.&lt;/p&gt;
&lt;p&gt;Again, we can start by commenting out the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   this.todos[i].completed = false;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, the &lt;code&gt;forEach&lt;/code&gt; is very similar to before, where we call &lt;code&gt;forEach&lt;/code&gt; on &lt;code&gt;this.todos&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   this.todos[i].completed = false;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next step is to take &lt;code&gt;todo.completed&lt;/code&gt; and set it to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; totalTodos; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   this.todos[i].completed = false;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can remove the old code as before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;forEach&lt;/code&gt; inside the &lt;code&gt;else&lt;/code&gt; statement will replace the &lt;code&gt;for&lt;/code&gt; loop in the exact same way, but this time &lt;code&gt;todo.completed&lt;/code&gt; will be set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Case 2: Otherwise, make everything true.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There’s one more optimisation we can make now we’ve replaces our &lt;code&gt;for&lt;/code&gt; loops with &lt;code&gt;forEach&lt;/code&gt;. That is to collaspe the two &lt;code&gt;forEach&lt;/code&gt; statements inside the &lt;code&gt;if else&lt;/code&gt; statement into one single &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way we can achieve this is to have the &lt;code&gt;forEach&lt;/code&gt; outside and then depending on if &lt;code&gt;completed === totalTodos&lt;/code&gt;, we set it to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now we can comment out the whole section. And write out the refactored code, starting with our &lt;code&gt;forEach&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// // Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if (completedTodos === totalTodos) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   this.todos.forEach(function(todo) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     todo.completed = false;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   });
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   // Case 2: Otherwise, make everything true.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// } else {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   this.todos.forEach(function(todo) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     todo.completed = true;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   });
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// };
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The logic here will still be exactly the same as before. If &lt;code&gt;completedTdodos === totalTodos&lt;/code&gt; we want to make everything &lt;code&gt;false&lt;/code&gt;. Otheriwse make everything &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// // Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if (completedTodos === totalTodos) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   this.todos.forEach(function(todo) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     todo.completed = false;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   });
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   // Case 2: Otherwise, make everything true.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// } else {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   this.todos.forEach(function(todo) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//     todo.completed = true;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   });
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// };
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Case 2: Otherwise, make everything true.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our code only has one &lt;code&gt;forEach&lt;/code&gt; and is a bit shorter. It is however a bit more complicated, hense why we didn’t do this in the first place. Now you can see how you can write the same things in multiple ways, using two different implementations.&lt;/p&gt;
&lt;p&gt;The final thing is to remove the commented code from before and test our app is working with the refactored code. We can test our app by checking that each case is met.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Case 2: Otherwise, make everything true.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;viewdisplaytodos-should-use-foreach&#34;&gt;view.displayTodos should use forEach&lt;/h2&gt;
&lt;p&gt;Next we need to get rid of our last &lt;code&gt;for&lt;/code&gt; loop by using &lt;code&gt;forEach&lt;/code&gt; in &lt;code&gt;view.displayTodos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;displayTodos&lt;/code&gt; method we can start by commenting out the &lt;code&gt;for&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; todoList.todos.length; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   var todoLi = document.createElement(&amp;#39;li&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   var todo = todoList.todos[i];
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   if (todo.completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//        todoTextWithCompletion = &amp;#39;(x) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//    } else {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//      todoTextWithCompletion = &amp;#39;( ) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//    }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todoLi.id = i;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todoLi.appendChild(this.createDeleteButton());
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todosUl.appendChild(todoLi);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we want to iterate over the todo items and call &lt;code&gt;forEach&lt;/code&gt;. Then we want to pass the callback function that has access to each item in the array. We can use the &lt;code&gt;todo&lt;/code&gt; variable name as the parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// for (var i = 0; i &amp;lt; todoList.todos.length; i++) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   var todoLi = document.createElement(&amp;#39;li&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   var todo = todoList.todos[i];
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   if (todo.completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//        todoTextWithCompletion = &amp;#39;(x) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//    } else {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//      todoTextWithCompletion = &amp;#39;( ) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//    }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todoLi.id = i;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todoLi.appendChild(this.createDeleteButton());
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   todosUl.appendChild(todoLi);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we can paste in the code from before, which sits inside the old &lt;code&gt;for&lt;/code&gt; loop, and modify it as needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//   var todoLi = document.createElement(&amp;#39;li&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   var todo = todoList.todos[i];
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   if (todo.completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//        todoTextWithCompletion = &amp;#39;(x) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//    } else {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//      todoTextWithCompletion = &amp;#39;( ) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//    }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.id = i;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.appendChild(this.createDeleteButton());
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todosUl.appendChild(todoLi);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first line looks fine, though the second isn’t necessary as we no longer use &lt;code&gt;i&lt;/code&gt; to get access to each object in the arrya. This came from the &lt;code&gt;for&lt;/code&gt; loop which we replaced with &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   if (todo.completed === true) {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//        todoTextWithCompletion = &amp;#39;(x) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//    } else {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//      todoTextWithCompletion = &amp;#39;( ) &amp;#39; + todo.todoText;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//    }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.id = i;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.appendChild(this.createDeleteButton());
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todosUl.appendChild(todoLi);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next few lines look good because they use the variable &lt;code&gt;todo&lt;/code&gt; which we have access to in our callback function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(x) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;( ) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.id = i;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.appendChild(this.createDeleteButton());
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todosUl.appendChild(todoLi);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The line &lt;code&gt;todoLi.id = i;&lt;/code&gt; causes a problem. We need the position of the element in the array which we grabbed previously using &lt;code&gt;i&lt;/code&gt;. We can pass in an additional argument to our callback function on &lt;code&gt;forEach&lt;/code&gt; called &lt;code&gt;position&lt;/code&gt;. This is equivilant to &lt;code&gt;i&lt;/code&gt;. Now it will work as before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(x) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;( ) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//   todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todoLi.appendChild(this.createDeleteButton());
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//   todosUl.appendChild(todoLi);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final 3 lines look good but one line will cause the following error: &lt;code&gt;this.createDeleteButton is not a function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem is our callback function in &lt;code&gt;forEach&lt;/code&gt; is not directly on the &lt;code&gt;view&lt;/code&gt; object that &lt;code&gt;this.createDeleteButton&lt;/code&gt; is trying to access. It’s one level deeper. If we want &lt;code&gt;this&lt;/code&gt; in our callback function to refer to &lt;code&gt;this&lt;/code&gt; in our &lt;code&gt;displayTodos&lt;/code&gt; function, we can pass in another &lt;code&gt;this&lt;/code&gt;, inside the &lt;code&gt;forEach&lt;/code&gt; to refer to the &lt;code&gt;view&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;We can write that like: &lt;code&gt;forEach(callback, this);&lt;/code&gt;. So &lt;code&gt;this&lt;/code&gt; must go after our callback function, as a second argument in &lt;code&gt;forEach&lt;/code&gt;. Now, with &lt;code&gt;this&lt;/code&gt; at the very end of our &lt;code&gt;forEach&lt;/code&gt; statment, our code will run without errors, as we are now refering to the &lt;code&gt;view&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(x) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
       &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;( ) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can read more about the &lt;code&gt;this&lt;/code&gt; argument in &lt;code&gt;forEach&lt;/code&gt; in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Parameters&#34;&gt;MDN Web Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;review-v11&#34;&gt;Review v.11&lt;/h2&gt;
&lt;p&gt;We’ve now removed all &lt;code&gt;for&lt;/code&gt; loops from our application.&lt;/p&gt;
&lt;p&gt;First we changed the &lt;code&gt;for&lt;/code&gt; loops in &lt;code&gt;toggleAll&lt;/code&gt; to &lt;code&gt;forEach&lt;/code&gt; statements. We also colapsed 2 &lt;code&gt;for&lt;/code&gt; loops into one &lt;code&gt;forEach&lt;/code&gt; by moving our &lt;code&gt;if&lt;/code&gt; statement inside of the &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second thing we did was in the &lt;code&gt;displayTodos&lt;/code&gt; method. We learn’t how &lt;code&gt;this&lt;/code&gt; inside a callback function will not be equal to the &lt;code&gt;view&lt;/code&gt; object. However we can make it equal to the &lt;code&gt;view&lt;/code&gt; object by passing in another &lt;code&gt;this&lt;/code&gt; to the &lt;code&gt;forEach&lt;/code&gt;, right after the callback function. Now when you access &lt;code&gt;this&lt;/code&gt; inside the callback function, in this case in &lt;code&gt;this.createDeleteButton&lt;/code&gt;, it will be equal to the &lt;code&gt;view&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;The final subtly we practiced was the use of &lt;code&gt;position&lt;/code&gt;, a second argument we can pass into a callback function which grabs the position of an item in an array. So now we know we can access the item and the position.&lt;/p&gt;
&lt;p&gt;The main thing to take away is that the behaviour of the &lt;code&gt;this&lt;/code&gt; keyword inside of a callback function in a &lt;code&gt;forEach&lt;/code&gt; is not the same as &lt;code&gt;this&lt;/code&gt; on a method, so we have to add a second &lt;code&gt;this&lt;/code&gt; keyword after the callback function to refer to the parent object.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Click to delete</title>
      <link>https://azharkhan.in/notes/practical-javascript-click-to-delete/</link>
      <pubDate>Wed, 06 Mar 2019 11:32:56 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-click-to-delete/</guid>
      <description>&lt;p&gt;In version 10 of our todo list app we create a way to delete todo items by added a todo button to each todo item. These are my notes from Gordon Zhu’s free course &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;, which teaches you how to create a todo app in vanilla JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;the-return-statement&#34;&gt;The &amp;lsquo;return&amp;rsquo; statement&lt;/h2&gt;
&lt;p&gt;The return statement allows you to return a value from a function.&lt;/p&gt;
&lt;p&gt;Say, for example, you have a variable which produces the value of 2 and 10. The variable calls a function which multiplies the 2 numbers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;theProductOf2And10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiplyTwoNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;multiplyTwoNumbers&lt;/code&gt; doesn’t yet exist we will need to create that function. The obvious way to do this is to create a function that takes two values as parameters. Then create a variable that stores the result of the calculation. The calculaton being &lt;code&gt;a * b&lt;/code&gt;, using an asterisk to represent multiplication.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiplyTwoNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;theProductOf2And10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiplyTwoNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we expect to get from this is the multiplication of 2 and 10, which is 20. But when we run &lt;code&gt;theProductOf2And10&lt;/code&gt;, the console returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reason the value is undefined if because we haven’t returned the value.&lt;/p&gt;
&lt;p&gt;We can easily change this to work the way we want by adding a &lt;code&gt;return&lt;/code&gt; statement, which returns the value of our &lt;code&gt;result&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiplyTwoNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;theProductOf2And10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multiplyTwoNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To recap, if you want to return a value from a function, as in this case, you need to &lt;code&gt;return&lt;/code&gt; the value you want. If you don’t &lt;code&gt;return&lt;/code&gt; the value, the value will be &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;In version 10 we want to give each todo item a delete button. Instead of having to enter the number of the item in the todos array to delete a todo item, we can then delete an item with a simple click.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There should be a way to create delete buttons&lt;/li&gt;
&lt;li&gt;There should be a delete button for each todo&lt;/li&gt;
&lt;li&gt;Each li shold have an id that has the todo position&lt;/li&gt;
&lt;li&gt;Delete buttons should have access to the todo id&lt;/li&gt;
&lt;li&gt;Clicking delete should update todoList.todos and the DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;there-should-be-a-way-to-create-delete-buttons&#34;&gt;There should be a way to create delete buttons&lt;/h2&gt;
&lt;p&gt;In our JavaScript file, we want to create a new method on our &lt;code&gt;view&lt;/code&gt; object. The reason we’re doing this in the &lt;code&gt;view&lt;/code&gt; object is because the delete button another DOM element – a visible piece of UI in our application.&lt;/p&gt;
&lt;p&gt;We can call the new method &lt;code&gt;createDeleteButton&lt;/code&gt;, and set it to an empty function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we want to have a variable called &lt;code&gt;deleteButton&lt;/code&gt;, which is returned by the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This helps us get the structure for how this function will work – create a button, then return the button. Later we’ll use this method inside &lt;code&gt;displayTodos&lt;/code&gt; to create buttons for us.&lt;/p&gt;
&lt;p&gt;Now we can set the variable to create a button element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to give the button some text content, so we know what it is. We can use the &lt;code&gt;textContent&lt;/code&gt; property and set it to ‘delete’.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we’ll need a way to access these different delete button elements. We can use a class in this case, as unlike &lt;code&gt;id&lt;/code&gt;, which will only work for unqiue elements, classes can be reused. This is important as we will need a delete button for every item in our todo list. We can use the &lt;code&gt;className&lt;/code&gt; property to identify the elements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Delete&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;dleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ther-should-be-a-delete-button-for-each-todo&#34;&gt;Ther should be a delete button for each todo&lt;/h2&gt;
&lt;p&gt;The next requirement is to get the delete button to show up for each todo item.&lt;/p&gt;
&lt;p&gt;We can do this by appending our createDeleteButton function to the &lt;code&gt;li&lt;/code&gt; element that contains the todo item.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;displayTodos&lt;/code&gt; method, go to the second to last line and create a new line. That should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can use the &lt;code&gt;appendChild&lt;/code&gt; property on &lt;code&gt;todoLi&lt;/code&gt;, so we can add the button element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;createDeleteButton&lt;/code&gt; is available on the same object, we can use &lt;code&gt;this&lt;/code&gt; to access it. Now when the method runs it will return a delete button, and append it to the todo &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can head to our app and add a few items to see if the code worked.
You should see a delete button appear for every item you add. Right now the delete buttons dont’t work when you click them, we’ll get to that next.&lt;/p&gt;
&lt;h2 id=&#34;each-li-should-have-an-id-that-has-the-todo-position&#34;&gt;Each li should have an id that has the todo position&lt;/h2&gt;
&lt;p&gt;Now we have a delete button, we’re no longer able to tell the app the position of the item in the array which we want to delete. So now we need a way to give each todo item a unique reference.&lt;/p&gt;
&lt;p&gt;This reference will represent the items postion in the array and we can use it later to grab the position of the item we want to delete. The easiest way to make this happen is using an &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, the first item should have an &lt;code&gt;id&lt;/code&gt; of 1, the second an &lt;code&gt;id&lt;/code&gt; of 2 and so on.&lt;/p&gt;
&lt;p&gt;We can do this in a single line of code. Right above the last section of code, grab &lt;code&gt;todoLi&lt;/code&gt; and set its &lt;code&gt;id&lt;/code&gt; property to &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createDeleteButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works because our &lt;code&gt;for&lt;/code&gt; loop iterates over every item in our todos, so &lt;code&gt;i&lt;/code&gt; is equal to each position in the array. And we can use it to set the &lt;code&gt;id&lt;/code&gt; to the postion.&lt;/p&gt;
&lt;p&gt;We’re using an &lt;code&gt;id&lt;/code&gt; in this case as we need a unqiue identifier. There should only every be one &lt;code&gt;id&lt;/code&gt; value for each postion. For example there should only be one 1, one 2, one 3 and so on.&lt;/p&gt;
&lt;p&gt;To see how this works, in the app add 3 new items, then Inspect the elements console and see the &lt;code&gt;id&lt;/code&gt;’s attached to each of your &lt;code&gt;li&lt;/code&gt;’s.&lt;/p&gt;
&lt;p&gt;Now when delete is clicks we have a way to reference the particular item we want to delete.&lt;/p&gt;
&lt;h2 id=&#34;delete-buttons-should-have-access-to-the-todo-id&#34;&gt;Delete buttons should have access to the todo id&lt;/h2&gt;
&lt;p&gt;Delete buttons should have access to the todo &lt;code&gt;id&lt;/code&gt; so it knows which todo in the array to delete.&lt;/p&gt;
&lt;p&gt;The first thought might be to add events listeners to each of the delete buttons however this can cause memory problems if there are too many event listeners.&lt;/p&gt;
&lt;p&gt;A better way is to use a single event listener. To conceptulise this let’s add 3 items to our todo list. Inspect Element on those items and notice  that all the &lt;code&gt;li&lt;/code&gt;’s are contained in a single unordered list (&lt;code&gt;ul&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here, instead of adding several event listeners on the delete buttons, we can add a single event listener on the unordered list. This is because if we you click anything inside the &lt;code&gt;ul&lt;/code&gt;, the event listener will know about it. We can handle the events from the parent element, and listen for when a delete button inside the unordered list is clicked.&lt;/p&gt;
&lt;p&gt;Back in our code we can start by saving a reference to the unordered list using &lt;code&gt;document.querySelector&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From here we want to add an event listener to the &lt;code&gt;ul&lt;/code&gt; which listens for &lt;code&gt;click&lt;/code&gt; events. Then run a callback function as we want to do something when the click happens&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To recap from the functions inside of functions module, this new function which happens after the click event is the callback function. Whereas &lt;code&gt;addEventListener&lt;/code&gt; is the higher order function. It’s the function which takes other functions. And &lt;code&gt;addEventListener&lt;/code&gt; will run this function for us, whenever a click event happens on the &lt;code&gt;todosUl&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;What’s most important is that when it runs the function, it will pass in an event. To get access to that event we need to add it as a parameter.&lt;/p&gt;
&lt;p&gt;Finally, we can log out the event to the console using &lt;code&gt;console.log&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let’s add an item to the todo list, then click the delete button on the item to see if the event is logged to the console.&lt;/p&gt;
&lt;p&gt;You should now see a &lt;code&gt;MouseEvent&lt;/code&gt; object logged to the console, which includes several properties. We can ignore most of these for now as we’re only interested in the &lt;code&gt;target&lt;/code&gt; property. &lt;code&gt;target&lt;/code&gt; tells us which element we actually clicked on, in this case &lt;code&gt;button.deleteButton&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From here we need to access the &lt;code&gt;id&lt;/code&gt;, but they are attached to the &lt;code&gt;li&lt;/code&gt; element. We can access the &lt;code&gt;li&lt;/code&gt; from the delete button by using the &lt;code&gt;parentNode&lt;/code&gt; property, as delete button is a child element of the &lt;code&gt;li&lt;/code&gt; parent.&lt;/p&gt;
&lt;p&gt;If you expand the &lt;code&gt;target&lt;/code&gt; property you can see the &lt;code&gt;parentNode&lt;/code&gt; property. Notice it has a value of &lt;code&gt;li#0&lt;/code&gt;. This is the &lt;code&gt;li&lt;/code&gt; followed by the corresponding &lt;code&gt;id&lt;/code&gt; value, where the &lt;code&gt;#&lt;/code&gt; symbol represents &lt;code&gt;id&lt;/code&gt;. This is how we can access the &lt;code&gt;id&lt;/code&gt; of the item that was clicked on.&lt;/p&gt;
&lt;p&gt;With this information, we can think about our code like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get the &lt;code&gt;event&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;get the &lt;code&gt;target&lt;/code&gt; (which will be the delete button)&lt;/li&gt;
&lt;li&gt;go up one level with &lt;code&gt;parentNode&lt;/code&gt;, (this gets the list item that the button is inside of)&lt;/li&gt;
&lt;li&gt;then get the &lt;code&gt;id&lt;/code&gt; which is on the &lt;code&gt;parentNode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our code that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we add an item, hit delete then notice the code logged to the console, we get the value of the &lt;code&gt;id&lt;/code&gt;. In this case &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To go over our code, when someone clicks the delete button, &lt;code&gt;addEventListener&lt;/code&gt; will run our callback function and pass in the &lt;code&gt;event&lt;/code&gt; object. When you log out the &lt;code&gt;event&lt;/code&gt; object, &lt;code&gt;target&lt;/code&gt; is the element clicked on, in this case the delete button, &lt;code&gt;parentNode&lt;/code&gt; takes you one level up to the &lt;code&gt;li&lt;/code&gt; element, and &lt;code&gt;id&lt;/code&gt; grabs the &lt;code&gt;id&lt;/code&gt; value on that parent element, which is exactly what we need to delete a specific item.&lt;/p&gt;
&lt;h2 id=&#34;clicking-delete-should-update-todolisttodos-and-the-dom&#34;&gt;Clicking delete should update todoList.todos and the DOM&lt;/h2&gt;
&lt;p&gt;The last part of this version is to to get the array and the DOM to update when delete is clicked, so that the user can see the correct information.&lt;/p&gt;
&lt;p&gt;Remember we can write comments in our code to understand better what we’d like to do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;event.target&lt;/code&gt; returns &lt;code&gt;button.deleteButton&lt;/code&gt;, however any number of things could be clicked, so we need a way to check that it is in fact &lt;code&gt;button.deleteButton&lt;/code&gt; which has been clicked on. We can do this with an &lt;code&gt;if&lt;/code&gt; statement using the comparison opporator which for the &lt;code&gt;className&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works as it checks for the class name we added when we create a delete button. So this &lt;code&gt;if&lt;/code&gt; statement will only be &lt;code&gt;true&lt;/code&gt; if that class exists.&lt;/p&gt;
&lt;p&gt;Finally, we want to run &lt;code&gt;handlers.deleteTodo&lt;/code&gt; to actually delete the item clicked, if the statement returns true.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Run handlers.deleteTodo.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also get rid of the &lt;code&gt;console.log&lt;/code&gt; statement as this was just for demonstration purposes.&lt;/p&gt;
&lt;p&gt;At this point we need to look back at &lt;code&gt;handlers.deleteTodo&lt;/code&gt; because the feature is quite different.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see above, before, &lt;code&gt;handlers.deleteTodo&lt;/code&gt; was trying to get the &lt;code&gt;id&lt;/code&gt; on the delete todo input, and pass the position value from that input into &lt;code&gt;todoList.deleteTodo&lt;/code&gt;. Now we’re no longer using an input to delete a todo item, we’re using a button on each item instead.&lt;/p&gt;
&lt;p&gt;This means we can get rid of the input field and delete button from our earlier version and remove the associated code. That leaves us with the code below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we’ll need to explicitly pass in a posistion, so that whenever you call &lt;code&gt;deleteTodo&lt;/code&gt; on the &lt;code&gt;handlers&lt;/code&gt; object you will have to pass in a posistion which it will then take and use to delete the item.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we’ve modified our &lt;code&gt;deleteTodo&lt;/code&gt; handler to suit our new code, we want to run &lt;code&gt;handlers.deleteTodo&lt;/code&gt; and pass in a position. So back inside our &lt;code&gt;view&lt;/code&gt; object, we can visualise that in the comments by adding a &lt;code&gt;posistion&lt;/code&gt; paramenter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Run handlers.deleteTodo(position)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to think about how we get the position. The posistion is the &lt;code&gt;id&lt;/code&gt; of the &lt;code&gt;li&lt;/code&gt; element. Rememeber, on &lt;code&gt;elementClicked&lt;/code&gt;, the &lt;code&gt;li&lt;/code&gt; is the &lt;code&gt;parentNode&lt;/code&gt; of the delete button. Then we just need to get the &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Run handlers.deleteTodo(position)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a new problem, &lt;code&gt;elementClicked.parentNode.id&lt;/code&gt; is a &lt;em&gt;String&lt;/em&gt; but our delete handler needs a &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;JavaScript has a function to turn strings into numbers called &lt;code&gt;parseInt&lt;/code&gt;, for example, if we have a string &lt;code&gt;0&lt;/code&gt; &lt;code&gt;parseInt&lt;/code&gt; will turn it into the number &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Run handlers.deleteTodo(position)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have our position value as a number, we can use it as the position parameter inside the &lt;code&gt;handlers.deleteTodo&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Run handlers.deleteTodo(position)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can go to our app and see how it works. Great, our delete buttons are now removing any items we add.&lt;/p&gt;
&lt;p&gt;Now we can move this code inside the &lt;code&gt;view&lt;/code&gt; object to keep our code organised. we’re putting it into &lt;code&gt;view&lt;/code&gt; as it’s directly linked to what we see in the interface.&lt;/p&gt;
&lt;p&gt;So at the bottom of the &lt;code&gt;view&lt;/code&gt; object, we can create a new method called &lt;code&gt;setUpEventListeners&lt;/code&gt; to contain our code. Then cut and paste our new code inside.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;setUpEventListeners&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Get the element that was clicked on.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Check if elementClicked is a delete button
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementCLicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;// Run handlers.deleteTodo(position)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elementClicked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parentNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, as this is a method we will need to call the method for it to work. At the very bottom of the file we can add &lt;code&gt;view.setUpEventListeners();&lt;/code&gt; which will run all this code for us.&lt;/p&gt;
&lt;p&gt;To recap what we’ve done in the past few lessons, we’ve seen that instead of added an event listener on every delete button, we can add a single event listener to the parent element and listen for clicks there.&lt;/p&gt;
&lt;p&gt;When something is clicked we can look at the &lt;code&gt;event&lt;/code&gt; object to figure out the exact element that was clicked. Once we have the element, we can check to see &lt;code&gt;if&lt;/code&gt; the element is a delete button, and if it is we can run the &lt;code&gt;handlers.deleteTodo&lt;/code&gt; method, which passes in the position taken from the &lt;code&gt;parentNode id&lt;/code&gt;. We use &lt;code&gt;parseInt&lt;/code&gt; to change the value from a string to a number.&lt;/p&gt;
&lt;p&gt;To make this work we had to update our &lt;code&gt;handlers.deleteTodo&lt;/code&gt; method so it no longer references our delete todo input. All it does now is takes a number for the position value and sends that number to the &lt;code&gt;todoList.deleteTodo&lt;/code&gt; method which deletes the data. Then &lt;code&gt;view.displayTodos&lt;/code&gt; updates the DOM so the correct information is show to the user.&lt;/p&gt;
&lt;h2 id=&#34;cleanup-and-review&#34;&gt;Cleanup and review&lt;/h2&gt;
&lt;p&gt;Now we have delete buttons on our todo items, we can go into our HTMl and remove the delete button and input field from the interface.&lt;/p&gt;
&lt;p&gt;The lines to remove:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.deleteTodo()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;deleteTodoPositionInput&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can go back through our JavaScript and do a quick review.&lt;/p&gt;
&lt;p&gt;In the first part of version 10 we focused on a function which creates delete buttons. We used the &lt;code&gt;return&lt;/code&gt; statment and did a few other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a delete button&lt;/li&gt;
&lt;li&gt;added text text&lt;/li&gt;
&lt;li&gt;added a class name&lt;/li&gt;
&lt;li&gt;returned delete button&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we used that method to appead the delete button to the todo &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second part we focused on setting up a single event listener on our &lt;code&gt;ul&lt;/code&gt;. We listened for all clicks on the &lt;code&gt;ul&lt;/code&gt; and used the &lt;code&gt;event&lt;/code&gt; object to work out which item was clicked. If the item clicked was a delete button, only then do you delete the item.&lt;/p&gt;
&lt;p&gt;This pattern is called Event Delegation. This is because it’s listening for events on a single item, then any items inside of that delegate the event handling to the parent element. This is a common JavaScript pattern used for list items, where each item in the list has the same event listeners. So instead of added them to each item in the list you can add one single event listener to the parent element.&lt;/p&gt;
&lt;p&gt;DOM event delegation is a mechanism of responding to ui-events via a single common parent rather than each child.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functions inside functions</title>
      <link>https://azharkhan.in/notes/practical-javascript-functions-inside-functions/</link>
      <pubDate>Wed, 06 Feb 2019 21:45:46 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-functions-inside-functions/</guid>
      <description>&lt;h2 id=&#34;runwithdebugger&#34;&gt;runWithDebugger&lt;/h2&gt;
&lt;p&gt;It would be good if we had a function called &lt;code&gt;runWithDebugger&lt;/code&gt;, which we could use to pass in any function and run debugger on that function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;runWithDebugger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ourFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want &lt;code&gt;runWithDebugger&lt;/code&gt; to first run the debugger, then take our function and run that. This would replace the following manual work, which can get tiresome.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// debugger;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ourFunction();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could write this function in the following way, where we pass &lt;code&gt;ourFunction&lt;/code&gt; into the function named &lt;code&gt;runWithDebugger&lt;/code&gt;, run debugger on the first line, then call &lt;code&gt;ourFunction&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runWithDebugger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ourFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;debugger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;ourFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let’s take a simple function which logs ten numbers to the console and see if we can pass it into &lt;code&gt;runWithDebugger&lt;/code&gt;. First let’s take a look at this new function we’ll be passing in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logTenNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let’s pass in our &lt;code&gt;logTenNumbers&lt;/code&gt; function to our &lt;code&gt;runWithDebugger&lt;/code&gt; function to see what happens. Hopefully this will run the debugger first, then run &lt;code&gt;logTenNumbers&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;runWithDebugger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logTenNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hit enter and debugger runs, stopping on the first line &lt;code&gt;debugger&lt;/code&gt;. This is what has caused debugger to open and run. We can step over this line, to get to the next line which reads &lt;code&gt;ourFunction();&lt;/code&gt;. Step in to &lt;code&gt;ourFunction&lt;/code&gt; to go into &lt;code&gt;logTenNumbers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Effectively we’ve made a function which enhances the behaviour of other functions. In this case, by taking a function and running debugger on that function for us. This simple example should demonstrate how powerful and useful this can be.&lt;/p&gt;
&lt;h2 id=&#34;settimeout&#34;&gt;setTimeout&lt;/h2&gt;
&lt;p&gt;In this example we’re going to create a simple text based alarm clock.&lt;/p&gt;
&lt;p&gt;We’ll use a built in function called &lt;code&gt;setTimeout()&lt;/code&gt;, which enhances the behaviour of any function your pass in by running the function after a certain period of time.&lt;/p&gt;
&lt;p&gt;For example, if we wanted to run the function we pass in after 5 seconds we can write that like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function is blank right now so we can add a &lt;code&gt;console.log&lt;/code&gt; statement to make it do something after 5 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Wake up Harry!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we run the function, it will wait 5 seconds, before printing &lt;code&gt;Wake up Harry!&lt;/code&gt; to the console.&lt;/p&gt;
&lt;h2 id=&#34;foreach&#34;&gt;forEach&lt;/h2&gt;
&lt;p&gt;There is a method built into all arrays called &lt;code&gt;forEach&lt;/code&gt;. You can use it to run a function on every item in an array.&lt;/p&gt;
&lt;p&gt;To see how this works let’s start by creating an array of students.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;jonathan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;jenny&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;elliot&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we want to create a function which logs a name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we want to run &lt;code&gt;logName&lt;/code&gt; over every item in the students array. A manual way of doing this could be to pass the students array in our &lt;code&gt;logName&lt;/code&gt; function, using the number in the array to grab a particular student. In this case, 0 grabs Jonathan.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;logName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is one way to do it, but it’s a lot of work. Instead we could use a &lt;code&gt;for&lt;/code&gt; loop to do the work for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;logName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us the exact same results, printing out the names of the students in the array.&lt;/p&gt;
&lt;p&gt;An even simpler way to do this is to use the &lt;code&gt;forEach&lt;/code&gt; method, which loops through each item in an array, in this case our students array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;logName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the same thing as writing the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This can also be written as an unnamed function by omitting the function name; &lt;code&gt;logName&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, again, we can see how parsing a function into another function can enhance the behaviour of the function. Using the built in &lt;code&gt;forEach&lt;/code&gt; method, which is essentially it’s own function, we can handle a &lt;code&gt;for&lt;/code&gt; loop without having to write one.&lt;/p&gt;
&lt;h3 id=&#34;foreach-from-scratch&#34;&gt;forEach from scratch&lt;/h3&gt;
&lt;p&gt;We can actually create a &lt;code&gt;forEach&lt;/code&gt; function from scratch. As this is a stand alone &lt;code&gt;forEach&lt;/code&gt; and not a method on an array, we will need to pass in the array. That way &lt;code&gt;forEach&lt;/code&gt; knows which items we want to work with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to pass in a function. The idea is we want our &lt;code&gt;forEach&lt;/code&gt; function to run &lt;code&gt;myFunction&lt;/code&gt; on every item in &lt;code&gt;myArray&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make this happen we need a &lt;code&gt;for&lt;/code&gt; loop, to loop through the items in &lt;code&gt;myArray&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside the &lt;code&gt;for&lt;/code&gt; loop we want to run &lt;code&gt;myFunction&lt;/code&gt; on each of the items in the array. We can do this by parsing in the &lt;code&gt;ith&lt;/code&gt; element, which runs each item in the array through &lt;code&gt;myFunction&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can test the function to see how it works. Here we’re parsing in our &lt;code&gt;students&lt;/code&gt; array, followed by the function we want to run.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we need to parse in each &lt;code&gt;student&lt;/code&gt; name in the array, we will need to give our function a parameter. This represents the &lt;code&gt;ith&lt;/code&gt; element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we can &lt;code&gt;console.log&lt;/code&gt; the student to print out the names in the array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;students&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could also use the &lt;code&gt;logName&lt;/code&gt; function from before, instead of writing out the function. This works fine as &lt;code&gt;logName&lt;/code&gt; also accepts a parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;student&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;addeventlistener&#34;&gt;addEventListener&lt;/h2&gt;
&lt;p&gt;Another example of functions that take functions is &lt;code&gt;addEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can see how this works by navigating to any web page, in this case &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;Mozilla Web Docs JavaScript&lt;/a&gt; and selecting the heading “Tutorials”, then Inpecting element (ctrl+click on mac) on this selection.&lt;/p&gt;
&lt;p&gt;In the Chrome browser you can reference the selected element using &lt;code&gt;$0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So now in the Console tab you can type &lt;code&gt;$0&lt;/code&gt; and you should see the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Tutorials&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Tutorials&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can save this in a variable called &lt;code&gt;tutorialsElement&lt;/code&gt;, so we can refer to it later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tutorialsElement&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we type &lt;code&gt;tutorialsElement&lt;/code&gt; the console returns the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Tutorials&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Tutorials&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we set up for the &lt;code&gt;addEventListener&lt;/code&gt; example.&lt;/p&gt;
&lt;p&gt;All elements in the DOM have a method on them called &lt;code&gt;addEventListener&lt;/code&gt;, which listens out for different types of events. In this case we want to listen for click events. Whenever someone clicks on the element, it runs a function. We can make this function do whatever we want.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;tutorialsElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is another example of a function which takes a function and enhances its behaviour.&lt;/p&gt;
&lt;p&gt;Next we want to make our function do something. In this case we can log a notification of the click event to the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;tutorialsElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;The tutorials element was clicked!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we click the element on the page, the function runs and we see the ouput. The function will run everytime the element is clicked.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;addEventListener&lt;/code&gt; can also parse in an optional &lt;code&gt;event&lt;/code&gt; object to the function. We can use it inside our function as a parameter and &lt;code&gt;console.log&lt;/code&gt; the object, to see an object logged with various information about the event.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;tutorialsElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;The tutorials element was clicked!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;buzzwords-higher-order-functions-and-callback-functions&#34;&gt;Buzzwords: Higher order functions and callback functions&lt;/h2&gt;
&lt;p&gt;Time for some formal vocabulary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Higher order functions&lt;/strong&gt; are functions that accept other functions. &lt;code&gt;runWithDebugger&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt; and &lt;code&gt;addEventListener&lt;/code&gt; are all examples of higher order functions, which accept other fuctions and enhance the behavior of the functions they’re given.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;runWithDegger&lt;/code&gt; takes the function and runs it through the debugger. &lt;code&gt;setTimeout&lt;/code&gt; takes a function and turns it into an alarm clock timer.
&lt;code&gt;forEach&lt;/code&gt; will take a function and run it on every item in an array and &lt;code&gt;addEventListener&lt;/code&gt;will run a function whenever there is a certain event on a specific DOM element.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Callback functions&lt;/strong&gt; are simply the functions that are parsed into Higher Order Functions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Escape the Console</title>
      <link>https://azharkhan.in/notes/practical-javascript-escape-the-console/</link>
      <pubDate>Tue, 15 Jan 2019 11:37:09 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-escape-the-console/</guid>
      <description>&lt;p&gt;In version 9 of our todo app we will completely escape the console, allowing users to not only use the interface but see the data returned aswell.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There should be an &lt;code&gt;li&lt;/code&gt; element for every todo&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;li&lt;/code&gt; element should contain &lt;code&gt;.todoText&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;li&lt;/code&gt; element should show &lt;code&gt;.completed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;List items will represent every todo in our list. Each list item should contain the &lt;code&gt;.todoText&lt;/code&gt; property and show if it’s &lt;code&gt;.completed&lt;/code&gt; or not.&lt;/p&gt;
&lt;p&gt;We will also remove the display todos buttons as we want the data to automatically display in the interface when actions are taken by the user.&lt;/p&gt;
&lt;h2 id=&#34;inserting-li-elements-into-the-dom&#34;&gt;Inserting li elements into the DOM&lt;/h2&gt;
&lt;p&gt;We want to repesent our todo list in the form of an unordered list in html. Where each &lt;code&gt;li&lt;/code&gt; represents our todo list items.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With our app we won’t know how many items are in our list so we need to be able to dynamically add and remove these &lt;code&gt;li&lt;/code&gt;’s. So the first thing to understand is how we can insert list items into the DOM. We can do this using JavaScript.&lt;/p&gt;
&lt;p&gt;We can start in our HTML by creating an empty &lt;code&gt;ul&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, inside the console first we can initilize a new varibale, which uses a method on the &lt;code&gt;document&lt;/code&gt; object called &lt;code&gt;createElement&lt;/code&gt; to create an &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if you type &lt;code&gt;todoLi&lt;/code&gt; and hit enter, you can see we have an empty &lt;code&gt;li&lt;/code&gt; to work with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have something we can insert into the DOM, next we need to figure out a way we can insert this list item into the &lt;code&gt;ul&lt;/code&gt;. So we need to create a referece to the &lt;code&gt;ul&lt;/code&gt; in our HTML file.&lt;/p&gt;
&lt;p&gt;To do this we can create another variable and use the &lt;code&gt;querySelector&lt;/code&gt; method on the &lt;code&gt;document&lt;/code&gt; object to grab the &lt;code&gt;ul&lt;/code&gt; element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we type &lt;code&gt;todoUL&lt;/code&gt; and hit enter we can see the unordered list on our page is returned. If you hover over the &lt;code&gt;ul&lt;/code&gt; in the console you will see where it is highlighted on the page.&lt;/p&gt;
&lt;p&gt;Now we have a referece to our todos &lt;code&gt;ul&lt;/code&gt; we can add the list item to the &lt;code&gt;ul&lt;/code&gt;. Because the &lt;code&gt;li&lt;/code&gt; is a child element of the parent &lt;code&gt;ul&lt;/code&gt; we can use a method called &lt;code&gt;appendChild&lt;/code&gt; to do this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;todosUL&lt;/code&gt; and we can see our &lt;code&gt;li&lt;/code&gt; has been added to the page inside the &lt;code&gt;ul&lt;/code&gt; element. Again we can hove over &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt; in the console and see the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; highlighted in the page view.&lt;/p&gt;
&lt;p&gt;This is the technique we’ll be using to add our list items to the page. To wrap up we need to do 3 things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element and save it to a varibale called &lt;code&gt;todoLi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;grab a reference to the &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; on our page and assign it to a variable called &lt;code&gt;todosUL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Insert the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; into our &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; using &lt;code&gt;appendChild&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;there-should-be-an-li-element-for-every-todos&#34;&gt;There should be an li element for every todos&lt;/h2&gt;
&lt;p&gt;Now we can take what we’ve learnt and build a function, which runs the code everytime theres a new item added to the todos.&lt;/p&gt;
&lt;p&gt;First we need the empty &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; in our HTML.&lt;/p&gt;
&lt;p&gt;Next, inside our JavaScript file we can create a new object called &lt;code&gt;view&lt;/code&gt;. The reason it’s called view is because it’s responsible for what the user sees. I doen’t have any logic or change any data in our app, it just takes the todos array and displays it in the page. It’s responsibe only for view functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to create a method in our &lt;code&gt;view&lt;/code&gt; object for &lt;code&gt;displayTodos&lt;/code&gt; which is equal to a function. Eventually this will replace the &lt;code&gt;todoList.displayTods&lt;/code&gt; function as we will no longer need to display todos to the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside the function the code will be similar to what we learnt in the last section. First we grab a reference to the todos &lt;code&gt;ul&lt;/code&gt; using the &lt;code&gt;querySelector&lt;/code&gt; method. Then we want to create a new &lt;code&gt;li&lt;/code&gt; item to contain our todo items. We can do this with the &lt;code&gt;createElement&lt;/code&gt; method and tell it we want to create a &lt;code&gt;li&lt;/code&gt;. Next we need to grab the &lt;code&gt;todosUl&lt;/code&gt; and insert the &lt;code&gt;li&lt;/code&gt; into it with &lt;code&gt;appendChild&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run our code with &lt;code&gt;view.displayTodos&lt;/code&gt; to see how it works. You can see a &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is added to the page. Run the code again and you’ll see another item added.&lt;/p&gt;
&lt;p&gt;Now we want this code run for each item in our &lt;code&gt;todos&lt;/code&gt; array. We can do this with a &lt;code&gt;for&lt;/code&gt; loop, which runs our code for each of the items in our &lt;code&gt;todos&lt;/code&gt; array. So if our array has 5 items it will run 5 times, and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run the app we can see how this works. First we will need to add a todo item, then we can type &lt;code&gt;view.displayTodos&lt;/code&gt; and hit enter. Run the code twice and you’ll see there are now 2 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;’s on the page, even though we only have 1 todo item. This isn’t exactly how we want the app to work. We want &lt;code&gt;displayTodos&lt;/code&gt; to always reflect the number of items in our &lt;code&gt;todos&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;Ideally we could clear the previous items from the page before the code runs, so each time it starts from 0.&lt;/p&gt;
&lt;p&gt;We can do this by moving &lt;code&gt;todosUl&lt;/code&gt; outside of the &lt;code&gt;for&lt;/code&gt; loop as we don’t need to create it everytime the &lt;code&gt;for&lt;/code&gt; loop runs. Then using the &lt;code&gt;.innerHTML&lt;/code&gt; method to target whatever is inside the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, we can set it to nothing with an empty string. This will clear out the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; before it starts adding new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test this is working we can head to our interface and add 3 new items. Next run &lt;code&gt;view.displayTodos();&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We should now see 3 new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;’s on the screen. Now when we run the code again, instead of adding another 3 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;’s to make 6 — as it did before – it clears the 3 and adds another 3. So now it looks like nothing changes.&lt;/p&gt;
&lt;p&gt;Now our code reflects the number of items in our &lt;code&gt;todos&lt;/code&gt; array, exactly as we want it to.&lt;/p&gt;
&lt;h2 id=&#34;each-li-element-should-contain-todotext&#34;&gt;Each li element should contain .todoText&lt;/h2&gt;
&lt;p&gt;The next requirement is to add the actual todo text to each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element. So we can show something to the user.&lt;/p&gt;
&lt;p&gt;We can do this in one line. First using &lt;code&gt;.textContent&lt;/code&gt;, a property built into &lt;code&gt;todoLi&lt;/code&gt;, which allows you to set the text content of an element. In this case our &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to give it the value of our todo text. To make this happen we need to access our &lt;code&gt;todos&lt;/code&gt; array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But now we need to access the actual todo text for each item in our todos array. To access each item we can use bracket notation &lt;code&gt;[]&lt;/code&gt; and parse in &lt;code&gt;i&lt;/code&gt;, as this will allow us to look at each item through our &lt;code&gt;for&lt;/code&gt; loop. Finally we can use &lt;code&gt;.todoText&lt;/code&gt; to grab the actual todo text for each item and add it as the content inside each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final code should look like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ul&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todosUl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;todosUL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we add a new todo item to our todo list, then run &lt;code&gt;view.displayTodos();&lt;/code&gt; we should see that todo item output to the screen.&lt;/p&gt;
&lt;p&gt;So to recap, in this line we are taking the &lt;code&gt;todoLi&lt;/code&gt; element, accessing the &lt;code&gt;todoLi&lt;/code&gt; element’s &lt;code&gt;textContent&lt;/code&gt; property and setting it to the &lt;code&gt;todoText&lt;/code&gt; property each of our todo objects. In other words we’re changing the value of &lt;code&gt;textContent&lt;/code&gt; to the &lt;code&gt;todoText&lt;/code&gt; property of each of our todo items in our todos array.&lt;/p&gt;
&lt;h2 id=&#34;each-li-element-should-show-completed&#34;&gt;Each li element should show .completed&lt;/h2&gt;
&lt;p&gt;Now all of our todo items are showing but they don’t yet show the completed property. Next we need to show which items are completed and which are still to finish.&lt;/p&gt;
&lt;p&gt;We can write some comments in our code to plan this out. To start we can set up a variable to store the value of our todoText, but this time with completion data included. We can use an empty string for now as we will update this later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using an &lt;code&gt;if&lt;/code&gt; statement we can set a condition that checks whether each todo completed, when the condition is &lt;code&gt;true&lt;/code&gt;, at which point it will return &lt;code&gt;(x) todoText&lt;/code&gt;. If the condition is false we can use an &lt;code&gt;else&lt;/code&gt; statement to return &lt;code&gt;( ) todoText&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if (todo.completed === true)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (x) todoText
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// else
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// ( ) todoText
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the &lt;code&gt;todoTextWithCompletion&lt;/code&gt; variable is set–based on the &lt;code&gt;if&lt;/code&gt; statement–we want to get the &lt;code&gt;todoLi&lt;/code&gt; and set it  equal to the new value of &lt;code&gt;todoTextWithCompletion&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// var todoTextWithCompletion = &amp;#39;&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if (todo.completed === true)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// (x) todoText
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// else
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// ( ) todoText
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// todoLi.textContent = todoTextWithCompletion;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have our comments we can use them to guide our code.
To start we can set up the &lt;code&gt;todoTextWithCompletion&lt;/code&gt; varibale. Eventually we will use this to store the completed value but for now we can set it to nothing. Next we need an &lt;code&gt;if&lt;/code&gt; statement which checks whether &lt;code&gt;todo.completed&lt;/code&gt; is true.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before we set the condition we need to create a reference to &lt;code&gt;todo&lt;/code&gt;. We can store this referece in new variable which gives us access to each todo item. This isn’t 100% necessary but it will save us having to write out the code each time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have a reference we can add the condition to our &lt;code&gt;if&lt;/code&gt; statement. Then update &lt;code&gt;todoTextWithCompletion&lt;/code&gt; if the condition is met. We can use the plus operator &lt;code&gt;+&lt;/code&gt; to combine the completion string -&lt;code&gt;(x)&lt;/code&gt; or &lt;code&gt;( )&lt;/code&gt;- with the &lt;code&gt;todoText&lt;/code&gt; string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(x) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only difference in the &lt;code&gt;else&lt;/code&gt; statement is we’re removing the &lt;code&gt;(x)&lt;/code&gt; in favor of an empty set of parentheses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(x) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;( ) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final step is to set &lt;code&gt;textContent&lt;/code&gt; on our &lt;code&gt;&amp;lt;li&amp;gt;’s&lt;/code&gt; equal to the value of &lt;code&gt;todoTextWithCompletion&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(x) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;( ) &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;todoLi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoTextWithCompletion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;textContent&lt;/code&gt; now contains the completion data we can remove the line below our code which shows our todo item. without the completion data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoLi.textContent = todoList.todos[i].todoText;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can test our code out to see if it’s working.  Add a new todo then run &lt;code&gt;view.displayTodos();&lt;/code&gt;. You should see your new item show on the page with empty parentheses. Hit the toggle Completed button then run &lt;code&gt;view.displayTodos();&lt;/code&gt; again and you should see an &lt;code&gt;x&lt;/code&gt; inside the parentheses.&lt;/p&gt;
&lt;h2 id=&#34;escaping-the-console&#34;&gt;Escaping the console&lt;/h2&gt;
&lt;p&gt;To escape the console completed we still need to find another way to run &lt;code&gt;view.displaytodos();&lt;/code&gt;, so we don’t have to open the console each and every time we need to run the method.&lt;/p&gt;
&lt;p&gt;We really only need to display todos any time the data changes. That means anytime one of the buttons on the page is clicked by the user. We can do this by adding &lt;code&gt;view.displayTodos();&lt;/code&gt; at the end of each method in our &lt;code&gt;handlers&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Now that our todos display on the page when you click any of the buttons, our display todos button is redundant. So we can remove the display todos button code inside our HTML. As we no longer have a button, our &lt;code&gt;displayTodos&lt;/code&gt; handler is also useless, so we can remove this too.&lt;/p&gt;
&lt;p&gt;We’re now displaying our todos directly to the DOM, so there’s also no need for &lt;code&gt;this.displayTodos();&lt;/code&gt; on the methods inside the &lt;code&gt;todoList&lt;/code&gt; object. As all this does is display the todos to the console. We can remove this line of code from each of the methods. Finally we can remove the entire &lt;code&gt;displayTodos&lt;/code&gt; method from &lt;code&gt;todoList&lt;/code&gt; as we’re now doing this in the DOM, via our new &lt;code&gt;view&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;view&lt;/code&gt; is the only part of our app concerned with displaying information. That’s why it’s called a view object.&lt;/p&gt;
&lt;h2 id=&#34;review-v9&#34;&gt;Review v.9&lt;/h2&gt;
&lt;p&gt;Version 9 mostly involved DOM manipulation, which we did inside a new object called &lt;code&gt;view&lt;/code&gt;. This &lt;code&gt;displayTodos&lt;/code&gt; method is similar to our old one, the only differnce is we’re no longer working with the console but the DOM. So that’s why we needed to learn about creating and modifying DOM elements.&lt;/p&gt;
&lt;p&gt;In our HTML we added an unordered list element and removed the display todos button.&lt;/p&gt;
&lt;p&gt;We’re now using the &lt;code&gt;view.displayTodos&lt;/code&gt; method inside every handler because each of the handlers can change data. That means when data changes we want to update what we show to the user.&lt;/p&gt;
&lt;p&gt;Finally, we refactored our &lt;code&gt;todoList&lt;/code&gt; object, taking away the &lt;code&gt;displayTodos&lt;/code&gt; method and the method calls associated with that method.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;todoList&lt;/code&gt; has a very specific purpose; it represents the data and has methods which change the data. Now we have all related methods on a single object. This pattern is the same for our other objects. We’re using &lt;code&gt;handlers&lt;/code&gt; specifically for user interactions and &lt;code&gt;view&lt;/code&gt; for showing users what the todo list looks like. All our code is organised into related methods inside objects which has a specific purpose.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting data from inputs</title>
      <link>https://azharkhan.in/notes/practical-javascript-refactoring-code/</link>
      <pubDate>Mon, 07 Jan 2019 12:43:51 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-refactoring-code/</guid>
      <description>&lt;p&gt;This is Part 8 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this version of our todo list app we start by learning about refactoring and how it can help improve our code. Then we look at how to fetch data from input elements in our html.&lt;/p&gt;
&lt;h2 id=&#34;what-is-refactoring&#34;&gt;What is Refactoring?&lt;/h2&gt;
&lt;p&gt;Refactoring is the process of restructuring existing code without changing it’s external behaviour. It improves the non-functional attributes of the software.&lt;/p&gt;
&lt;p&gt;In our case when we refactor our code, it will work exactly as before but it will make it more readable, organised and easier to understand.&lt;/p&gt;
&lt;h2 id=&#34;reviewing-our-code&#34;&gt;Reviewing our code&lt;/h2&gt;
&lt;p&gt;Previously when we grabbed the buttons inside our HTML we retrieved an &lt;code&gt;id&lt;/code&gt; attached to our buttons using &lt;code&gt;getElementById&lt;/code&gt;. And used &lt;code&gt;addEventListener&lt;/code&gt; to watch for clicks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;displayTodosButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleAllButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a common way to connect JavaScript to a user interface, however in our case it adds a lot of repetitive extra code and unnecessary complexity, as we will need to write similar code for several buttons.&lt;/p&gt;
&lt;p&gt;Instead we can use a different way which will allow us to remove the &lt;code&gt;id&lt;/code&gt;’s for each button, drop the varibales and remove the &lt;code&gt;addEventListener&lt;/code&gt; &lt;code&gt;&#39;click&#39;&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id=&#34;refactoring-our-buttons&#34;&gt;Refactoring our buttons&lt;/h2&gt;
&lt;p&gt;In our &lt;code&gt;html&lt;/code&gt; we can start by removing the &lt;code&gt;id&lt;/code&gt;’s from our buttons.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead we can replace these &lt;code&gt;id&lt;/code&gt;’s with the &lt;code&gt;onclick&lt;/code&gt; attribute.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;onclick&lt;/code&gt; attribute works similar to our &lt;code&gt;addEventListener&lt;/code&gt; code in our JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;onclick=&amp;quot;&amp;quot;&lt;/code&gt; provides another way to run a function when our button is clicked. Inside the quotes, we can specific the name of the function we want to run.&lt;/p&gt;
&lt;p&gt;As we don’t have a function yet we’ll need to create that next.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-new-object-to-handle-functions&#34;&gt;Creating a new object to handle functions&lt;/h2&gt;
&lt;p&gt;Back in our JavaScript, we need a way to access our functions which run &lt;code&gt;displayTodos&lt;/code&gt; and &lt;code&gt;toggleAll&lt;/code&gt;. To do this we can create a new object called &lt;code&gt;handlers&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason it’s called &lt;code&gt;handlers&lt;/code&gt; is that we want the methods on this object to handle different click events. For example when you click on this button we want something to handle that event. We’ll put all methods that handle different events inside this object.&lt;/p&gt;
&lt;p&gt;Start by creating a new method for &lt;code&gt;displayTodos&lt;/code&gt;, making it equivilent to the function we wrote in the previous version.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to create another method, this time for &lt;code&gt;toggleAll&lt;/code&gt;. Again we can use the function from before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have these methods defined on the &lt;code&gt;handlers&lt;/code&gt; object we can access them from our &lt;code&gt;html&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;running-functions-onclick&#34;&gt;Running functions onclick&lt;/h2&gt;
&lt;p&gt;Back in our &lt;code&gt;html&lt;/code&gt;, inside &lt;code&gt;onclick=&amp;quot;&amp;quot;&lt;/code&gt; we can add the name of the object followed by the method to access the function. Remember the parentheses in order to run the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.displayTodos()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.toggleAll()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;comparing-original-and-refactored-code&#34;&gt;Comparing original and refactored code&lt;/h2&gt;
&lt;p&gt;Refectoring doesn’t change the way the code works, it just makes it more organised and readable. They are non-functional changes.&lt;/p&gt;
&lt;p&gt;Looking back at our original code you can see there is a lot more of it than what we have now we’ve refactored it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;displayTodosButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleAllButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The orginal code was a lot more complicated and harder to understand. Now we’re no longer using &lt;code&gt;getElementById&lt;/code&gt; and we no longer have &lt;code&gt;id&lt;/code&gt;’s. We’ve also got rid of our &lt;code&gt;addEventListener&lt;/code&gt; code.&lt;/p&gt;
&lt;p&gt;Now we just have methods on an object, our code is shorter and easier to understand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we look at the original &lt;code&gt;html&lt;/code&gt; we had 2 &lt;code&gt;id&lt;/code&gt;’s which didn’t make it clear what happens when you click the button. Our &lt;code&gt;id&lt;/code&gt;’s simply name the button.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;displayTodosButton&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;toggleAllButton&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our refactored code the &lt;code&gt;onclick&lt;/code&gt; attribute gives us an idea of what happens when the button is clicked. It’s more descriptive as you know the &lt;code&gt;displayTodos&lt;/code&gt; or &lt;code&gt;toggleAll&lt;/code&gt; method is supposed to run when the button is clicked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.displayTodos()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.toggleAll()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a clearer way to write our code and avoids the use of repetitive code.&lt;/p&gt;
&lt;p&gt;It’s important to note that the refactoring we’ve done here works well in this case but that might not always be true. Using the &lt;code&gt;onclick&lt;/code&gt; attribute is very specific and can only handle one event.&lt;/p&gt;
&lt;p&gt;Often you’ll see the prefered &lt;code&gt;addEventListener&lt;/code&gt; method used as it’s more flexible and can handle many different events. The thing to rememebr is theres no strict better way of doing things, it’s often a judgement call.&lt;/p&gt;
&lt;h2 id=&#34;requirements-v8&#34;&gt;Requirements v8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It should have working controls for &lt;code&gt;.addTodo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It should have working controls for &lt;code&gt;.changeTodo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It should have working controls for &lt;code&gt;.deleteTodo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It should have working controls for &lt;code&gt;.toggleCompleted&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What makes these different from &lt;code&gt;displayTodos&lt;/code&gt; and &lt;code&gt;toggleAll&lt;/code&gt; is that they each need an input, as they all require an arguement.&lt;/p&gt;
&lt;p&gt;For example, the user will need to type some text when adding a new todo.&lt;/p&gt;
&lt;p&gt;Now we require data to be added we need to add inputs to make this possible.&lt;/p&gt;
&lt;h3 id=&#34;there-should-be-a-button-for-adding-todos&#34;&gt;There should be a button for adding todos&lt;/h3&gt;
&lt;p&gt;In our &lt;code&gt;html&lt;/code&gt; we need to add a new button for adding todos. We will also need an input so we can collect the data for the user. In this case the data is text for a new todo item.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Add&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;addTodoTextInput&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can add the &lt;code&gt;onclick&lt;/code&gt; attribute to the button so we can run the &lt;code&gt;addTodo&lt;/code&gt; function, which we’ll get to next.&lt;/p&gt;
&lt;p&gt;Notice we’re using &lt;code&gt;type=&amp;quot;text&amp;quot;&lt;/code&gt; property on our &lt;code&gt;input&lt;/code&gt; to specifiy the type of data we want to collect. We’ve also added an &lt;code&gt;id&lt;/code&gt; so we can access the &lt;code&gt;input&lt;/code&gt; data in our JavaScript.&lt;/p&gt;
&lt;p&gt;Back in our JavaScript, we can start by adding a &lt;code&gt;addTodo&lt;/code&gt; method on our &lt;code&gt;handlers&lt;/code&gt; object, to handle clicks on our add todos button.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handlers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// addTodo function here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make our method do something, first we need to get hold of the &lt;code&gt;id&lt;/code&gt; on our new input. We can use &lt;code&gt;getElementById&lt;/code&gt; and save it to a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;addTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have access to the input we can grab the  &lt;code&gt;todoList&lt;/code&gt; object and access the &lt;code&gt;addTodo&lt;/code&gt; method on that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;addTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the &lt;code&gt;addTodo&lt;/code&gt; method takes the &lt;code&gt;todoText&lt;/code&gt; argument, we can parse in the &lt;code&gt;addTodoTextInput&lt;/code&gt; element as the parameter, using &lt;code&gt;.value&lt;/code&gt; to grab the value of whatever is typed into the input.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;addTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we need to tell the program to run the function when you click on the add todo button. To do this we can go back to our &lt;code&gt;html&lt;/code&gt; and update the &lt;code&gt;onclick&lt;/code&gt; attribute on the button.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.addTodo()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Add&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you try out the input and add a new todo, you’ll notice the input field doesn’t clear after we add a new todo. To fix this we can grab the &lt;code&gt;addTodoTextInput&lt;/code&gt; and set the value to an empty string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;addTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;addTodoTextInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will reset the input field to nothing after the code runs.&lt;/p&gt;
&lt;h2 id=&#34;there-should-be-a-button-for-changing-todos&#34;&gt;There should be a button for changing todos&lt;/h2&gt;
&lt;p&gt;In our &lt;code&gt;html&lt;/code&gt; we need to create another button, with an &lt;code&gt;onclick&lt;/code&gt; attribute which runs our &lt;code&gt;changeTodo&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This time we also need two inputs. The first &lt;code&gt;input&lt;/code&gt; will take the value of the todo position and the second will take the todo text value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.changeTodo()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Change Todo&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to add an &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; for the position &lt;code&gt;input&lt;/code&gt;. We give &lt;code&gt;type&lt;/code&gt; the value of &lt;code&gt;number&lt;/code&gt; so we can collect number data.&lt;/p&gt;
&lt;p&gt;We can do the same for the text &lt;code&gt;input&lt;/code&gt; but this time we need to give &lt;code&gt;type&lt;/code&gt; the value of &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.changeTodo()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Change Todo&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;changeTodoPositionInput&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;changeTodoTextInput&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-method-on-handlers-for-changetodo&#34;&gt;Create method on handlers for changeTodo&lt;/h3&gt;
&lt;p&gt;Now back in our JavaScript we need to set up a method on our &lt;code&gt;handlers&lt;/code&gt; object which runs our changeTodo function when someone adds data to change a todo.&lt;/p&gt;
&lt;p&gt;As before we can create a variable which uses &lt;code&gt;getElementById&lt;/code&gt; to access the &lt;code&gt;id&lt;/code&gt; on the &lt;code&gt;input&lt;/code&gt;. This time we’ll need 2 variables for each &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;changeTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;changeTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we want to run our &lt;code&gt;changeTodo&lt;/code&gt; method on the &lt;code&gt;todoList&lt;/code&gt; object, which takes a &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;todoText&lt;/code&gt; parameter. Position in this case is a number value.&lt;/p&gt;
&lt;p&gt;Before we used &lt;code&gt;.value&lt;/code&gt; to access the data. This will work for our text input, but it won’t for our number input. The reason is because &lt;code&gt;.value&lt;/code&gt; grabs a string of text.&lt;/p&gt;
&lt;p&gt;Instead we can use the &lt;code&gt;valueAsNumber&lt;/code&gt; property to grab the number data from our &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;changeTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;changeTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changeTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoTextInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we’ll need to clear the &lt;code&gt;input&lt;/code&gt; values at the end of the method in order to reset the input to an empty state.&lt;/p&gt;
&lt;p&gt;To do this we just need to set the value property on both &lt;code&gt;input&lt;/code&gt;’s to any empty string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;changeTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoTextInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;changeTodoTextInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changeTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodoTextInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;changeTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;changeTodoTextInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything is working correctly you should now be able to add a new todo item then change it.&lt;/p&gt;
&lt;h2 id=&#34;there-should-be-a-button-for-deleting-todos&#34;&gt;There should be a button for deleting todos&lt;/h2&gt;
&lt;p&gt;First we need to build the user interface. As before we’ll need a &lt;code&gt;button&lt;/code&gt; and this time only one &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We want to run a function inside our JavaScript when the button is clicked so we can use &lt;code&gt;onclick&lt;/code&gt; and parse in the method on our &lt;code&gt;handlers&lt;/code&gt; object. This method doesn’t actually exist yet but we’ll make it a bit later.&lt;/p&gt;
&lt;p&gt;We then need to add information to the &lt;code&gt;input&lt;/code&gt;. First a descriptive &lt;code&gt;id&lt;/code&gt; as before, this will allow us to access the data in our JavaScript. Then we add  &lt;code&gt;type=&amp;quot;number&amp;quot;&lt;/code&gt; so we can collect a number, representing the position of the todo which needs to be deleted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.deleteTodo()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;deleteTodoPositionInput&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our JavaScript we’ll need to write a new method on our &lt;code&gt;handlers&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;The pattern is very similar as before. We first need to grab the input for  the position of the item to delete. We can do this with &lt;code&gt;getElementById&lt;/code&gt;, parsing in the &lt;code&gt;id&lt;/code&gt; and storing this in a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we want to run the &lt;code&gt;deleteTodo&lt;/code&gt; method on our &lt;code&gt;todoList&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we take a look back at the &lt;code&gt;deleteTodo&lt;/code&gt; method we can see it takes a &lt;code&gt;position&lt;/code&gt; parameter. In this case can use the number value from our &lt;code&gt;input&lt;/code&gt;. As it has to be a number we need to use &lt;code&gt;.valueAsNumber&lt;/code&gt; to grab the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we will need to clear the &lt;code&gt;input&lt;/code&gt;   once the code has run, so the previous value doesn’t remain in the &lt;code&gt;input&lt;/code&gt; box. We do this using an empty string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deleteTodoPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;deleteTodoPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can check our code is working by adding a new todo item then deleting it.&lt;/p&gt;
&lt;p&gt;Hopefully now you can see a pattern forming with our code.&lt;/p&gt;
&lt;p&gt;We start by building the user interface, then write the method in our JavaScript. In
this case our &lt;code&gt;deleteTodo&lt;/code&gt; method grabs the input, and parses the input value into our &lt;code&gt;deleteTodo&lt;/code&gt; method on our &lt;code&gt;todoList&lt;/code&gt;object. Then it clears the input field when it’s done.&lt;/p&gt;
&lt;h2 id=&#34;there-should-be-a-button-for-toggling-a-todo&#34;&gt;There should be a button for toggling a todo&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;toggleCompleted&lt;/code&gt; feature will almost be the same as &lt;code&gt;deleteTodo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we start with the user interface. So in the &lt;code&gt;html&lt;/code&gt; we need a &lt;code&gt;button&lt;/code&gt; and an &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As before we need an &lt;code&gt;onclick&lt;/code&gt; attribute on our button. We haven’t written the method yet but it will be on our &lt;code&gt;handlers&lt;/code&gt; object and be called &lt;code&gt;toggleCompleted&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;input&lt;/code&gt; needs an &lt;code&gt;id&lt;/code&gt; and a &lt;code&gt;type&lt;/code&gt; of &lt;code&gt;number&lt;/code&gt;. This is because &lt;code&gt;toggleCompleted&lt;/code&gt; takes a position of the item you want to toggle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;handlers.toggleCompleted&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle Completed&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;toggleCompletedPositionInput&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can move into our JavaScript. We start with a new method; &lt;code&gt;toggleCompleted&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we want to grab the &lt;code&gt;input&lt;/code&gt; and store in a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleCompletedPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleCompletedPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we want to make a call to the method on our &lt;code&gt;todoList&lt;/code&gt; object. Parsing the number value from our &lt;code&gt;input&lt;/code&gt; to set the postion.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleCompletedPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleCompletedPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompletedPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we need to clear the &lt;code&gt;input&lt;/code&gt;, which we can do by setting the value to an empty string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleCompletedPositionInput&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleCompletedPositionInput&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompletedPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueAsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;toggleCompletedPositionInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can add an item to see if it works. Enter the position of the item and hit the toggle completed button. If all went well we should see the following output in the console.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
(x) new todo item
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hit the button again and we should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
( ) new todo item
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;review-v8&#34;&gt;Review v8&lt;/h2&gt;
&lt;p&gt;In version 8 of our application we looked at how we can effectively use &lt;code&gt;input&lt;/code&gt;’s and get data from users. So we can use that data in our application.&lt;/p&gt;
&lt;p&gt;We learnt how to access different both &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; data types using &lt;code&gt;.value&lt;/code&gt; and &lt;code&gt;.valueAsNumber&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;We’re starting to see how using objects is an effective way of organising our code. Now we have all of our handler methods on a &lt;code&gt;handlers&lt;/code&gt; object. This is a good way to group code related to our user interface.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with the Debugger</title>
      <link>https://azharkhan.in/notes/practical-javascript-debugger/</link>
      <pubDate>Mon, 17 Dec 2018 14:44:41 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-debugger/</guid>
      <description>&lt;p&gt;The process of going through your JavaScript and fixing issues with your code is called ‘debugging’.&lt;/p&gt;
&lt;p&gt;The ‘debugger’ is a powerful tool we can use to assist us in the debugging process. Debugger is built into the browser and can be found in the chrome dev tools.&lt;/p&gt;
&lt;p&gt;We can use the debugger to step through our methods in order to see what’s happening line by line.&lt;/p&gt;
&lt;p&gt;To do this we need to add &lt;code&gt;debugger;&lt;/code&gt; to the first line within our method.&lt;/p&gt;
&lt;p&gt;Now when we call the method, Debugger will pause the program as it’s running, so we can step though and see what’s happening, at every stage of the method.&lt;/p&gt;
&lt;h2 id=&#34;todolistdisplaytodos&#34;&gt;todoList.displayTodos&lt;/h2&gt;
&lt;p&gt;In our displayTodos method, we can add &lt;code&gt;debugger;&lt;/code&gt; to the first line of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;debugger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your todo list is empty!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;(x)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;( )&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we run &lt;code&gt;todoList.displayTodos();&lt;/code&gt; in the console, the program will pause and debugger will launch in the Sources panel of Inspect.&lt;/p&gt;
&lt;p&gt;At the top of the screen we see ‘Paused in debugger’ and notice the script in highlighted on the &lt;code&gt;debugger;&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;From here we can inspect the different elements of our program to help us debug our code.&lt;/p&gt;
&lt;p&gt;On the right side, we can see the different variables in our program. Expand &lt;code&gt;this&lt;/code&gt; and see that it’s an Object, with all our different methods on it.&lt;/p&gt;
&lt;h3 id=&#34;stepping-through-the-code&#34;&gt;Stepping through the code&lt;/h3&gt;
&lt;p&gt;On the right side you will see a button ‘Step over next function call’, when pressed this will go to the next line of our program, you’ll see the highlighted line changes too the one below.&lt;/p&gt;
&lt;p&gt;If you hover over the values in the program, you can see what they are.&lt;/p&gt;
&lt;p&gt;We can hit the Step button again to run the next line and step through the program to the end. Hit the blue button; ‘Resume script execution’ to get back to the console and run the script again.&lt;/p&gt;
&lt;p&gt;Remember to remove &lt;code&gt;debugger;&lt;/code&gt; from your program so the code works as it did before.&lt;/p&gt;
&lt;h3 id=&#34;todolistaddtodo&#34;&gt;todoList.addTodo&lt;/h3&gt;
&lt;p&gt;For our &lt;code&gt;addTodo&lt;/code&gt; method we can do the exact same thing as before and add &lt;code&gt;debugger;&lt;/code&gt; to the first line inside the method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;debugger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-1-run-debugger&#34;&gt;Step 1: run debugger&lt;/h4&gt;
&lt;p&gt;Now run the method &lt;code&gt;todoList.addTodo(&#39;runnin the debugger&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The debugger will pause the program and launch. We can see debugger has paused on the line we added &lt;code&gt;debugger;&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;step-2-stepping-over&#34;&gt;Step 2: Stepping over&lt;/h4&gt;
&lt;p&gt;Step over the line with the ‘Step over next function call’ button. Here we can hover over &lt;code&gt;this.todos&lt;/code&gt; and see the value is currently 0.&lt;/p&gt;
&lt;p&gt;Step over once more and here we’re pushing an item to the &lt;code&gt;todos&lt;/code&gt; array. You can also see the value of the parameter &lt;code&gt;todoText&lt;/code&gt; which equals ‘runnin the debugger’.&lt;/p&gt;
&lt;p&gt;Step over again. Now we’ve pushed an item to &lt;code&gt;todos&lt;/code&gt;. on the right side we expand the &lt;code&gt;this&lt;/code&gt; object, and the &lt;code&gt;todos&lt;/code&gt; property will now show us an array with 1 item. If you expand the first item, you will see ‘runnin the debugger’ as the value of &lt;code&gt;todoText&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Step over to complete the function. Then hit ‘resume script execution’ to exit the debugger.&lt;/p&gt;
&lt;p&gt;Now you will see ‘runnin the debugger’ printed to the console.&lt;/p&gt;
&lt;h4 id=&#34;step-3-stepping-into-a-function-call&#34;&gt;Step 3: Stepping into a function call&lt;/h4&gt;
&lt;p&gt;Now add another todo item.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.addTodo(&#39;adding something extra&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The debugger will pause as expected. Next, keep stepping through until you reach the last section of the method; &lt;code&gt;this.displayTodos();&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here we can click the down arrow; ’step into the next function call’, to inspect &lt;code&gt;displayTodos&lt;/code&gt;. Now we’re in the &lt;code&gt;displayTodos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we now have 2 items in our &lt;code&gt;todos&lt;/code&gt; array, &lt;code&gt;todos.length&lt;/code&gt; is not equal to 0, so when we step through the function it skips the next line. Instead it enters our &lt;code&gt;else&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;Here we can see step through our &lt;code&gt;for&lt;/code&gt; loop to see how it works.&lt;/p&gt;
&lt;h4 id=&#34;step-4-stepping-through-a-for-loop&#34;&gt;Step 4: Stepping through a for loop&lt;/h4&gt;
&lt;p&gt;If we step through, we can see how the value of &lt;code&gt;i&lt;/code&gt; (our initialisation variable) increases each time the loop is run.&lt;/p&gt;
&lt;p&gt;It does this until we reach the &lt;code&gt;todos.length&lt;/code&gt; condition, which in this case is 2.&lt;/p&gt;
&lt;p&gt;When it hits 2, and the condition is no longer true, so we exit the &lt;code&gt;for&lt;/code&gt; loop. And our script ends.&lt;/p&gt;
&lt;p&gt;We can hit the blue button to resume our script. Don’t forget to remove &lt;code&gt;debugger;&lt;/code&gt; for the script to run as normal.&lt;/p&gt;
&lt;h2 id=&#34;todolistchangetodo&#34;&gt;todoList.changeTodo&lt;/h2&gt;
&lt;p&gt;Now let’a do the same with the &lt;code&gt;changeTodo&lt;/code&gt; method by adding &lt;code&gt;debugger&lt;/code&gt; to our script.&lt;/p&gt;
&lt;p&gt;Add a new item so we can change it
&lt;code&gt;todoList.addTodo(&#39;something to change&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, run the &lt;code&gt;changeTodo&lt;/code&gt; method, &lt;code&gt;todoList.changeTodo(0, &#39;changed&#39;);&lt;/code&gt;. Now the debugger will pause the program.&lt;/p&gt;
&lt;p&gt;From here you can see the arguments we entered in yellow; position is 0 and &lt;code&gt;todoText&lt;/code&gt; is ‘changed’.&lt;/p&gt;
&lt;p&gt;Now step over to the next line. Then if we go into Scope on the right hand side, expand the &lt;code&gt;this&lt;/code&gt; object, then expand the &lt;code&gt;todos&lt;/code&gt; array and you will see the object in the 0 position has a &lt;code&gt;todoText&lt;/code&gt; property with the value &lt;code&gt;&#39;something to change&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Step over again and we will see this value update to &lt;code&gt;&#39;changed&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ve now reach the &lt;code&gt;displayTodos&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id=&#34;todolistdeletetodo&#34;&gt;todoList.deleteTodo&lt;/h2&gt;
&lt;p&gt;Move &lt;code&gt;debugger;&lt;/code&gt; to the &lt;code&gt;deleteTodos&lt;/code&gt; method, then add a todo item:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.addTodo(&#39;delete this&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next run &lt;code&gt;todoList.deleteTodo(0);&lt;/code&gt; to pause the script and run the debugger.&lt;/p&gt;
&lt;p&gt;Now we’re in the debugger and we can see the position is 0, as that’s what we set. Step over to the next line.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this.todos.splice(postion, 1);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is going to delete whatever is at position 0 and delete 1 item, in our case the value &lt;code&gt;&#39;delete this&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the Scope panel on the right, watch the value of &lt;code&gt;todos&lt;/code&gt; Array go from &lt;code&gt;todos: Array[1]&lt;/code&gt; to &lt;code&gt;todos: Array[0]&lt;/code&gt;, as you step over to the next line.&lt;/p&gt;
&lt;p&gt;Now we can resume our script.&lt;/p&gt;
&lt;h2 id=&#34;todolisttogglecompleted&#34;&gt;todoList.toggleCompleted&lt;/h2&gt;
&lt;p&gt;Move the debugger statement into &lt;code&gt;toggleCompleted&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add a new todo item; &lt;code&gt;todoList.addTodo(&#39;to be toggled&#39;);&lt;/code&gt; then toggle the item to enter debugger.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.toggleCompleted(0);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Step over to see we’re grabbing &lt;code&gt;this.todos&lt;/code&gt; item in position 0. Now &lt;code&gt;todo&lt;/code&gt; is undefined.&lt;/p&gt;
&lt;p&gt;Step over again, now &lt;code&gt;todo&lt;/code&gt; is defined. And if you hover over you can see &lt;code&gt;completed: false&lt;/code&gt; and &lt;code&gt;todoText: &#39;to be toggled&#39;&lt;/code&gt;. This is the item we’re adding.&lt;/p&gt;
&lt;p&gt;When we step over the next line you’ll see &lt;code&gt;completed: true&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;todolisttoggleall&#34;&gt;TodoList.toggleAll&lt;/h2&gt;
&lt;p&gt;Start by moving the &lt;code&gt;debugger;&lt;/code&gt; statement to the beginning of the &lt;code&gt;toggleAll&lt;/code&gt; method, as we’ve done before.&lt;/p&gt;
&lt;p&gt;Next we’ll need to add some data, so we have something to toggle.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.addTodo(&#39;this is true&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next make the item true. We can do this using the &lt;code&gt;toggleCompleted&lt;/code&gt; method, parsing in 0, for the position of our new item.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.toggleCompleted(0);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The console should return:&lt;/p&gt;
&lt;p&gt;&lt;code&gt; My Todos: (x) this is true &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can use &lt;code&gt;todoList.toggleAll();&lt;/code&gt; to pause the script and run the debugger.&lt;/p&gt;
&lt;h3 id=&#34;stepping-through-code-with-debugger&#34;&gt;Stepping through code with debugger&lt;/h3&gt;
&lt;p&gt;Step over the first line and you’ll see we’re saving the length of our todos array to the variable &lt;code&gt;totalTodos&lt;/code&gt;. This should show our 1 item.&lt;/p&gt;
&lt;p&gt;Next we start &lt;code&gt;completedTodos&lt;/code&gt; at 0, so we can count up the number. In other words, each time we find a completed item in the array, we can increase &lt;code&gt;completedTodos&lt;/code&gt; by 1.&lt;/p&gt;
&lt;p&gt;This time when we step over we reach the &lt;code&gt;for&lt;/code&gt; loop. Step over again to set the undefined &lt;code&gt;i&lt;/code&gt; to 0. As 0 is less than &lt;code&gt;totalTodos&lt;/code&gt; of 1, we go into the &lt;code&gt;for&lt;/code&gt; loop when we step over.&lt;/p&gt;
&lt;p&gt;Here we have a condition that states &lt;code&gt;if&lt;/code&gt; the completed property of our todos item is set to &lt;code&gt;true&lt;/code&gt; (which in our case it is), we enter the &lt;code&gt;if&lt;/code&gt; statement and increase &lt;code&gt;completedTodos&lt;/code&gt; by 1.  We’re using the value of &lt;code&gt;i&lt;/code&gt; to grab the todo item at position 0.&lt;/p&gt;
&lt;p&gt;Step over once more and you’ll see &lt;code&gt;completedTodos&lt;/code&gt; is now set to 1.&lt;/p&gt;
&lt;p&gt;At this point we return to the start of the &lt;code&gt;for&lt;/code&gt; loop,
where our final expression &lt;code&gt;i++&lt;/code&gt; increases &lt;code&gt;i&lt;/code&gt; by 1. As 1 is no longer less than 1, but equal to 1, we leave the &lt;code&gt;for&lt;/code&gt; loop and arrive at Case 1.&lt;/p&gt;
&lt;p&gt;In Case 1 we check if everything is true, in which case we will make everything false.&lt;/p&gt;
&lt;p&gt;We do this by checking if &lt;code&gt;completedTodos&lt;/code&gt; is equals to &lt;code&gt;totalTodos&lt;/code&gt;. In our case they are both 1, so the condition is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As the condition is true, we go into the &lt;code&gt;if&lt;/code&gt; statement and we reach a &lt;code&gt;for&lt;/code&gt; loop. Here &lt;code&gt;i&lt;/code&gt; is reset to 0. Which is less than &lt;code&gt;totalTodos&lt;/code&gt;, currently 1. So we go into the &lt;code&gt;for&lt;/code&gt; loop when we step over again.&lt;/p&gt;
&lt;p&gt;Now we grab the only item we have, in position 0, and set completed to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we return to the start of the &lt;code&gt;for&lt;/code&gt; loop and increment &lt;code&gt;i&lt;/code&gt; by 1. When we evaluate the condition again it’s no longer true, as 1 is not less than our &lt;code&gt;totalTodos&lt;/code&gt; which is 1. Now we exit the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;This time we skip our &lt;code&gt;else&lt;/code&gt; statement in case 2 because case 1 was true.&lt;/p&gt;
&lt;h2 id=&#34;use-the-debugger-all-the-time&#34;&gt;Use the debugger all the time&lt;/h2&gt;
&lt;p&gt;Debugger helps you solve problems with your code before you start asking questions. Use debugger to understand your code even if theres nothing wrong with it.&lt;/p&gt;
&lt;p&gt;If you have a question like what is this line of code doing, use the debugger.&lt;/p&gt;
&lt;p&gt;Don’t ask questions that the debugger can answer.&lt;/p&gt;
&lt;h2 id=&#34;focus-on-understanding-not-building-from-scratch&#34;&gt;Focus on understanding, not building from scratch&lt;/h2&gt;
&lt;p&gt;Focus on understanding code, not building from scratch. Use the debugger to understand the code deeply. Then forget about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML and the DOM</title>
      <link>https://azharkhan.in/notes/practical-javascript-html-dom/</link>
      <pubDate>Sun, 25 Nov 2018 12:14:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-html-dom/</guid>
      <description>&lt;p&gt;This is Part 7 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;. In this part we learn about the Document Object Model and begin building the front-end HTML to allow users to interface with our application.&lt;/p&gt;
&lt;h2 id=&#34;building-a-todo-app-v70&#34;&gt;Building a todo app v.7.0&lt;/h2&gt;
&lt;p&gt;In version 7, we want to start building a user interface that people can interact with, type into, click on etc, so they don’t have to work on the console.  We’ll start by creating 2 buttons which run 2 of our methods.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There should be a “Display todos” button and a “Toggle all” button in the app.&lt;/li&gt;
&lt;li&gt;Clicking “Display todos” should run &lt;code&gt;todoList.displayTodos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clicking “Toggle all” should run &lt;code&gt;todoList.toggleAll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-is-the-dom&#34;&gt;What is the DOM?&lt;/h2&gt;
&lt;p&gt;Where HTML is plain text which gives the browser information about whats on the page. The Document Object Modal (DOM) is the browsers interpretation of the HTML.&lt;/p&gt;
&lt;p&gt;The browser uses the information in your HTML to build an understanding of what the document looks like.&lt;/p&gt;
&lt;p&gt;If you’ve ever right clicked on your website and hit Inspect Element, you will see how the browser has interpreted your document. The code the browser reveals is the DOM.&lt;/p&gt;
&lt;p&gt;In other words, the DOM represents the HTML code you write and provides a way to interact with the HTML objects.&lt;/p&gt;
&lt;p&gt;The DOM tree is how the nodes in each HTML document are organised. Think of this as a family tree, full of parents, siblings and children. The nodes are essentially the HTML tags you write. When you Inspect Element and drill down through the different levels of your HTML code you are moving through the DOM tree.&lt;/p&gt;
&lt;p&gt;The distinction between plain HTML and the DOM is subtle but it’s important to understand the difference.&lt;/p&gt;
&lt;h2 id=&#34;step-1-there-should-be-display-todos-and-toggle-all-buttons-in-the-app&#34;&gt;Step 1: There should be “Display todos” and “Toggle all” buttons in the app&lt;/h2&gt;
&lt;p&gt;First we need to go into our HTML document and create 2 buttons, one for displaying todos and one for toggling all todos.&lt;/p&gt;
&lt;p&gt;Inside the body tags, we can write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-clicking-display-todos-should-run-todolistdisplaytodos&#34;&gt;Step 2: Clicking “Display todos” should run todoList.displayTodos&lt;/h2&gt;
&lt;p&gt;Next we need our new display todos button to run the &lt;code&gt;todoList.displayTodos&lt;/code&gt; method we made previously.&lt;/p&gt;
&lt;p&gt;In our JavaScript code we can start by writing out some comments for what we want to happen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 1. We want to get access to the display todos button.
// 2. We want to run displayTodos method, when someone clicks the display todos button
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;creating-a-reference-to-the-button&#34;&gt;Creating a reference to the button&lt;/h3&gt;
&lt;p&gt;Starting with the first requirement, we can create a new variable called &lt;code&gt;displayTodosButton&lt;/code&gt; so we can reference the button.&lt;/p&gt;
&lt;p&gt;Then, in order to access the DOM, we can use the &lt;code&gt;document&lt;/code&gt; object, which is built into JavaScript. The &lt;code&gt;document&lt;/code&gt; object has methods on it that allow you to select a specific element. One of these methods is called &lt;code&gt;getElementById&lt;/code&gt; which will grab an &lt;code&gt;id&lt;/code&gt; on an element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1. We want to get access to the display todos button.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order for the &lt;code&gt;getElementById&lt;/code&gt; method to run we will need to head back to our HTML and add an &lt;code&gt;id&lt;/code&gt; to our display todos button.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;displayTodosButton&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will allow us to reference this specific button in our JavaScript:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1. We want to get access to the display todos button. 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;displayTodosButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;moving-scriptjs-references-to-the-end-of-the-page&#34;&gt;Moving script.js references to the end of the page&lt;/h3&gt;
&lt;p&gt;Now our code will grab the button we want. Let’s add a &lt;code&gt;console.log&lt;/code&gt; to our code to check it‘s working correctly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1. We want to get access to the display todos button. 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;displayTodosButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run our code you might well see an error, this is likely because of how we’re loading the JavaScript. Check to see if your link to &lt;code&gt;script.js&lt;/code&gt; is inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your document. If it is, remove it from the head and move it just above the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;script.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the browser can see the &lt;code&gt;id&lt;/code&gt; in the HTML document before it runs the JavaScript code. Whereas before, we were loading the JavaScript before the browser parsed the HTML, which is no good.&lt;/p&gt;
&lt;p&gt;This time when we run the code, our error should have disappeared and instead we see&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Display Todos&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great, our code is working as expected.&lt;/p&gt;
&lt;h3 id=&#34;run-displaytodos-method&#34;&gt;run displayTodos method&lt;/h3&gt;
&lt;p&gt;Now we can focus on our second requirement. Here we want to run the display todos method when someone clicks the displays todo button.&lt;/p&gt;
&lt;p&gt;First, we grab our &lt;code&gt;displayTodosButton&lt;/code&gt; variable, then add an event listener, which allows us to do something when an even happens. We can use the &lt;code&gt;addEventListener&lt;/code&gt; method for this.&lt;/p&gt;
&lt;p&gt;In this case we’re listening for anytime someone clicks the button, and when that happens it runs a function which runs the &lt;code&gt;displayTodos&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1. We want to get access to the display todos button.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;displayTodosButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 2. We want to run displayTodos method, when someone clicks the display todos button.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run our code to make sure its working. If all went well the console should return &lt;code&gt;“Your todo list is empty!”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we can clean up our code by removing the comments and the &lt;code&gt;console.log&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;displayTodosButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;displayTodosButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3-clicking-toggle-all-should-run-todolisttoggleall&#34;&gt;Step 3: Clicking “Toggle all” should run todoList.toggleAll&lt;/h2&gt;
&lt;p&gt;The toggle all button will work exactly the same.&lt;/p&gt;
&lt;p&gt;First we need to get a reference to the toggle all button via an &lt;code&gt;id&lt;/code&gt;, so we start by giving the button an &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;toggleAllButton&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Toggle All&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to grab the button, so create the variable &lt;code&gt;toggleAllButton&lt;/code&gt; and use the &lt;code&gt;getElementById&lt;/code&gt; method as before and parse in the &lt;code&gt;id&lt;/code&gt; we just created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleAllButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to add the event listener to it, to listen for clicks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggleAllButton&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;toggleAllButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now try adding some todo items to your todo list with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;todoList.addTodo(‘first’);
todoList.addTodo(‘second’);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now try clicking the toggle all button to change the todos to completed, then click again to make incomplete.&lt;/p&gt;
&lt;h2 id=&#34;v70-review&#34;&gt;v.7.0 Review&lt;/h2&gt;
&lt;p&gt;In version 7 we started moving away from the console and into the actual webpage, where people can interface with our todo app.&lt;/p&gt;
&lt;p&gt;We learnt about the DOM and the structure of HTML and where we need to put our JavaScript link.&lt;/p&gt;
&lt;p&gt;Then we learnt about how we can access the DOM using the &lt;code&gt;document&lt;/code&gt; method and then grab the buttons on our page via an &lt;code&gt;id&lt;/code&gt; using the &lt;code&gt;getElementById&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;We also learnt about event listeners and the &lt;code&gt;addEventListener&lt;/code&gt; method, using a &lt;code&gt;click&lt;/code&gt; event, which allows us to run some code when someone clicks a button. The &lt;code&gt;click&lt;/code&gt; is just one of many types of events you can use to handle events inside of the DOM.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Types and Comparisons</title>
      <link>https://azharkhan.in/notes/practical-javascript-data-types-comparisons/</link>
      <pubDate>Thu, 22 Nov 2018 11:54:12 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-data-types-comparisons/</guid>
      <description>&lt;p&gt;In JavaScript there are 2 categories of data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Primitives&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;objects&#34;&gt;Objects&lt;/h2&gt;
&lt;p&gt;Objects can be as complicated as you want. Objects use curly braces.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{} // todoList, arrays, functions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;primitives&#34;&gt;Primitives&lt;/h2&gt;
&lt;p&gt;Primitives are the simple building blocks of JavaScript, they only have 1 form. You can’t make them complicated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String (formal name for text, in between quotes, very limited data type) // ‘This is a string!’&lt;/li&gt;
&lt;li&gt;Number (same as in math) // 1, 2, 3, 4 …&lt;/li&gt;
&lt;li&gt;Boolean (super limited data type) // true, false&lt;/li&gt;
&lt;li&gt;Undefined // Value that hasn’t yet been set&lt;/li&gt;
&lt;li&gt;Null // ‘Nothing’&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;difference-between-undefined-and-null&#34;&gt;Difference between &amp;lsquo;undefined&amp;rsquo; and &amp;lsquo;null&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;Undefined is simply a value which hasn’t yet been set, whereas null literally means nothing. For example if you have a variable but haven’t given it a value yet it will be &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Null can be used to represent say a variable for someones test score, where the score is marked from 0-100, but they haven’t yet taken the test. In this case the test score would be equal to &lt;code&gt;null&lt;/code&gt;. Null means explicitly nothing.&lt;/p&gt;
&lt;h2 id=&#34;is-it-a-primitive-or-an-object&#34;&gt;Is it a primitive or an object?&lt;/h2&gt;
&lt;p&gt;If you’re unsure if something is an Object or a Primitive, ask yourself it it fits into one of the primitive categories above. If it doesn’t then it’s an Object.&lt;/p&gt;
&lt;h2 id=&#34;comparisons-with-primitive-data-types&#34;&gt;Comparisons with primitive data types&lt;/h2&gt;
&lt;p&gt;Primitive comparisons work just like in Math. General rule, if they look the same they probably are the same.&lt;/p&gt;
&lt;h3 id=&#34;comparisons-with-strings&#34;&gt;Comparisons with Strings&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;harry&#39; === &#39;harry&#39;&lt;/code&gt; would return &lt;code&gt;true&lt;/code&gt; they are the same thing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;harry1&#39; === &#39;harry&#39;&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt;, they are different&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comparisons-with-numbers&#34;&gt;Comparisons with Numbers&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt; 10&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 = 0&lt;/code&gt; is the same thing so it’s also &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 === 1&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Whereas &lt;code&gt;1 === 2&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;100 === 100&lt;/code&gt; would return &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Number comparisons work as you would expect.&lt;/p&gt;
&lt;h3 id=&#34;comparisons-with-booleans&#34;&gt;Comparisons with Booleans&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true === true&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true === false&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false === false&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comparisons-of-undefined-and-null&#34;&gt;Comparisons of Undefined and Null&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined === undefined&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null === null&lt;/code&gt; will also return &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarise, primitive comparisons work exactly as you would expect.&lt;/p&gt;
&lt;h2 id=&#34;comparisons-with-object-data-types&#34;&gt;Comparisons with Object data types&lt;/h2&gt;
&lt;p&gt;Comparisons with Objects works completely different from primitive comparisons, the behaviour is unexpected.&lt;/p&gt;
&lt;p&gt;For example, the comparison between 2 empty objects returns false:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{} === {}&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As does the comparison of 2 arrays which appear the same:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, 2, 3] === [1, 2, 3]&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;understanding-why-object-comparisons-behave-differently&#34;&gt;Understanding why Object comparisons behave differently&lt;/h3&gt;
&lt;p&gt;In object comparisons JavaScript is actually comparing the addresses it assigns to the objects.&lt;/p&gt;
&lt;p&gt;In our example from before, imagine our 2 empty objects are actually houses:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{} === {}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;JavaScript sees these as 2 separate houses in 2 different locations; &lt;code&gt;house1&lt;/code&gt; and &lt;code&gt;house2&lt;/code&gt;. Much like houses in the real world have different addresses, these are actuallu 2 separate objects, with 2 separate addresses. Although they might look the same they in fact different.&lt;/p&gt;
&lt;p&gt;When you create an object in JavaScript, it saves that object at unique location in memory.&lt;/p&gt;
&lt;p&gt;In this case, 3 objects – all identical in the fact they are empty – are saved at different memory addresses.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{}  // Memory Address 1
{}  // Memory Address 2
{}  // Memory Address 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When JavaScript is comparing the first object to the second, it’s actually comparing the memory addresses. It’s doing this to understand if we’re looking at the exact same object or 2 separate objects.&lt;/p&gt;
&lt;p&gt;A general rule of thumb, if you’re comparing 2 objects it will be &lt;code&gt;false&lt;/code&gt;. The only time you can have an object comparison equal is if you assign the object to a variable and compare those variables.&lt;/p&gt;
&lt;p&gt;&#39;&amp;rsquo; var houseA = {}; houseA === houseA true&lt;/p&gt;
&lt;p&gt;As you see in the example above, this comparison returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;comparisons-review&#34;&gt;Comparisons review&lt;/h2&gt;
&lt;p&gt;Primitive comparisons work just as you expect.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2 == 2&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, because 2 is 2. JavaScript is comparing the value of the data. It doesn’t care about the memory address or location of where its stored.&lt;/p&gt;
&lt;p&gt;Objects are references, memory addresses of where an object is saved. When you save an Object, Javascript is not looking at the values between the curly brackets, it’s actually saving a reference so it can refer to the value.&lt;/p&gt;
&lt;p&gt;So although the value might appear the same, JavaScript is actually looking at the memory address which is different.&lt;/p&gt;
&lt;p&gt;So remember, when you’re comparing objects you’re actually comparing 2 memory addresses.&lt;/p&gt;
&lt;h2 id=&#34;code-example-1&#34;&gt;Code example 1&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myPrimitive&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;harry&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s try and understand what’s going on in the example above. In line 1, JavaScript creates the variable &lt;code&gt;myPrimitive&lt;/code&gt;, then stores the number &lt;code&gt;10&lt;/code&gt; as the value inside the variable.&lt;/p&gt;
&lt;p&gt;In line 2, first we’re telling JavaScript creates the variable &lt;code&gt;myObject&lt;/code&gt;. Then we tell JavaScript to create a new object with the name property &lt;code&gt;harry&lt;/code&gt;. JavaScript creates the new object and gives it a memory address. It’s that memory address thats actually stored inside the &lt;code&gt;myObject&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;The diagram below should help illustrate how this works.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542885381/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-1.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542885381/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-1.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542885381/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-1.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542885381/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-1.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Understanding how data is stored in objects example 1&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;code-example-2&#34;&gt;Code example 2&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;myHouse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In line 1 of the example above, JavaScript starts by creating a variable called &lt;code&gt;myHouse&lt;/code&gt;. Then it creates an object which has the color property equal to &lt;code&gt;blue&lt;/code&gt;. Once it’s created it’ll have a memory address which is stored inside the variable.&lt;/p&gt;
&lt;p&gt;In line 2, we’re modifying the color property on the &lt;code&gt;myHouse&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;First JavaScript looks at &lt;code&gt;myHouse&lt;/code&gt;, it sees there’s a memory address, so it travels to that memory address and finds the &lt;code&gt;myHouse&lt;/code&gt; object. The next thing we’re doing is telling JavaScript to look at the &lt;code&gt;color&lt;/code&gt; property. That completes the left hand side of line 2.&lt;/p&gt;
&lt;p&gt;On the right hand side of line 2, we’re telling JavaScript to change the value of the color property on the &lt;code&gt;myHouse&lt;/code&gt; object to &lt;code&gt;&#39;red&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The diagram below should help illustrate how this works.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542887659/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-2.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542887659/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-2.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542887659/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-2.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542887659/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-2.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Understanding how data is stored in objects example 2&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;code-example-3&#34;&gt;Code example 3&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here in line 1, we’re telling JavaScript to create a variable called &lt;code&gt;myHouse&lt;/code&gt;. Then we’re creating an object with the color property value of blue. Next JavaScript will create a memory address and store that in the variable.&lt;/p&gt;
&lt;p&gt;In line 2, we’re creating another variable, this time called &lt;code&gt;color&lt;/code&gt;, and telling JavaScript to look at the color property on the &lt;code&gt;myHouse&lt;/code&gt; object. JavaScript sees the memory address stored in the &lt;code&gt;myHouse&lt;/code&gt; variable, travels to the object, and finds the color property. JavaScript then stores the value of the color property; in this case &lt;code&gt;&#39;blue&lt;/code&gt;, inside the &lt;code&gt;color&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;In line 3, all we’re doing is telling JavaScript to change the value store in the &lt;code&gt;color&lt;/code&gt; variable to &lt;code&gt;&#39;red&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The diagram below should help illustrate how this works.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888475/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-3.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888475/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-3.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888475/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-3.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888475/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-3.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Understanding how data is stored in objects example 3&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;code-example-4&#34;&gt;Code example 4&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;myHouse2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, on the left of line 1 JavaScript creates a variable called &lt;code&gt;myHouse1&lt;/code&gt;. On the right side JavaScript creates an object that has the color property blue. JavaScript then saves a memory address pointing to the object inside the variable &lt;code&gt;myHouse1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In line 2, we create a new variable called &lt;code&gt;myHouse2&lt;/code&gt;, and set the value to the same value stored in the &lt;code&gt;myHouse1&lt;/code&gt; variable. In this case; the same memory address which leads to the object created in line 1.&lt;/p&gt;
&lt;p&gt;In line 3, on the left side we’re telling JavaScript to go to the &lt;code&gt;myHouse2&lt;/code&gt; variable. In the &lt;code&gt;myHouse2&lt;/code&gt; variable JavaScript finds the memory address, follows the memory address to the object associated with that memory address.&lt;/p&gt;
&lt;p&gt;On the right side, we’re telling JavaScript to update the value it finds in the object to &lt;code&gt;red&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The diagram below should help illustrate how this works.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888888/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-4.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888888/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-4.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888888/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-4.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542888888/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-4.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Understanding how data is stored in objects example 4&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

&lt;h3 id=&#34;code-example-5&#34;&gt;Code example 5&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myHouse2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;myHouse2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this final example, line 1 creates a variable called &lt;code&gt;myHouse1&lt;/code&gt;. Then we create an object with the color property &lt;code&gt;‘blue’&lt;/code&gt;. Then JavaScript creates a memory address associated with this object and stores it in the variable &lt;code&gt;myHouse1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In line 2, we create a new variable called &lt;code&gt;myHouse2&lt;/code&gt;. Then we create another object with the color property &lt;code&gt;blue&lt;/code&gt;. Javascript then stores a new memory address inside &lt;code&gt;myHouse2&lt;/code&gt;. This time leading to the second object.&lt;/p&gt;
&lt;p&gt;We now have 2 objects and 2 memory addresses.&lt;/p&gt;
&lt;p&gt;In line 3, on the left side we’re telling JavaScript to look at the value stored inside &lt;code&gt;myHouse2&lt;/code&gt;. In this case that’s the memory address leading to our second object.
JavaScript follows this memory address and finds the color property &lt;code&gt;blue&lt;/code&gt;. In the right side of line 3 we’re telling JavaScript to change the value of this color property to &lt;code&gt;red&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The diagram below should help illustrate how this works.&lt;/p&gt;
&lt;div class=&#34;Video&#34;&gt;
  &lt;video autoplay loop muted=&#34;muted&#34;
    poster=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542889069/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-5.jpg&#34;&gt;

    &lt;source type=&#34;video/mp4&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542889069/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-5.mp4&#34;&gt;

    &lt;source type=&#34;video/webm&#34;
        src=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542889069/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-5.webm&#34;&gt;

    Your browser does not support HTML5 video tag.

    &lt;a href=&#34;https://res.cloudinary.com/azhar932/image/upload/v1542889069/hc/practical-javascript-data-types-comparisons-harry-cresswell-example-5.gif&#34;&gt;Click here to view original GIF&lt;/a&gt;

  &lt;/video&gt;
  
  &lt;figure&gt;
  
  
    &lt;figcaption&gt;Understanding how data is stored in objects example 4&lt;/figcaption&gt;
  &lt;/figure&gt;
  
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Thinking in Code</title>
      <link>https://azharkhan.in/notes/practical-javascript-thinking-in-code/</link>
      <pubDate>Thu, 15 Nov 2018 11:24:19 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-thinking-in-code/</guid>
      <description>&lt;p&gt;This is Part 6 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;building-a-todo-app-v60&#34;&gt;Building a todo app v.6.0&lt;/h2&gt;
&lt;p&gt;In version 6 we’ll work on 1 feature which toggles todos as complete or incomplete.&lt;/p&gt;
&lt;p&gt;You can see how this works in the finished app &lt;a href=&#34;http://todomvc.com/examples/vanillajs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the example, use the chevron to the left of the input box to toggle the todos you create.&lt;/p&gt;
&lt;p&gt;You’ll notice a few cases, if everything is &lt;code&gt;false&lt;/code&gt; (items are incomplete) and you click toggle, everything will be &lt;code&gt;true&lt;/code&gt;. If some of the items are &lt;code&gt;true&lt;/code&gt; (complete), toggle will make the rest &lt;code&gt;true&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;The only case it will make every todo &lt;code&gt;false&lt;/code&gt; (incomplete) is when all items are &lt;code&gt;true&lt;/code&gt; (complete). In every other case, clicking the toggle button will make all todo items &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can represent this in our requirements.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.toggleAll&lt;/code&gt;: If everything’s true, make everything false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.toggleAll&lt;/code&gt;: Otherwise, make everything true.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-if-everythings-true-make-everything-false&#34;&gt;Step 1: If everything’s true, make everything false&lt;/h2&gt;
&lt;p&gt;Our first step is to work on a solution where if everything is &lt;code&gt;true&lt;/code&gt; make everything &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We want to do this in a new method called &lt;code&gt;toggleAll&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// If everything’s true, make everything false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;comparing-completedtodos-to-totaltodos&#34;&gt;Comparing completedTodos to totalTodos&lt;/h3&gt;
&lt;p&gt;To make this happen we could use an &lt;code&gt;if&lt;/code&gt; statement and count the the number of &lt;code&gt;completedTodos&lt;/code&gt;, to see if it equals the number of &lt;code&gt;totalTodos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If that returns &lt;code&gt;true&lt;/code&gt;, we’d know we we’d met the first condition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// If everything’s true  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
    &lt;span class=&#34;c1&#34;&gt;// Make everything false  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setting-the-required-variables&#34;&gt;Setting the required variables&lt;/h3&gt;
&lt;p&gt;The problem now is that the variables &lt;code&gt;completedTodos&lt;/code&gt; and &lt;code&gt;totalTodos&lt;/code&gt; don’t exist yet, so we need to create those next.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// If everything’s true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;c1&#34;&gt;// Make everything false  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For our &lt;code&gt;totalTodos&lt;/code&gt; variable, we can use &lt;code&gt;this.todos.length&lt;/code&gt; to check the number of items in our todo list, so this works great.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;completedTodos&lt;/code&gt; is harder to get. So it’s a safe assumption to start with 0, meaning we have zero completed todos. Then we can look through all the items in our todo list to see how many are completed. If we see a todo is completed we can increase the value of &lt;code&gt;completedTodos&lt;/code&gt; by 1. To make this happen we can use a &lt;code&gt;for&lt;/code&gt; loop, which loops through all our items.&lt;/p&gt;
&lt;h3 id=&#34;looping-through-todos&#34;&gt;Looping through todos&lt;/h3&gt;
&lt;p&gt;In the first part of our &lt;code&gt;for&lt;/code&gt; loop we can use a variable  &lt;code&gt;i = 0&lt;/code&gt; again as a counter. We want to keep going whilst &lt;code&gt;i&lt;/code&gt; is less than the &lt;code&gt;totalTodos&lt;/code&gt;, then increment &lt;code&gt;i&lt;/code&gt;  by 1 using &lt;code&gt;i++&lt;/code&gt;. This will loop through our todos.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
  &lt;span class=&#34;c1&#34;&gt;// Count number of completed todos
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
  &lt;span class=&#34;c1&#34;&gt;// If everything’s true 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;c1&#34;&gt;// Make everything false 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;check-if-todo-is-completed-update-completedtodos-variable&#34;&gt;Check if todo is completed, update completedTodos variable&lt;/h3&gt;
&lt;p&gt;Then we want to look at each todo item in our array. Using &lt;code&gt;if&lt;/code&gt; we can check to see if a specific todo is completed with &lt;code&gt;this.todos[i].completed === true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And then with &lt;code&gt;completedTodos++&lt;/code&gt;, increment completedTodos by 1 if the statement is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
  &lt;span class=&#34;c1&#34;&gt;// Count number of completed todos  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;     
      &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;  
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
  &lt;span class=&#34;c1&#34;&gt;// If everything’s true 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;c1&#34;&gt;// Make everything false  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code will go through and return the number of todos that are completed, updating the value in our &lt;code&gt;completedTodos&lt;/code&gt; variable with the number of completed todos.&lt;/p&gt;
&lt;h3 id=&#34;make-false-if-all-todos-are-true&#34;&gt;Make false if all todos are true&lt;/h3&gt;
&lt;p&gt;To make everything &lt;code&gt;false&lt;/code&gt; if all our todos are set to &lt;code&gt;true&lt;/code&gt;, we can use the exact same &lt;code&gt;for&lt;/code&gt; loop as before.&lt;/p&gt;
&lt;p&gt;This time using &lt;code&gt;this.todos[i].completed = false;&lt;/code&gt; to set all todos to &lt;code&gt;false&lt;/code&gt;, if the number of &lt;code&gt;completedTodos&lt;/code&gt; is equal to the number of &lt;code&gt;totalTodos&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
  &lt;span class=&#34;c1&#34;&gt;// Count number of completed todos  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
      &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;    
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
  &lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;understanding-the-code&#34;&gt;Understanding the code&lt;/h3&gt;
&lt;p&gt;So first we check to see if the number of completedTodos is the same as the number of totalTodos. If that returns &lt;code&gt;true&lt;/code&gt;, then we’ll go through and make all the items false.&lt;/p&gt;
&lt;p&gt;In order to get the number of completedTodos in the first place, we use a &lt;code&gt;for&lt;/code&gt; loop to count through our todos and check to see if completed is set to &lt;code&gt;true&lt;/code&gt;, in which case we would update the number in our &lt;code&gt;completedTodos&lt;/code&gt; variable.&lt;/p&gt;
&lt;h3 id=&#34;test-the-code-in-the-console&#34;&gt;Test the code in the console&lt;/h3&gt;
&lt;p&gt;Now we can test the code to see if it’s working correctly. In the console add 2 new todos.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will return:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now toggle those 2 todos to completed with &lt;code&gt;todoList.toggleCompleted(0);&lt;/code&gt; and &lt;code&gt;todoList.toggleCompleted(1);&lt;/code&gt; to return:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, use &lt;code&gt;todoList.toggleAll();&lt;/code&gt; to toggle both todos to &lt;code&gt;false&lt;/code&gt;, in other words back to incompleted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That wraps up the first requirement of our v.6.0 app.&lt;/p&gt;
&lt;h2 id=&#34;step-2-otherwise-make-everything-true&#34;&gt;Step 2: Otherwise, make everything true&lt;/h2&gt;
&lt;p&gt;The last requirement of version 6 is pretty simple as we’ve done most of the work already.&lt;/p&gt;
&lt;p&gt;A big tip here; if you ever find yourself saying “Otherwise”, it’s the perfect time to use an &lt;code&gt;else&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
  &lt;span class=&#34;c1&#34;&gt;// Count number of completed todos  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      
      &lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;   
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
  &lt;span class=&#34;c1&#34;&gt;// Case 1: If everything’s true, make everything false 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completedTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Case 2: Otherwise, make everything true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      
      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You’ll notice our &lt;code&gt;else&lt;/code&gt; statement is almost identical to our &lt;code&gt;if&lt;/code&gt; statement, except in this case we’re making everything &lt;code&gt;true&lt;/code&gt; instead of &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we use the &lt;code&gt;for&lt;/code&gt; loop to count through the todos, and then &lt;code&gt;this.todos[i].completed = true;&lt;/code&gt; to set the todos to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;test-the-code-in-the-console-1&#34;&gt;Test the code in the console&lt;/h3&gt;
&lt;p&gt;As we did before, add some todo items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then run &lt;code&gt;todoList.toggleAll();&lt;/code&gt;. This should make everything &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;todoList.toggleAll();&lt;/code&gt; again and it should make everything &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now test the final case, where some are &lt;code&gt;true&lt;/code&gt; and some &lt;code&gt;false&lt;/code&gt; to see if &lt;code&gt;toggleAll&lt;/code&gt; sets all items to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So use &lt;code&gt;todoList.toggleCompleted(0);&lt;/code&gt; to toggle the first item to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, run &lt;code&gt;todoList.toggleAll();&lt;/code&gt; again to toggle all to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;first&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great, our code is working as expected.&lt;/p&gt;
&lt;h3 id=&#34;v60-review&#34;&gt;v.6.0 Review&lt;/h3&gt;
&lt;p&gt;In this version we’ve had practice with &lt;code&gt;for&lt;/code&gt; loops, accessing different properties on an object, going through items in an array. And linking functions together with &lt;code&gt;this.displayTodos();&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ve also looked at keeping track of different variables we need inside &lt;code&gt;for&lt;/code&gt; loops. This pulls a lot of the programming concepts we’ve learnt already together into one method.&lt;/p&gt;
&lt;p&gt;This version should have given you a better idea of how you think about a program, think like a programer and figure out a feature to systematically write your code.&lt;/p&gt;
&lt;p&gt;As we’ve done here you might start by writing out comments, then cases to help guide you as you’re coding.&lt;/p&gt;
&lt;p&gt;Commenting your code will help you and others understand it better when you go back to it at a later date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loops for Logic</title>
      <link>https://azharkhan.in/notes/practical-javascript-for-loops/</link>
      <pubDate>Thu, 08 Nov 2018 11:29:03 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-for-loops/</guid>
      <description>&lt;p&gt;This is Part 5 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;. In this part we changed the structure of an array from a text value to an object, modify a method to work with a text property and learn about Booleans.&lt;/p&gt;
&lt;h2 id=&#34;building-a-todo-app-v50&#34;&gt;Building a todo app v.5.0&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;if else&lt;/code&gt; statements.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-for-loop&#34;&gt;Understanding the for loop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop allows you to repeat a certain amount of code, any number of times. For example, if you wanted to tell a computer in english to say “hey” 3 times, this is how you might do it in 3 steps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Say&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Increase&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So whats going on here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep track of variable called &lt;code&gt;i&lt;/code&gt;, which is zero first&lt;/li&gt;
&lt;li&gt;say “hey” if &lt;code&gt;i&lt;/code&gt; is less than 3&lt;/li&gt;
&lt;li&gt;After that, increase &lt;code&gt;i&lt;/code&gt; by 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This might result in the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;whats-going-on-here&#34;&gt;Whats going on here?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;“hey” because zero is less than 3&lt;/li&gt;
&lt;li&gt;Then it would increase &lt;code&gt;i&lt;/code&gt; by 1, and return 1 followed by “hey”, because 1 is still less than 3&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;i&lt;/code&gt; would increase again by 1 and return 2, followed by “hey”, as 2 is still less than 3&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;i&lt;/code&gt; is increased by 1 and the value is 3, the computer stops returning “hey”, as &lt;code&gt;i&lt;/code&gt; is no longer less than 3, it’s now equal to 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;in-javascript-these-steps-have-specific-names&#34;&gt;In Javascript these steps have specific names&lt;/h3&gt;
&lt;p&gt;In Javascript, the 3 steps outlined above have specific names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;// Initialization
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Say&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// Condition
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Increase&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// Final-expression
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first step is the &lt;strong&gt;Initialization&lt;/strong&gt;, this is essentially a variable we create to keep track of how many times we want to do something. In this case we use zero to keep track of how many times we want to print “hey”.&lt;/p&gt;
&lt;p&gt;The second step is known as the &lt;strong&gt;Condition&lt;/strong&gt;. For example, if this is true, then keep going, otherwise stop. In the code above, the condition is “if &lt;code&gt;i&lt;/code&gt; is less than 3”.&lt;/p&gt;
&lt;p&gt;The third step is the &lt;strong&gt;Final Expression&lt;/strong&gt;, this is what happens after each round. So after saying “hey” the first time, we’ll increase &lt;code&gt;i&lt;/code&gt; by 1, after we increase &lt;code&gt;i&lt;/code&gt; the second time, increase &lt;code&gt;i&lt;/code&gt; by 1 and so on.&lt;/p&gt;
&lt;h3 id=&#34;structuring-in-code&#34;&gt;Structuring in code&lt;/h3&gt;
&lt;p&gt;We can use the &lt;code&gt;for&lt;/code&gt; loop to make this work in code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initialization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With our steps from before, this looks something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As it’s a common occurrence in Javascript, we can shorthand the final expression to &lt;code&gt;i++&lt;/code&gt;, meaning &lt;code&gt;i = i + 1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;looping-over-arrays&#34;&gt;Looping over Arrays&lt;/h2&gt;
&lt;p&gt;Carrying on with the example from the last video, instead of printing “hey”, with &lt;code&gt;console.log&lt;/code&gt;, we can actually just &lt;code&gt;console.log&lt;/code&gt; our variable. In this case, &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our code will return the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, let’s create a new array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;testArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember, you can access specific items in an array using the square brackets:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;testArray[0]&lt;/code&gt;, for the first item, &lt;code&gt;testArray[1]&lt;/code&gt; for the second, and so on. We can use this inside our &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By console logging our &lt;code&gt;testArray&lt;/code&gt; with &lt;code&gt;i&lt;/code&gt; as the parameter, we can loop through the 3 items in the array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem now is that using 3 in our &lt;code&gt;for&lt;/code&gt; loop condition will only return the first 3 items.&lt;/p&gt;
&lt;p&gt;It would be better to make the condition dynamic and return as many items as are in our array. We can do this with the &lt;code&gt;.length&lt;/code&gt; property. &lt;code&gt;Length&lt;/code&gt; will tell us how many items are in the array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;testArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we add an item to &lt;code&gt;testArray&lt;/code&gt;, so there’s 4 items in the array, it will be returned. If we kept using 3 as the condition, the fourth item wouldn’t be returned.&lt;/p&gt;
&lt;p&gt;For example, add a new item with &lt;code&gt;testArray.push(&#39;extra item&#39;);&lt;/code&gt;. Then run the original code and &lt;code&gt;extra item&lt;/code&gt; will not be returned.&lt;/p&gt;
&lt;p&gt;However run the updated code with &lt;code&gt;testArray.length&lt;/code&gt; instead of the value 3 and &lt;code&gt;length&lt;/code&gt; will check the number of items then return those items.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;extra&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, our code will work with &lt;code&gt;testArray&lt;/code&gt; no matter how many items are in the array.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Version 5 will put into practice what we’ve learnt about &lt;code&gt;for&lt;/code&gt; loops to fix our &lt;code&gt;displayTodos&lt;/code&gt; method and make it a lot better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.displayTodos&lt;/code&gt; should show &lt;code&gt;.todoText&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.displayTodos&lt;/code&gt; should tell you if &lt;code&gt;.todos&lt;/code&gt; is empty&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.displayTodos&lt;/code&gt; should show &lt;code&gt;.completed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-displaytodods-should-show-todotext&#34;&gt;Step 1: displayTodods should show .todoText&lt;/h2&gt;
&lt;p&gt;The first requirement is that our &lt;code&gt;displayTodos&lt;/code&gt; todos method should show the &lt;code&gt;todoText&lt;/code&gt; property on each object in the &lt;code&gt;todos&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;As we have to do some processing on each object in the array, we can use the &lt;code&gt;for&lt;/code&gt; loop, as we want to repeat some code for every item in the array.&lt;/p&gt;
&lt;h3 id=&#34;adding-the-for-loop-to-our-code&#34;&gt;Adding the for loop to our code&lt;/h3&gt;
&lt;p&gt;We can write the structure the &lt;code&gt;for&lt;/code&gt; loop inside the &lt;code&gt;displayTodos&lt;/code&gt; method, as we learnt before:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initialization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time, instead of using &lt;code&gt;testArray&lt;/code&gt; which doesn’t make much sense now, we can use our &lt;code&gt;todos&lt;/code&gt; array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;making-the-for-loop-work&#34;&gt;Making the for loop work&lt;/h3&gt;
&lt;p&gt;Say for example, &lt;code&gt;this.todos&lt;/code&gt; has 3 items, in that case, the first time &lt;code&gt;i = 0&lt;/code&gt;, the second &lt;code&gt;i = 1&lt;/code&gt;, the third &lt;code&gt;i = 2&lt;/code&gt;, then it will stop as &lt;code&gt;i&lt;/code&gt; will equal 3 and the condition is no longer true. 3 is not less than 3 so the loop will end.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// this.todos.length has 3 items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the values of &lt;code&gt;i&lt;/code&gt; to access specific items in the array. Remember, when you have an array you can get to a specific item using brackets, like this &lt;code&gt;this.todo[]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;i&lt;/code&gt; as the value inside the brackets to loop through the items.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// this.todos.length has 3 items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our app we want to access the &lt;code&gt;todoText&lt;/code&gt; property, which we can do using dot notation:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this.todos[i].todoText&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;By putting our code inside a &lt;code&gt;console.log&lt;/code&gt; statement, we can display the items on the console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// this.todos.length has 3 items
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// i = 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we can remove &lt;code&gt;this.todos&lt;/code&gt; from the first &lt;code&gt;console.log&lt;/code&gt; statement, as this prints out objects to the console, which isn’t particularly useful.&lt;/p&gt;
&lt;p&gt;Our final code (with comments removed) will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before moving on, try adding a couple of todo items to see how these new changes work.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;todoList.addTodo(&#39;first&#39;);&lt;/code&gt;, then &lt;code&gt;todoList.addTodo(&#39;second&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will return:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
first
second
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-2-displaytodos-should-tell-you-if-todos-is-empty&#34;&gt;Step 2: displayTodos should tell you if .todos is empty&lt;/h2&gt;
&lt;p&gt;Next we want &lt;code&gt;displayTodos&lt;/code&gt; to tell us if the todos array is empty.&lt;/p&gt;
&lt;p&gt;We can do this by adding some logic using an &lt;code&gt;if else&lt;/code&gt; statement. This might work something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// if there are no todos
  // console.log(&#39;Your todo list is empty!&#39;);
// else 
  // print todos as normal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can make this more specific:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// if there are no todos
// if this.todos.length is equal to 0
  // console.log(&#39;Your todo list is empty!&#39;);
// else
  // print todos as normal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And more specific still:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// if there are no todos
// if this.todos.length is equal to 0
// if this.todos.length === 0  
  // console.log(&#39;Your todo list is empty!&#39;);
// else  
  // print todos as normal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice we’re using triple equals (&lt;code&gt;===&lt;/code&gt;). This is the strictest form of comparison in Javascript. It’s the most consistent way of comparing values and the recommended way. You’ll sometimes see double equals (&lt;code&gt;==&lt;/code&gt;) but it’s not that consistent so avoid using it for now.&lt;/p&gt;
&lt;h3 id=&#34;translating-this-logic-into-javascript&#34;&gt;Translating this logic into Javascript&lt;/h3&gt;
&lt;p&gt;We can use the &lt;code&gt;if&lt;/code&gt; keyword and then test a condition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;c1&#34;&gt;// run code here if the statement is true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For our purposes, that would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your todo list is empty!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can add the &lt;code&gt;else&lt;/code&gt; statement if the condition is &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your todo list is empty!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// print todos as normal
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For our &lt;code&gt;else&lt;/code&gt; statement we can use the code we wrote in step 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your todo list is empty!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now our &lt;code&gt;displayTodos&lt;/code&gt; method should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Your todo list is empty!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;testing-our-work-in-the-console&#34;&gt;Testing our work in the console&lt;/h3&gt;
&lt;p&gt;Next, head to the console to test everything is working correctly.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.displayTodos();&lt;/code&gt; should now return &lt;code&gt;Your todo list is empty!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Try adding a new todo, &lt;code&gt;todoList.addTodo(&#39;an item&#39;)&lt;/code&gt; will return:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
an item
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, delete the todo with &lt;code&gt;todoList.deleteTodo(0);&lt;/code&gt; to return &lt;code&gt;Your todo list is empty!&lt;/code&gt; once again.&lt;/p&gt;
&lt;h3 id=&#34;understanding-the-code&#34;&gt;Understanding the code&lt;/h3&gt;
&lt;p&gt;By adding some logic to our program we can check to see if this case is &lt;code&gt;true&lt;/code&gt;, then run some code, otherwise run this code. with can do this with an &lt;code&gt;if&lt;/code&gt; statement. The &lt;code&gt;if&lt;/code&gt; statement uses the keyword &lt;code&gt;if&lt;/code&gt; followed by a condition.&lt;/p&gt;
&lt;p&gt;In our case, we’re using &lt;code&gt;if&lt;/code&gt; to check to see if &lt;code&gt;this.todos.length&lt;/code&gt; is equal to 0, which will be the case if there are no items in our todo list. If the case is true we will run the code &lt;code&gt;Your todo list is empty!&lt;/code&gt;.
If the length is not 0, we will print our todos as normal. We can achieve this with the &lt;code&gt;else&lt;/code&gt; statement using the &lt;code&gt;for&lt;/code&gt; loop we wrote in Step 1.&lt;/p&gt;
&lt;h3 id=&#34;more-on-if-statements-and-else&#34;&gt;More on if statements and else&lt;/h3&gt;
&lt;p&gt;You can use &lt;code&gt;if&lt;/code&gt; without else:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// code that runs if condition is true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But with &lt;code&gt;else&lt;/code&gt; it looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// code that runs if condition is true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// code that runs if condition is false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can have as many &lt;code&gt;if&lt;/code&gt; statements as you like.&lt;/p&gt;
&lt;h2 id=&#34;step-3-displaytodos-should-show-completed&#34;&gt;Step 3: displayTodos should show .completed&lt;/h2&gt;
&lt;p&gt;The final requirement for v5 is for &lt;code&gt;displayTodos&lt;/code&gt; to show whether a todo has been completed or not.&lt;/p&gt;
&lt;p&gt;We could represent that like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;( ) item 1
(x) item 2
( ) item 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where a parentheses containing an x; &lt;code&gt;(x)&lt;/code&gt; represents a complete todo item and an empty parentheses; &lt;code&gt;( )&lt;/code&gt; represents a todo which is incomplete.&lt;/p&gt;
&lt;p&gt;We can do this inside our &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// check if .completed is true       
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// print with (x)   
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// else      
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// print with ( )
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;translating-this-to-javascript&#34;&gt;Translating this to Javascript&lt;/h3&gt;
&lt;p&gt;We can translate our notes into JavaScript like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;      
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;     
  &lt;span class=&#34;c1&#34;&gt;// check if .completed is true     
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;       
    &lt;span class=&#34;c1&#34;&gt;// print with (x)   
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;       
    &lt;span class=&#34;c1&#34;&gt;// print with ( )  
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the first part we check if &lt;code&gt;this.todos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;i&lt;/code&gt;, we can look at the specific todo in this iteration of the loop.&lt;/p&gt;
&lt;p&gt;Then, we check the completed property, to see if it’s &lt;code&gt;true&lt;/code&gt;. We can use the triple equals to do this.&lt;/p&gt;
&lt;h3 id=&#34;representing-complete-and-incomplete-todos&#34;&gt;Representing complete and incomplete todos&lt;/h3&gt;
&lt;p&gt;Lastly we need to print out the todo text for the specific object, with an &lt;code&gt;(x)&lt;/code&gt; if completed is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;( )&lt;/code&gt; when completed is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;(x)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;( )&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To do this we can &lt;code&gt;console.log(this.todos[i].todotext)&lt;/code&gt;, just like we did at the top of the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;We’ll just need to add the string values before hand. &lt;code&gt;(x)&lt;/code&gt; for the first instance and the empty parenthesises; &lt;code&gt;( )&lt;/code&gt;, in the &lt;code&gt;else&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;Now we can get rid of &lt;code&gt;console.log(this.todos[i].todotext)&lt;/code&gt; at the top of the &lt;code&gt;for&lt;/code&gt; loop as we’re now doing this work inside the &lt;code&gt;if else&lt;/code&gt; statement.&lt;/p&gt;
&lt;h3 id=&#34;testing-our-work-in-the-console-1&#34;&gt;Testing our work in the console&lt;/h3&gt;
&lt;p&gt;Now we can add a few todos.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;third&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see these print out with an empty parenthesises as none of them have been completed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
( ) first
( ) second
( ) third
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can use &lt;code&gt;toggleCompleted&lt;/code&gt; to see if we can change some of our todo items to complex.&lt;/p&gt;
&lt;p&gt;To toggle our second todo we can use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.toggleCompleted(1);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which will return:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
( ) first
(x) second
( ) third
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can toggle it again by repeating the same step.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todoList.toggleCompleted(1);&lt;/code&gt; will now return:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My Todos:
( ) first
( ) second
( ) third
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;interesting-observations&#34;&gt;Interesting observations&lt;/h3&gt;
&lt;p&gt;This step combined &lt;code&gt;for&lt;/code&gt; loops with &lt;code&gt;if else&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;For each &lt;code&gt;for&lt;/code&gt; loop we used logic to check if &lt;code&gt;todo.completed&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; – in which case we do one thing – or if it’s &lt;code&gt;false&lt;/code&gt;, in which case we do something else.&lt;/p&gt;
&lt;h2 id=&#34;v50-review&#34;&gt;v.5.0 Review&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.displayTodos&lt;/code&gt; now shows &lt;code&gt;todoText&lt;/code&gt; and not just the objects like before. It also tells us if our todo list is empty with a helpful message. And whether or not a todo has been completed.&lt;/p&gt;
&lt;p&gt;We wrote all our code in this version inside one method, &lt;code&gt;displayTodos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We combined &lt;code&gt;for&lt;/code&gt; loops with &lt;code&gt;if&lt;/code&gt; statements, so we can use logic in our program.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Head over to &lt;a href=&#34;https://watchandcode.com/&#34;&gt;Watchandcode.com&lt;/a&gt; to take the course that these notes are based on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Booleans</title>
      <link>https://azharkhan.in/notes/practical-javascript-booleans/</link>
      <pubDate>Sat, 03 Nov 2018 19:42:02 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-booleans/</guid>
      <description>&lt;p&gt;This is Part 4 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;. In this part we changed the structure of an array from a text value to an object, modify a method to work with a text property and learn about Booleans.&lt;/p&gt;
&lt;h2 id=&#34;building-a-todo-app-v40---understanding-booleans&#34;&gt;Building a todo app v4.0 - Understanding Booleans&lt;/h2&gt;
&lt;p&gt;Booleans are a representation of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;todoList.addTodo&lt;/code&gt; should add objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;todoList.changeTodo&lt;/code&gt; should change the todoText property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;todoList.toggleCompleted&lt;/code&gt; should change the completed property&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-todolistaddtodo-should-add-objects&#34;&gt;Step 1: todoList.addTodo should add objects&lt;/h2&gt;
&lt;p&gt;First we need to change the addTodo method from adding text items like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;…to adding objects like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Boolean true or false}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to do this so we can add as many properties as we like. The first property we want is a text value, for example the text we want to add.&lt;/p&gt;
&lt;p&gt;The second property is our Boolean value. This will tell us whether the todo has been completed on not. When you first add a todo it most likely won’t be done yet so we can use &lt;code&gt;false&lt;/code&gt; as the default stated of &lt;code&gt;completed&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Later when we go through our todos and mark as completed this value will change to &lt;code&gt;true&lt;/code&gt;. As this data requires a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value, representing it with a Boolean is the way to go.&lt;/p&gt;
&lt;h3 id=&#34;updating-our-code-from-v30&#34;&gt;Updating our code from v.3.0&lt;/h3&gt;
&lt;p&gt;This is where we left off in our version 3 app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First step is to remove the items in our existing array, as we now want to use an object instead.&lt;/p&gt;
&lt;p&gt;In the code above, change:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to modify our &lt;code&gt;addTodo&lt;/code&gt; function. Find the code which reads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And change it to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;   
    &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;    
    &lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A few things to note in our new code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We’re now using &lt;code&gt;todoText&lt;/code&gt; as our parameter instead of &lt;code&gt;todo&lt;/code&gt;. This will will also be a text value but more representative of the data in our object, which is next.&lt;/li&gt;
&lt;li&gt;Now instead of using the &lt;code&gt;push&lt;/code&gt; method to add &lt;code&gt;todo&lt;/code&gt;, we’re adding the object with 2 properties; &lt;code&gt;todoText&lt;/code&gt; and &lt;code&gt;completed&lt;/code&gt; which is our Boolean value.&lt;/li&gt;
&lt;li&gt;Remember; first &lt;code&gt;todoText&lt;/code&gt; is the name of the property, whereas the second &lt;code&gt;todoText&lt;/code&gt; is referring to the &lt;code&gt;todoText&lt;/code&gt; parameter, which will change depending on what we parse in when we use the method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example if we write &lt;code&gt;addTodo(&#39;hi&#39;);&lt;/code&gt; the value of &lt;code&gt;todoText&lt;/code&gt; will be &lt;code&gt;&#39;hi&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;   
  &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;    
  &lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-todolistaddtodo&#34;&gt;Using todoList.addTodo&lt;/h3&gt;
&lt;p&gt;Typing &lt;code&gt;todoList.addTodo(&#39;this is an object&#39;)&lt;/code&gt; will now represent the data in an object. Where &lt;code&gt;todoText&lt;/code&gt; is given the value &lt;code&gt;&#39;this is an object&#39;&lt;/code&gt; and &lt;code&gt;completed&lt;/code&gt; has the value of &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why-are-we-doing-this&#34;&gt;Why are we doing this?&lt;/h3&gt;
&lt;p&gt;We want our todos to show more data, we want to have a text description; the &lt;code&gt;todoText&lt;/code&gt; property and also another property to show whether the todo has be done or not; &lt;code&gt;completed&lt;/code&gt;. We’re using a Boolean value to represent that.&lt;/p&gt;
&lt;h2 id=&#34;step-2-todolistchangetodo-should-change-to-todotext-property&#34;&gt;Step 2: todoList.changeTodo should change to todoText property&lt;/h2&gt;
&lt;p&gt;Now we need to make sure the &lt;code&gt;changeTodo&lt;/code&gt; method only changes the &lt;code&gt;todoText&lt;/code&gt; property on each todo object.&lt;/p&gt;
&lt;p&gt;This is because &lt;code&gt;addTodo&lt;/code&gt; now adds objects to our array, and those objects have 2 properties; &lt;code&gt;todoText&lt;/code&gt; and &lt;code&gt;completed&lt;/code&gt; – the boolean true or false value.&lt;/p&gt;
&lt;h3 id=&#34;updating-the-newvalue-parameter&#34;&gt;Updating the newValue parameter&lt;/h3&gt;
&lt;p&gt;First, we need to update the &lt;code&gt;newValue&lt;/code&gt; parameter to something more descriptive, so its more clear whats happening. As we just want to change the todoText property, we can call it &lt;code&gt;todotext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, find the &lt;code&gt;newValue&lt;/code&gt; parameter in the code and change it to &lt;code&gt;todoText&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your code should now look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;update-thistodo-position-to-reference-the-todotext-property-in-the-object&#34;&gt;update this.todo position to reference the todoText property in the object&lt;/h3&gt;
&lt;p&gt;Next we need to modify &lt;code&gt;this.todo[position] = newValue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is because &lt;code&gt;newValue&lt;/code&gt; is no longer the parameter parsed in, it’s now &lt;code&gt;todoText&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;todoText&lt;/code&gt; is now a property on the object (in addTodo), we can get at it using the dot notation:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this.todo[postion].todoText = todoText&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In our changes above, &lt;code&gt;.todoText&lt;/code&gt; grabs the &lt;code&gt;todoText&lt;/code&gt; property on the object, and assigns it to the new value which is parsed in; &lt;code&gt;todoText&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our new code should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So to recap, the reason we’re doing this is because the structure of our data has changed from simple text values to an object structure.&lt;/p&gt;
&lt;h2 id=&#34;step-3-todolisttogglecompleted-should-change-value-of-completed-property&#34;&gt;Step 3: todoList.toggleCompleted should change value of completed property&lt;/h2&gt;
&lt;p&gt;Now we need to add a new method called toggleCompleted which switches the value of the completed property.&lt;/p&gt;
&lt;p&gt;Remember, completed is a Boolean value, so if it’s set to &lt;code&gt;false&lt;/code&gt; (as default), toggleCompleted will change it to &lt;code&gt;true&lt;/code&gt;, and if it’s &lt;code&gt;true&lt;/code&gt; it should change to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-bang-operator&#34;&gt;The Bang Operator&lt;/h3&gt;
&lt;p&gt;In Javascript, the Bang Operator (!) takes the opposite of whatever comes after it.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;We can get the opposite of &lt;code&gt;true&lt;/code&gt; with &lt;code&gt;!true&lt;/code&gt;, which returns &lt;code&gt;false&lt;/code&gt;. Where &lt;code&gt;!false&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can take this a step further:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;harryBoolean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;!harryBoolean&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;. What if we set &lt;code&gt;harryBoolean&lt;/code&gt; to the opposite of itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;harryBoolean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;harryBoolean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the exclamation point we can take the current value of a variable and switch it to the opposite value. We can use this technique in our &lt;code&gt;toggleCompleted&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;### Adding the toggleCompleted method&lt;/p&gt;
&lt;p&gt;Now let’s put this into practice and write a new method for &lt;code&gt;toggleCompleted&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;postion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, whats going on here?&lt;/p&gt;
&lt;h2 id=&#34;breaking-down-the-code&#34;&gt;Breaking down the code&lt;/h2&gt;
&lt;p&gt;First we add our new method fo &lt;code&gt;toggleCompleted&lt;/code&gt;, and give it a position so we can target the specific todo we want to modify:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we create a reference to our &lt;code&gt;todo&lt;/code&gt; in the form of a variable. This will save us from having to write this repetitive code in 2 different places. You’ll see what I mean in the line that will follow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we flip the value of &lt;code&gt;todo.completed&lt;/code&gt;, by grabbing the value of &lt;code&gt;todo.completed&lt;/code&gt; and setting it to the opposite of the current value using the bang operator. So if the value is &lt;code&gt;false&lt;/code&gt; it will be &lt;code&gt;true&lt;/code&gt; and if it’s &lt;code&gt;true&lt;/code&gt; it will be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we add the ability to display our updated changes with &lt;code&gt;displayTodos&lt;/code&gt;, again using &lt;code&gt;this&lt;/code&gt; to target the displayTodos method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;toggleCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;completed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;v40-review&#34;&gt;v.4.0 Review&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;todoList.addTodo&lt;/code&gt; we changed the structure of the array to be an array of objects, rather than text, this allowed for a text value and a boolean value, to specify whether the todo has been completed.&lt;/p&gt;
&lt;p&gt;Next, we modified the &lt;code&gt;todoList.changeTodo&lt;/code&gt; method so it only modifies the &lt;code&gt;todoText&lt;/code&gt; property on each todo object.&lt;/p&gt;
&lt;p&gt;Lastly we learnt about Booleans and how to take the opposite of a boolean value in our new &lt;code&gt;toggleComplete&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Head over to &lt;a href=&#34;https://watchandcode.com/&#34;&gt;Watchandcode.com&lt;/a&gt; to take the course that these notes are based on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>https://azharkhan.in/notes/practical-javascript-objects/</link>
      <pubDate>Mon, 29 Oct 2018 11:28:49 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-objects/</guid>
      <description>&lt;p&gt;This is Part 3 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;. This part focuses on turning the standalone functions created in &lt;a href=&#34;notes/gordon-zhus-practical-javascript-functions/&#34;&gt;part 2&lt;/a&gt; to methods on an Object.&lt;/p&gt;
&lt;p&gt;Objects are great for organisation and will allow you to group your functions together, so everything related to your todo list is in one place and easy to access.&lt;/p&gt;
&lt;h2 id=&#34;building-a-todo-app-v30----whats-an-object&#34;&gt;Building a todo app v3.0 -  What’s an Object?&lt;/h2&gt;
&lt;p&gt;You use Objects in Javascript to group related data and Functions together. Think about some real objects. Take your computer, for example.&lt;/p&gt;
&lt;p&gt;Your computer is a thing, or an ‘object’. And it has a certain set of unique properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;operatingSystem mac&lt;/li&gt;
&lt;li&gt;screenSize 15 inches&lt;/li&gt;
&lt;li&gt;purchaseYear 2015&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is data that is related to a specific object: &lt;strong&gt;myComputer&lt;/strong&gt;. Objects in Javascript are pretty much the same.&lt;/p&gt;
&lt;h2 id=&#34;writing-an-object&#34;&gt;Writing an Object&lt;/h2&gt;
&lt;p&gt;In Javascript, Curly braces can be used to group data in an Object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;operatingSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mac&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;screenSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;15 inches&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;purchaseYear&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2015&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each of these 3 things is called a &lt;code&gt;property&lt;/code&gt;. Each property needs to be separated by a comma. The format of the property needs to contain a name and a value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;propertyName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PropertyValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;operatingSystem: mac,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Any text value will need to be surrounded by quotes. A number doesn’t need quotes.&lt;/p&gt;
&lt;h2 id=&#34;using-an-object&#34;&gt;Using an Object&lt;/h2&gt;
&lt;p&gt;To use an Object you will need to assign it to a Variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myComputer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;operatingSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mac&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;screenSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;15 inches&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;purchaseYear&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2015&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you can type the variable in the console to retrieve the entire Object:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;myComputer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To print out a specific part of the Object. You can do that by aappending a period, then the property name to the variable like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;myComputer.operatingSystem&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;objects-and-functions&#34;&gt;Objects and Functions&lt;/h2&gt;
&lt;p&gt;Functions can be placed on Objects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;harry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Harry&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s optional to name functions on Objects. Most programmers leave out the name. Instead we can access the function by the property name.&lt;/p&gt;
&lt;p&gt;In other words,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;becomes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use &lt;code&gt;this&lt;/code&gt; to reference the Object you are on.&lt;/p&gt;
&lt;p&gt;So, when you use &lt;code&gt;this&lt;/code&gt; inside of a Function on an Object, &lt;code&gt;this&lt;/code&gt; refers to the entire Object.&lt;/p&gt;
&lt;p&gt;In this case, when we run our &lt;code&gt;sayName&lt;/code&gt; Function: &lt;code&gt;harry.sayName&lt;/code&gt; will print out the entire Object.&lt;/p&gt;
&lt;p&gt;To print out a property on the Object, for example the name only, you can add &lt;code&gt;.name&lt;/code&gt; to &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;harry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Harry&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;sayName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pattern of putting a function on an Object is a common pattern in Javascript, and is referred to as ‘a Method’. A Method is simply a property which is equal to a Function.&lt;/p&gt;
&lt;p&gt;In this case, &lt;code&gt;sayName&lt;/code&gt; is a Method, on the &lt;code&gt;harry&lt;/code&gt; Object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember, when you have a Function on an Object, you don’t need to give it a name as you can call it using the Property name. This is called an ‘Anonymous Function’.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;The requirements for this version is to put everything we’ve done so far onto an Object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should store the todos array on an Object&lt;/li&gt;
&lt;li&gt;It should have a displayTodos method&lt;/li&gt;
&lt;li&gt;It should have an addTodo method&lt;/li&gt;
&lt;li&gt;It should have a changeTodo method&lt;/li&gt;
&lt;li&gt;It should have a deleteTodo method&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will help us organise our code better. So everything related to our todo list will be on a todoList Object.&lt;/p&gt;
&lt;h2 id=&#34;step-1-store-todos-array-on-an-object&#34;&gt;Step 1: Store Todos array on an Object&lt;/h2&gt;
&lt;p&gt;In the previous version of our app we stored our todos array in a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For this version we need to take our Array and put the data onto an Object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access the data inside our program we need to give it a variable name, in this case &lt;code&gt;todoList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can now type &lt;code&gt;todoList&lt;/code&gt; in the console to retrieve the data.&lt;/p&gt;
&lt;h2 id=&#34;step-2-create-displaytodos-method&#34;&gt;Step 2: Create displayTodos method&lt;/h2&gt;
&lt;p&gt;Next we need to change displayTodos from the standard function we made in &lt;a href=&#34;notes/parctical-javascript-functions&#34;&gt;version 2&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;…to a method on our new todos object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To print out our todos on the console we type &lt;code&gt;todosList&lt;/code&gt; followed by the &lt;code&gt;displayTodos&lt;/code&gt; method, preppended with a dot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now see your todos.&lt;/p&gt;
&lt;h3 id=&#34;things-to-note&#34;&gt;Things to note&lt;/h3&gt;
&lt;p&gt;One difference from &lt;a href=&#34;notes/parctical-javascript-functions&#34;&gt;version 2&lt;/a&gt; is that we’re now using an anonymous function, as functions don’t need to be named when they’re a method. This is because when we run the function we use the property name instead, in this case &lt;code&gt;displayTodos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another difference is we’re now using &lt;code&gt;this.todos&lt;/code&gt; instead of &lt;code&gt;todos&lt;/code&gt;, as we no longer have the &lt;code&gt;todos&lt;/code&gt; variable. The  &lt;code&gt;this.&lt;/code&gt; keyword allows us to refer to the &lt;code&gt;todos&lt;/code&gt; property on the object we’re on.&lt;/p&gt;
&lt;h2 id=&#34;step-3-create-an-addtodo-method&#34;&gt;Step 3: Create an addTodo method&lt;/h2&gt;
&lt;p&gt;Now we need to change the addTodo function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;…to an Method on our todoList Object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;code&gt;todos&lt;/code&gt; and &lt;code&gt;displayTodos&lt;/code&gt; are on this Object, we need to prepend with the &lt;code&gt;this.&lt;/code&gt; keyword to reference those two properties. Otherwise it works exactly the same, just using an anonymous function, like in the previous step.&lt;/p&gt;
&lt;p&gt;Now you can use the addTodo method and add todos by typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;New Todo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where ‘New Todo’ is the new value you would like to add.&lt;/p&gt;
&lt;h2 id=&#34;step-4-create-a-changetodo-method&#34;&gt;Step 4: Create a changeTodo method&lt;/h2&gt;
&lt;p&gt;Next we need to turn our changeTodo function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;…into a method on our object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now start to see the pattern; when you want to reference something on an object, use &lt;code&gt;this.&lt;/code&gt;, to refer to the object itself.&lt;/p&gt;
&lt;p&gt;In this case we prefixed &lt;code&gt;todos&lt;/code&gt; and &lt;code&gt;displayTodos&lt;/code&gt; with &lt;code&gt;this.&lt;/code&gt; because they are both already on the object.&lt;/p&gt;
&lt;p&gt;Now change a todo by running the change todo method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where ‘0’ is the position of the todo (remember javaScript starts counting from  zero), and ‘first’ is the new value of the todo at position zero.&lt;/p&gt;
&lt;h2 id=&#34;step-5-create-a-deletetodo-method&#34;&gt;Step 5: Create a deleteTodo method&lt;/h2&gt;
&lt;p&gt;Finally, we need to make our deleteTodo function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
   &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
   &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;…into a method on our object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; 
  &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;  
  &lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;postion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;  
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar to before, to delete an item in the todo list, use the todoList object and prepend the deleteTodo method, specifying to position of the item you wish to delete:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todoList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case we delete the second item.&lt;/p&gt;
&lt;p&gt;By now you should see the pattern. The only real difference in a method on an object from a standalone function is that we need to add &lt;code&gt;this.&lt;/code&gt;, so we can reference the appropriate data on the object. This is true for all our methods in our &lt;code&gt;todoList&lt;/code&gt; object.&lt;/p&gt;
&lt;h2 id=&#34;v30-review&#34;&gt;v.3.0 Review&lt;/h2&gt;
&lt;p&gt;Now all our code is on an object, this is good for code organisation, as all code related to our &lt;code&gt;todoList&lt;/code&gt; is grouped together.&lt;/p&gt;
&lt;p&gt;We practiced writing methods, which are simply functions on objects.&lt;/p&gt;
&lt;p&gt;Remember if you want to refer to the object itself, inside a method you need to use the &lt;code&gt;this&lt;/code&gt; keyword, &lt;code&gt;this&lt;/code&gt; refers to the entire method. Using the dot notation (the period; &lt;code&gt;this.&lt;/code&gt;) allows us to reference different properties on this object.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Head over to &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Watchandcode.com&lt;/a&gt; to take the course that these notes are based on.&lt;/p&gt;
&lt;p&gt;I highly recommend Gordon’s teaching style to anyone who has struggled to grasp common JS principles in the past. Gordon uses some of the best examples I’ve seen to explain JavaScript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://azharkhan.in/notes/parctical-javascript-functions/</link>
      <pubDate>Mon, 30 Jul 2018 09:40:59 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/parctical-javascript-functions/</guid>
      <description>&lt;p&gt;This is Part 2 of my notes on Gordon Zhu’s &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;, in this part we focus on improving our Todo App by using Functions to make our commands easier to write. Here’s &lt;a href=&#34;notes/practical-javascript-arrays/&#34;&gt;Part 1&lt;/a&gt; incase you missed it.&lt;/p&gt;
&lt;h2 id=&#34;building-a-todo-app-v20&#34;&gt;Building a todo app v2.0&lt;/h2&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Functions are recipes”
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash; Gordon Zhu&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;Functions are like recipes; a set of instructions which can be given to someone so they know exactly what to do or how to make something.&lt;/p&gt;
&lt;p&gt;The point of a Function is to save you time, by distilling a long list of instructions into a single command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;makeTurkeySandwich
  Get one slice of bread
  Add turkey
  Put slice of bread on top
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In Javascript that would look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeTurkeySandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;one&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;turkey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Put&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bread&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run every step within a function use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;makeTurkeySandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;customising-functions&#34;&gt;Customising functions&lt;/h2&gt;
&lt;p&gt;Instead of writing several functions for each recipe (e.g turkey, ham, beef) we can use one function and customise the filling by using a variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;makeSandwichWith ________
  Get one slice of bread;
  Add _______;
  Put slice of bread on top;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In JS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;makeTurkeySandwich&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filling&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;one&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filling&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Put&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bread&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;filling&lt;/code&gt; variable is whats know as a &lt;strong&gt;Parameter&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;makeSandwichWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ham&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using the function the variable is what’s known as an &lt;strong&gt;Argument&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;In this project we want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should have a function to display todos&lt;/li&gt;
&lt;li&gt;It should have a function to add new todos&lt;/li&gt;
&lt;li&gt;It should have a function to change a todo&lt;/li&gt;
&lt;li&gt;It should have a function to delete a todo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our functions will simplify complex tasks; turning a list of instructions into one simple command.&lt;/p&gt;
&lt;h2 id=&#34;step-1-display-todos&#34;&gt;Step 1: Display Todos&lt;/h2&gt;
&lt;p&gt;In the console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;item1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;item2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;item3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My Todos:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Tip: to create multiple lines in Console use &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;enter&lt;/code&gt;&lt;/em&gt;
Then hit enter. Now the function is ready to use.&lt;/p&gt;
&lt;p&gt;To display todos call the function with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function will now display:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;My&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-add-new-todos&#34;&gt;Step 2: Add new Todos&lt;/h2&gt;
&lt;p&gt;To add new todos to the Array of todos, first create a new function called &lt;code&gt;addTodo&lt;/code&gt; and use the &lt;code&gt;push&lt;/code&gt; method from version 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;new todo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;addTodo()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will add &lt;code&gt;new todo&lt;/code&gt; to the array of todos. To see the updated Array use the &lt;code&gt;displayTodos&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hit enter and you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My todos: [&#39;item1&#39;, &#39;item2&#39;, &#39;item3&#39;, &#39;new todo&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;functions-within-functions&#34;&gt;Functions within functions&lt;/h3&gt;
&lt;p&gt;Now we can add the &lt;code&gt;displayTodos&lt;/code&gt; function to the &lt;code&gt;addTodos&lt;/code&gt; function. This way we can immediately see our updated todos Array right after we run &lt;code&gt;addTodos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Press the up arrow a few times to pull up the addTodo function. At the end of the first statement add the &lt;code&gt;displayTodos&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;new todo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;parameter-in-functions&#34;&gt;Parameter in Functions&lt;/h3&gt;
&lt;p&gt;So we don’t keep adding &lt;code&gt;new todo&lt;/code&gt; to the Array each time we use our &lt;code&gt;addTodo&lt;/code&gt; function, create a new variable (parameter) to customise the todo.&lt;/p&gt;
&lt;p&gt;We can call it &lt;code&gt;todo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we run the function we need to parse an argument.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello there&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hit enter and you should see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My todos: [&#39;item1&#39;, &#39;item2&#39;, &#39;item3&#39;, &#39;new todo&#39;, &#39;hello there&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this part we’ve learnt how to customise functions with parameters and how to use those parameters. And how to use functions within functions.&lt;/p&gt;
&lt;h2 id=&#34;step-3-change-a-todo&#34;&gt;Step 3: Change a Todo&lt;/h2&gt;
&lt;p&gt;Create a function to change our todo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;//statement goes here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we used the method from [Version 1], our function might look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;some new value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But we will need more flexibility in order to target a specific todo item, as currently &lt;code&gt;0&lt;/code&gt; will only target the first todo item.&lt;/p&gt;
&lt;p&gt;We can use parameters again to customise the behaviour of our function.&lt;/p&gt;
&lt;p&gt;The 2 parts we need to customise are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the item&lt;/li&gt;
&lt;li&gt;the value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily functions can take multiple parameters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now hit enter to save the &lt;code&gt;changeTodo&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To change the first todo item we can use our function and parse the &lt;code&gt;position&lt;/code&gt; parameter, in this case &lt;code&gt;0&lt;/code&gt; and then the &lt;code&gt;newValue&lt;/code&gt; parameter. In this case we’ll call it ‘changed‘.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changed&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My todos: [&#39;changed&#39;, &#39;item2&#39;, &#39;item3&#39;, &#39;new todo&#39;, &#39;hello there&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As before, we can automatically display the updated todo item Array by adding the &lt;code&gt;displayTodos&lt;/code&gt; function after the first statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run the function to display the changed Todo. this time call the first item &lt;code&gt;changed again&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changed&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;again&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My todos: [&#39;changed again&#39;, &#39;item2&#39;, &#39;item3&#39;, &#39;new todo&#39;, &#39;hello there&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To recap, we wrote a change todo function which takes 2 parameters, &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;newValue&lt;/code&gt;. We used the &lt;code&gt;displayTodos&lt;/code&gt; functions to see the changes.&lt;/p&gt;
&lt;h2 id=&#34;step-4-delete-a-todo&#34;&gt;Step 4: Delete a todo&lt;/h2&gt;
&lt;p&gt;As before, create a new function to delete todos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// statement goes here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the &lt;code&gt;splice&lt;/code&gt; method/command from [Version 1] we can set the ‘position’ and the ‘number of items’ we want to delete.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, to make this flexible we can use custom parameters like we did last time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember to add the &lt;code&gt;displayTodos&lt;/code&gt; function so we can see what’s happened.&lt;/p&gt;
&lt;p&gt;Now run the function and delete the first item from the item Array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;deleteTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My todos: [&#39;item2&#39;, &#39;item3&#39;, &#39;new todo&#39;, &#39;hello there&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let’s delete &lt;code&gt;new todo&lt;/code&gt;, the 3rd item in the todos Array.&lt;/p&gt;
&lt;p&gt;Remember computers start counting from 0, so this will be item 2 in our Array.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;deleteTodo(2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should now see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;My todos: [&#39;item2&#39;, &#39;item3&#39;, &#39;hello there&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;v20-review&#34;&gt;v2.0 Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It should have a function to display todos&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a function to add new todos&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a function to change a todo&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a function to delete a todo&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we’ve learnt so far:&lt;/p&gt;
&lt;p&gt;First we created our Todos Array so we have some data to work with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;item 1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;item 2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;item 3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we created a function to &lt;em&gt;display todos&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It should have a function to display todos
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;My Todos:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This logged out the list of todos.&lt;/p&gt;
&lt;p&gt;Then we created a function to &lt;em&gt;add todos&lt;/em&gt; which took a parameter, so we could provide a value for the new todo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It should have a function to add todos
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way we can write &lt;code&gt;addTodo(&#39;new todo&#39;)&lt;/code&gt; to create a new todo called ‘new todo’. Adding the &lt;code&gt;displayTodos&lt;/code&gt;function allows us to see our changes.&lt;/p&gt;
&lt;p&gt;From here we crated a &lt;em&gt;change todo&lt;/em&gt; function, to allow us to make changes to existing todos in the Array. this function took 2 parameters, for position and value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It should have a function to change todos
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;changeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;postion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We displayed todos again so we can immediately see the changes.&lt;/p&gt;
&lt;p&gt;Finally we create a simple function to delete todos which too 1 parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It should have a function to delete todos
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;deleteTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;displayTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Todo app v2.0 done!&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;practical-javascript-objects&#34;&gt;Part 3&lt;/a&gt; looks Objects, what they are and at how we can use them to improve our todo list app. We’ll turn the functions we’ve made so far into methods on an Object.&lt;/p&gt;
&lt;p&gt;Head over to &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Watchandcode.com&lt;/a&gt; to take the course. I highly recommend Gordon’s teaching style to anyone who has struggled to grasp common JS principles in the past. Gordon uses some of the best examples I’ve seen to explain JavaScript.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://azharkhan.in/notes/practical-javascript-arrays/</link>
      <pubDate>Thu, 19 Jul 2018 14:49:54 +0200</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/practical-javascript-arrays/</guid>
      <description>&lt;p&gt;These are my notes from Gordon Zhu’s course &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Practical JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;JavaScript always been my weakest link so lately I’ve been taking the time to revisit many concepts I’ve otherwise skipped in the past.&lt;/p&gt;
&lt;p&gt;I highly recommend the course if you’re just getting started or looking to brush up on your Javascript programming. It’s video based and 100% free! This first part looks at working with Arrays directly from the console in the browser.&lt;/p&gt;
&lt;p&gt;For those new to this stuff; from any webpage &lt;em&gt;right click &amp;gt; Inspect Element&lt;/em&gt; to open the console.&lt;/p&gt;
&lt;h2 id=&#34;project-requirements&#34;&gt;Project Requirements&lt;/h2&gt;
&lt;p&gt;Creating a requirement list will help you focus on one specific thing at a time. It’s easy to get side-tracked if you don’t do this.&lt;/p&gt;
&lt;p&gt;This will help you debug and test your app and think in a more modular manner. Breaking large tasks into smaller pieces will make programming your app more manageable. The more specific you can make your requirements the better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should have a place to store todos&lt;/li&gt;
&lt;li&gt;It should have a way to display todos&lt;/li&gt;
&lt;li&gt;It should have a way to add new todos&lt;/li&gt;
&lt;li&gt;It should have a way to change a todo&lt;/li&gt;
&lt;li&gt;It should have a way to delete a todo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;app-version-10--arrays&#34;&gt;App Version 1.0 – Arrays&lt;/h2&gt;
&lt;p&gt;In programming, lists are called Arrays. From the console in Chrome:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;storing-todos&#34;&gt;Storing todos&lt;/h3&gt;
&lt;p&gt;Create a variable to store the array so we can call it again and reuse it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;displaying-todos&#34;&gt;Displaying todos&lt;/h3&gt;
&lt;p&gt;Display the Array with &lt;code&gt;todos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now pass the variable into the &lt;code&gt;Console.log&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: variables don’t require quotes. Surronding todos in quotes; ‘todos’ would print the string &lt;strong&gt;todos&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-new-todos&#34;&gt;Add new todos&lt;/h3&gt;
&lt;p&gt;By binding the variable with the command &lt;code&gt;push&lt;/code&gt; we can add new items to an Array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Console will display the number of items.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos&lt;/code&gt; will now display &lt;code&gt;[&#39;item 1&#39;, &#39;item 2&#39;, &#39;item 3&#39;, &#39;item 4&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;change-a-todo&#34;&gt;Change a todo&lt;/h3&gt;
&lt;p&gt;To change a todo we need to first get hold of the specific item we want to change.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos[0]&lt;/code&gt; will get hold of &lt;code&gt;&#39;item 1&#39;&lt;/code&gt;,
&lt;code&gt;todos[4]&lt;/code&gt; will get hold of &lt;code&gt;&#39;item 4&#39;&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Unlike humans who start from 1, computers start counting from 0.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Add a new value in the specific todo item, use &lt;code&gt;=&lt;/code&gt; followed baby the new value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos[0] = &#39;item 1 updated&#39;&lt;/code&gt; will update &lt;code&gt;&#39;item 1&#39;&lt;/code&gt; in the Array.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos&lt;/code&gt; will now display the update Array showing the new value for &lt;code&gt;item 1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item 1 updated&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deleting-a-todo&#34;&gt;Deleting a todo&lt;/h3&gt;
&lt;p&gt;To delete an item in an Array you can use the command &lt;code&gt;splice&lt;/code&gt;, similar to how we used the &lt;code&gt;push&lt;/code&gt; command to add an item.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos.splice()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To delete the first item in the Array use &lt;code&gt;0&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos.splice(0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then tell &lt;code&gt;splice&lt;/code&gt; the number of items you want to delete. In this case it’s 1.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;todos.splice(0, 1)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;v10-review&#34;&gt;v1.0 Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;It should have a place to store todos&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a way to display todos&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a way to add new todos&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a way to change a todo&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;It should have a way to delete a todo&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What We’ve learnt so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store Arrays using Variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;item1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;item 4&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Display Array with &lt;code&gt;console.log&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;My Todos:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Add todos:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;new todo item&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Change a todo:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;todos[0] = &lt;/code&gt; changed todo!`&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete todos:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;todos.splice(0, 1)&lt;/code&gt; Where &lt;code&gt;0&lt;/code&gt; specifies the particular item and &lt;code&gt;1&lt;/code&gt; specifies the number of items to delete.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;notes/parctical-javascript-functions&#34;&gt;Part 2&lt;/a&gt; looks at improving the app using Functions.&lt;/p&gt;
&lt;p&gt;These notes are based on Practical Javascript by Gordo Zhu. head over to &lt;a href=&#34;https://watchandcode.com/p/practical-javascript&#34;&gt;Watchandcode.com&lt;/a&gt; to enroll for free.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What can we learn from shortcuts?</title>
      <link>https://azharkhan.in/notes/what-can-we-learn-from-shortcuts/</link>
      <pubDate>Fri, 27 Apr 2018 23:25:36 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/what-can-we-learn-from-shortcuts/</guid>
      <description>&lt;p&gt;These are my notes from &lt;a href=&#34;https://www.ted.com/talks/tom_hulme_what_can_we_learn_from_shortcuts&#34;&gt;What can we learn from shortcuts&lt;/a&gt;, a TED Talk by designer and Google Ventures Partner &lt;a href=&#34;https://twitter.com/thulme&#34;&gt;Tom Hulme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“Empathy for what your customers want is the biggest leading indicator of business success“&lt;/p&gt;
&lt;p&gt;How do you build a product people really want? Allow consumers to be a part of the process.&lt;/p&gt;
&lt;p&gt;Shortcuts are desire paths — often the path of least resistance.
The point where design and user experience diverge.&lt;/p&gt;
&lt;h2 id=&#34;applying-this-to-launching-products&#34;&gt;Applying this to launching products&lt;/h2&gt;
&lt;p&gt;Design for a real need at low friction.&lt;/p&gt;
&lt;p&gt;People are resourceful, they will always find the low friction routes, to save money and time.&lt;/p&gt;
&lt;p&gt;Observing the user behaviour will help you design better products.&lt;/p&gt;
&lt;p&gt;Co-design with the user.&lt;/p&gt;
&lt;p&gt;Launch and learn. Launching early will teach you what people really want. It’s an efficient way of spotting desire paths.&lt;/p&gt;
&lt;p&gt;The worlds in flux, respond to changes.&lt;/p&gt;
&lt;p&gt;Watch for desire paths to emerge, then take the appropriate action.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design for real life: for real human needs&lt;/li&gt;
&lt;li&gt;Empathy for what your customers want is the biggest leading indicator of business success&lt;/li&gt;
&lt;li&gt;Design in low friction&lt;/li&gt;
&lt;li&gt;launch and learn: The answer is out there, not inside the building. Observer users behaviour to find out what they really want&lt;/li&gt;
&lt;li&gt;stay responsive: respond to change&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building With Your Users</title>
      <link>https://azharkhan.in/notes/building-with-your-users/</link>
      <pubDate>Thu, 15 Mar 2018 11:18:40 +0000</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/building-with-your-users/</guid>
      <description>&lt;p&gt;”Build with your users, get quick feedback loops, and iterate after. We are so biased and imperfect as humans that it&amp;rsquo;s impossible to get it right from the start. Also, you might get it right, but you might miss other bigger opportunities. Focus, start quickly, and put your product in front of users and let the free market destroy it or love it.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This was taken from an interview with &lt;a href=&#34;https://twitter.com/vinrob&#34;&gt;Robin Vander Heyden&lt;/a&gt; on &lt;a href=&#34;https://www.indiehackers.com/&#34;&gt;Indie hackers&lt;/a&gt; where he discusses the success of his company &lt;a href=&#34;https://www.manypixels.co/&#34;&gt;ManyPixels&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiehackers.com/interview/finding-inspiration-abroad-shipping-fast-and-growing-to-50k-mo-e55f6feafd&#34;&gt;Finding Inspiration Abroad, Shipping Fast, and Growing to $50k/mo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1,000 true fans</title>
      <link>https://azharkhan.in/notes/1000-fans/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/1000-fans/</guid>
      <description>&lt;p&gt;If you have roughly a thousand true fans (or  super fans), you can make a living — if you are content to make a living but not a fortune.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;true fan&lt;/em&gt; is defined as a fan that will buy anything you produce.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to create enough each year that you can earn, on average, $100 profit from each true fan.&lt;/li&gt;
&lt;li&gt;You must have a direct relationship with your fans — i.e they must pay you directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you keep the full $100 of each true fan, then you need only 1,000 of them to earn $100,000 per year. That’s a living for most folks.&lt;/p&gt;
&lt;p&gt;A thousand customers is a whole lot more feasible to aim for than a million fans.&lt;/p&gt;
&lt;p&gt;The number 1,000 is not absolute — I.e if you only earn $50 per year per true fan then you would need 2,000 fans.&lt;/p&gt;
&lt;p&gt;This idea has been made possible by peer-to-peer communication and payment systems — in other words the internet.&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            “Everyone has access to excellent tools that allow anyone to sell directly to anyone else in the world.”
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash; Kevin Kelly&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;This new technology permits creators to maintain relationships, so that the customer can become a fan, and so that the creator keeps the total amount of payment, which reduces the number of fans needed.&lt;/p&gt;
&lt;p&gt;Whatever your interests as a creator are, your 1,000 true fans are one click from you. As far as I can tell there is nothing — no product, no idea, no desire — without a fan base on the internet. Every thing made, or thought of, can interest at least one person in a million — it’s a low bar.&lt;/p&gt;
&lt;h2 id=&#34;takeaway&#34;&gt;Takeaway&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1,000 true fans is an alternative path to success other than stardom.&lt;/li&gt;
&lt;li&gt;Instead of trying to reach the narrow and unlikely peaks of platinum bestseller hits, blockbusters, and celebrity status, you can aim for direct connection with a thousand true fans.&lt;/li&gt;
&lt;li&gt;On your way, no matter how many fans you actually succeed in gaining, you’ll be surrounded not by faddish infatuation, but by genuine and true appreciation.&lt;/li&gt;
&lt;li&gt;It’s a much saner destiny to hope for. And you are much more likely to actually arrive there.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Content Machine</title>
      <link>https://azharkhan.in/notes/content-machine/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/content-machine/</guid>
      <description>&lt;p&gt;Notes taken from &lt;a href=&#34;https://www.goodreads.com/book/show/36603232-content-machine?from_search=true&#34;&gt;Content Machine&lt;/a&gt; by Dan Norris.&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;p&gt;There is no point at all in generating mediocre content. Don’t just write about your business or your product. Your content has to be educational and solve problems.&lt;/p&gt;
&lt;p&gt;Talk to potential customers and figure out what they want. Throw away everything you learned in school. Writing content is a two-way conversation, not a speech. Be personal and make people feel like you are there with them.&lt;/p&gt;
&lt;p&gt;Quality Over Quantity&lt;/p&gt;
&lt;p&gt;I loved creating the content, but there was a problem. I measured myself based on how much content I created, not how much traction that content got. The quantity, not the quality.&lt;/p&gt;
&lt;p&gt;eventually worked out that one spectacularly successful piece of content was infinitely more valuable than 100 pieces of content that go unnoticed.&lt;/p&gt;
&lt;p&gt;Content marketing is releasing something interesting that grabs attention for a business and builds trust.&lt;/p&gt;
&lt;p&gt;The most important pieces of the content marketing definition are attention and trust.&lt;/p&gt;
&lt;p&gt;You want to put out content that helps people, gets them to pay attention to you and your business, and, over time, garners their trust.&lt;/p&gt;
&lt;p&gt;These people become part of your community, they help promote your content, refer people to your business, and may even become partners or customers.&lt;/p&gt;
&lt;p&gt;You have assumed that your job is to create content, when really your job is to market a business.&lt;/p&gt;
&lt;p&gt;Creating great content is not enough, because without a great business, you are sending attention to something that is broken (or non-existent).&lt;/p&gt;
&lt;p&gt;10 Characteristics Of A High-Growth Business&lt;/p&gt;
&lt;p&gt;If these are not present in your business, you will struggle to make any form of marketing work.&lt;/p&gt;
&lt;p&gt;If you are going to focus on building a content machine, you need something that will grow without your constant attention.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They Are Fundamentally Profitable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the profit margin in your business is set so you are unable to replace yourself and still make a profit, then you are in trouble.&lt;/p&gt;
&lt;p&gt;Here’s a very simple calculation I recommend every business owner should perform: Figure out everything that goes into serving a customer. How many hours will you need from X, Y, and Z staff members to complete the tasks, and how much do those staff members cost. Imagine your business is at a reasonable size, and that you have all of the tools and technologies necessary to manage a decent number of clients. Distribute the costs across those clients to come up with a rough idea of how much it’s going to cost to deliver your service. Take that number and, at the very least, double it. That is your price.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;They Operate In A Large Market&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Common business advice tells you to find a small niche and go after it. I don’t like this advice, and I don’t see successful high-growth companies doing it.&lt;/p&gt;
&lt;p&gt;Being in a large market has resulted in constant, high, and at times almost unmanageable growth.&lt;/p&gt;
&lt;p&gt;Notes: 1) large market means bigger reach, so leads to more growth, also allows  for more varied content&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;They Naturally Build Assets Over Time&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All high-growth companies have some sort of assets that set them apart from their competition.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;They Have a Simple, Relatable Differentiator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;high-growth companies tend to go after existing problems, and they solve them with a unique twist.&lt;/p&gt;
&lt;p&gt;Here are some examples: WP Curve: Like a developer except unlimited fixes 24/7.  Uber: Like taxis except cleaner, safer, cheaper, nice smelling, and they actually arrive.  Airbnb: Like hotels except you get more for less.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;They Focus On Growing Consistent Revenue At a High Lifetime Value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Businesses that are successful in the long term generally have a predictable revenue model.&lt;/p&gt;
&lt;p&gt;You can invest in tools, technology, and people that you need to grow, because you are confident you will be able to afford it next month. You can say “no” to certain customers or projects, because you already have a good solid base of revenue. You can accurately estimate your profit margin and your cashflow.&lt;/p&gt;
&lt;p&gt;Building a business by selling a one off $20 product is going to be a lot tougher than a business that sells an $80 monthly subscription.&lt;/p&gt;
&lt;p&gt;lifetime value,&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;They Invest In A Memorable Brand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They Are Started By A Team, Not An Individual&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s extremely rare for a decent company to be built by an individual and not a founding team. Just look at the startup world for guidance.&lt;/p&gt;
&lt;p&gt;Like every entrepreneur, I tend to think I can do everything and am “a jack of all trades”. But I had zero success until I started businesses with other people.&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;They Know How To Say “No,” And They Do It Often&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Great businesses choose what they are going to do, and they do it extremely well. It takes a long time, generally a lot of people, and a lot of money to truly achieve “world class” status. If your business has multiple focuses rather than one main task, it might be a sign that you are in trouble.&lt;/p&gt;
&lt;p&gt;Learn how to say “no”. Instead, reach “world class” status at one thing.&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;They Understand The Power Of Monthly Growth&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don’t think so much about how much money you will make in a year. Think about how much you will grow every single month, and before you know it your business will be significantly bigger.&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;They Think “Long Term”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Great businesses avoid get-rich-quick schemes and over-optimization. They focus on solid, long-term strategies.&lt;/p&gt;
&lt;p&gt;Getting in the press, building a public profile, putting out useful content, fostering important relationships, and developing a great company culture are all examples of solid long-term strategies. These aren’t going to result in quick wins, but they are what creates great companies.&lt;/p&gt;
&lt;p&gt;Monetization Logic&lt;/p&gt;
&lt;p&gt;Monetization logic is a simple “Yeah that makes sense” test that is often missing from people’s content marketing efforts. The easiest way to determine whether it exists is to ask the question, “Does it make sense that someone would consume this content and then go on to become a customer?”&lt;/p&gt;
&lt;p&gt;There needs to be a logical link between your content, your audience, and whatever it is you are selling.&lt;/p&gt;
&lt;p&gt;Content marketing, by its nature, is a long-term exercise. Most top blogs create content for months or years before they hit traction.&lt;/p&gt;
&lt;p&gt;Content marketing is about building trust, and you can’t build trust overnight.&lt;/p&gt;
&lt;p&gt;work.  It takes a while for some channels to kick in.&lt;/p&gt;
&lt;p&gt;It takes a long time to endear a valuable community member.&lt;/p&gt;
&lt;p&gt;It takes time to find your place. I’ve mentioned how critical it is to work out your core vision and work out what your audience loves.&lt;/p&gt;
&lt;p&gt;Good content breeds more good content.&lt;/p&gt;
&lt;p&gt;Remember, you don’t want to spit out just any content at a rapid speed. You want to do it with direction.&lt;/p&gt;
&lt;p&gt;The 10-Minute Content Strategy&lt;/p&gt;
&lt;p&gt;You need to define a strategy and then build processes around that strategy.&lt;/p&gt;
&lt;p&gt;I’ve included a free ten-minute content marketing strategy template at &lt;a href=&#34;http://contentmachine.com/resources&#34;&gt;http://contentmachine.com/resources&lt;/a&gt; for you to work through. Here are the components:&lt;/p&gt;
&lt;p&gt;Vision – What is your blog about when it reaches its full potential?&lt;/p&gt;
&lt;p&gt;Values – What are the key values that will inform your content choices?&lt;/p&gt;
&lt;p&gt;Inspirations – Where do you look for inspiration (design, content, voice, etc.)?&lt;/p&gt;
&lt;p&gt;Strategy Comment – Do you have a high-level description of the overall strategy behind the blog?&lt;/p&gt;
&lt;p&gt;Target Communities – What groups of people are you creating content for, and where do they hang out?&lt;/p&gt;
&lt;p&gt;Differentiators – How will this blog be different from what is already available?&lt;/p&gt;
&lt;p&gt;Unfair Advantage – What about you, your business, your style, your team, etc. gives you an advantage?&lt;/p&gt;
&lt;p&gt;Key Relationships – Who are the big influencers capable of boosting your content&lt;/p&gt;
&lt;p&gt;If you are struggling, check out Followerwonk or Little Bird.&lt;/p&gt;
&lt;p&gt;Metrics – How will you know when your content is successful? If in doubt, use my three key metrics of total shares, comments, and email replies (more on these later).&lt;/p&gt;
&lt;p&gt;Lead Magnets and CTAs (Calls to Action) – What items can you use to encourage people to opt in, and what will your CTA be?&lt;/p&gt;
&lt;p&gt;Your Content Vision&lt;/p&gt;
&lt;p&gt;It’s going to be very hard to make a content marketing strategy work if you aren’t clear on the end game. A good way to think about your vision is answering the question, “What will I/we stand for?”&lt;/p&gt;
&lt;p&gt;Often they didn’t agree, and they left passionate replies to that effect. But they were interested. They were engaged. Radical transparency became a theme.&lt;/p&gt;
&lt;p&gt;Giving away detailed processes or tools that have helped us grow is another important factor.&lt;/p&gt;
&lt;p&gt;What is the vision for your content? What will separate it from others in your industry? What do you believe will influence your content strategy?&lt;/p&gt;
&lt;p&gt;people aren’t simply writing blog posts. They have defined a community to help, and they are executing on a broad vision. They believe something about what people want and aren’t currently getting. And they are using their unique advantage to fill that gap.&lt;/p&gt;
&lt;p&gt;There are two ways to define who you are creating content for. One is to come up with a “Customer Avatar” that describes exactly who your ideal customer is, what their wants and needs are, and what they are looking for in your content.&lt;/p&gt;
&lt;p&gt;Your ideal customers will hear about you over a long period of time, through multiple sources, and that is how trust is built.&lt;/p&gt;
&lt;p&gt;way to define who you are creating content for—is to choose a community and help them with what they need.&lt;/p&gt;
&lt;p&gt;Don’t be picky about whether each piece of content is generating leads. Just create as much value as you can for the most amount of people in your chosen community.&lt;/p&gt;
&lt;p&gt;Give away as many useful things as you can, create content that people can really relate to, and if possible, offer a unique perspective that people haven’t come across before.&lt;/p&gt;
&lt;p&gt;Great content is something you provide to your audience that captures their attention and encourages them to engage and share.&lt;/p&gt;
&lt;p&gt;Lessons Learned From Bad And Good Content&lt;/p&gt;
&lt;p&gt;Since poor quality is one of the top causes of failed content, there is one question you have to keep coming back to: Is my content actually good?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t Be Afraid To Go Outside Your Niche&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Creating niche-specific content is the easy option, and it will be the first thing your competitors do. Get the jump on them by going outside this content to more interesting topics.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Care About Your Community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ask them what their problems are and what they need help with. Ask them what other sites they like and pay attention to what they share.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Be More Generous&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Content marketing is a trust-building exercise, so the more generosity the better. In the next chapter, I will tell you about how I was inspired by Noah Kagan’s appearance on the Smart Passive Income Podcast.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Be More Transparent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Being transparent is a natural trust builder. Transparency in business has become a trend of late, and it’s a trend I have been very keen to embrace.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Be More Contrarian&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Offering a contrarian view got me a lot of attention. At the time of release the only startup book outranking it on Amazon was Zero To One, a book about how to build a business by being contrarian.&lt;/p&gt;
&lt;p&gt;It’s not essential that all of your content disagrees with everyone. It’s just one way to get noticed,&lt;/p&gt;
&lt;p&gt;Thought leaders like Tony Robbins and Seth Godin use this technique all the time. “Most people think X, but actually…” If you are one of the people that think X, then you certainly need to pay attention to why Tony thinks you are wrong.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Be More Actionable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;someone can take what you have produced and use it in their life.&lt;/p&gt;
&lt;p&gt;a list of top ten mistakes to avoid when writing a sales letter is interesting. An actual sales letter template which walks people through how to structure their own sales letter is truly actionable, because people can take it and use it.&lt;/p&gt;
&lt;p&gt;That’s why I’ve included lots of frameworks in this book. The book itself might be interesting, but I want you to take action on the information. The frameworks enable you to do that.&lt;/p&gt;
&lt;p&gt;If you can create content that is legitimately actionable, it will get consumed more, shared more, and it will convert more readers to active community members or eventually customers.&lt;/p&gt;
&lt;p&gt;Think about how people will use your content and what you can do to make it more likely that they will actually use it.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Tell A Better Story&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Storytelling is a great way to capture and hold people’s attention. It’s been proven over generations and is a simple strategy for you to use with your content.&lt;/p&gt;
&lt;p&gt;Have a look at this line chart that represents the story of Cinderella as designed by Kurt Vonnegut. 2&lt;/p&gt;
&lt;p&gt;Learn about storytelling models that would work for your topic areas and figure out a way to tell your story in a way that people can relate to.&lt;/p&gt;
&lt;p&gt;Generating Content Topics (The Twenty Topics Framework)&lt;/p&gt;
&lt;p&gt;Let’s start with finding topics. These are the broad areas you will cover in your content.&lt;/p&gt;
&lt;p&gt;This framework is available as a downloadable resource at &lt;a href=&#34;http://contentmachine.com/resources&#34;&gt;http://contentmachine.com/resources&lt;/a&gt;. It’s a Google Doc that you can use to build a list of your own ideas.&lt;/p&gt;
&lt;p&gt;Understand And Leverage Your Strengths&lt;/p&gt;
&lt;p&gt;What works for me is to experiment with what resonates with my audience, what I can do well, and what I can do consistently.&lt;/p&gt;
&lt;p&gt;I’m writing this book on a plane. The guy next to me is watching a movie (hopefully he’s not reading this). The guy in front is listening to music. The people behind me are sleeping. It’s lunchtime on a Monday, but I don’t want to be watching movies, listening to music, or sleeping—I want to be writing. So, I’m writing.&lt;/p&gt;
&lt;p&gt;Whatever you enjoy, if you can point yourself in a direction that creates something useful for your community, then you are well on your way to creating good content.&lt;/p&gt;
&lt;p&gt;Content Quality Standards&lt;/p&gt;
&lt;p&gt;Useful Would someone actually use this? Write to solve an issue or pain point for a community of people.&lt;/p&gt;
&lt;p&gt;Easy To Read Ensure that your audience doesn&amp;rsquo;t struggle to read your content. Have short intros, simple language, lots of white space, and eliminate fluffy language.&lt;/p&gt;
&lt;p&gt;Has Credibility Extra credibility helps. How else can you add credibility to this content? If the author has credibility to start with, that is great. Having opinions from experts included in the article is another way. Data and links from external sources is another way. Great design and high-quality writing is another.&lt;/p&gt;
&lt;p&gt;Emotionally Relatable&lt;/p&gt;
&lt;p&gt;Write stories that will appeal to their emotions. What images and words can you use that will grab them?&lt;/p&gt;
&lt;p&gt;It’s Not All About You&lt;/p&gt;
&lt;p&gt;Some content about you can work well, but generally it should be about the reader. Look for more “you’s” than “I’s”.&lt;/p&gt;
&lt;p&gt;Be Specific, Not General Broad, general content is rarely useful. Be as specific as you can and use active language.&lt;/p&gt;
&lt;p&gt;Be Generous Look at your content and make a call on its motives&lt;/p&gt;
&lt;p&gt;Be Original&lt;/p&gt;
&lt;p&gt;Make It Shareable Create the type of content people would share and tell others about.&lt;/p&gt;
&lt;p&gt;Interesting Remember, if it’s not interesting, it’s not content marketing. Is the headline eye-catching?&lt;/p&gt;
&lt;p&gt;High-Quality Design&lt;/p&gt;
&lt;p&gt;Flow Does the content follow a logical structure that draws readers from one section to the next? It should be easy to read from section to section.&lt;/p&gt;
&lt;p&gt;Entertaining&lt;/p&gt;
&lt;p&gt;Long I have found that long and detailed content works well.&lt;/p&gt;
&lt;p&gt;Monitoring Traction Of course, just paying attention to what you want isn’t a recipe for success. In the end, it’s your audience that matters. You need to look at what content is resonating with them and find the sweet spot between what you are good at and what the audience loves.&lt;/p&gt;
&lt;p&gt;a “Like” is a sign that the content wasn’t good enough to share.&lt;/p&gt;
&lt;p&gt;recommend paying attention to three key metrics. Shares Rather than focusing on visits or likes, I suggest looking at social media shares.&lt;/p&gt;
&lt;p&gt;“liking” it is great, but actually sharing is a whole new level. Only the best content gets shared.&lt;/p&gt;
&lt;p&gt;To work out total shares you can add buttons to your site or use Like Explorer or BuzzSumo.&lt;/p&gt;
&lt;p&gt;Comments&lt;/p&gt;
&lt;p&gt;Email Replies We have an email list we’ve built up over the years, and each week we send out our best content&lt;/p&gt;
&lt;p&gt;These come directly from my email address, and the replies tell me what is really resonating with people.&lt;/p&gt;
&lt;p&gt;Over time you will get a clear picture of what content works best for your audience. This will then feed back into your content strategy.&lt;/p&gt;
&lt;p&gt;Content Driven SEO&lt;/p&gt;
&lt;p&gt;While I do agree that SEO is important, I think high-quality content is more important.&lt;/p&gt;
&lt;p&gt;ignore the so-called “experts” who say they have a “secret” to ranking well in Google. In my experience, trying to outsmart Google is not the answer for long-term, sustainable traffic.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t Screw Up The Basic On-Page SEO Factors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Make sure your theme is using the right tags in the right places&lt;/p&gt;
&lt;p&gt;Create Lots of High-Quality Content&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Do Basic Keyword Research When Needed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;put in a broad keyword for what I want to write about, and then I’ll choose a keyword that people are actually searching for.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Optimize The Post For The Keyword&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Make sure your keyword is used in your post title. This, in turn, will ensure it appears in your heading tags, any auto generated internal links, and your page URL&lt;/p&gt;
&lt;p&gt;Mention the keyword in your first paragraph. Usually this is pretty easy, and you would do it anyway.&lt;/p&gt;
&lt;p&gt;Make sure your SEO title (sometimes the same as your post title) includes your keyword and is the right length, and you have a description that includes your keyword and entices the user to click through from Google.&lt;/p&gt;
&lt;p&gt;People share and link to high-quality content. This is what Google loves, and that will never change.&lt;/p&gt;
&lt;p&gt;They don’t simply create content. They create content for a certain community of people, and they do it better with a unique angle so they get noticed.&lt;/p&gt;
&lt;p&gt;There are also some logistical things you’d have to consider: Do you need to hire virtual assistants to help with the core part of the work?  Can you hire someone to ghostwrite or guest write the content?  Will you get your team to help?  Will you utilize external services for part of the process or hire a remote team?  What is your plan for when you are sick or you are away—can you stack the content up?&lt;/p&gt;
&lt;p&gt;If you are going to do the daily thing, you can create the posts in WordPress and use the scheduler to publish them in the future. A lot of the steps required to help with this level of content production can be managed by a Virtual Assistant for $400-$500 a month, full time. Check out Virtual Staff Finder if you want to go down this path.&lt;/p&gt;
&lt;p&gt;The Giver Noah Kagan is a guy I could have featured in a few of these chapters. Noah really shines in his approach to how much he gives away. Ultimately, content marketing is about creating value for a community of people. The more you can give away, the more you are going to stand out.&lt;/p&gt;
&lt;p&gt;first noticed the extreme nature of Noah’s giver mentality on his interview 1 with Pat Flynn on Smart Passive Income.&lt;/p&gt;
&lt;p&gt;He started releasing his own plugins under the SumoMe brand. At first a Twitter highlighter tool, then a heat maps tool, then a pop-up tool, then a content marketing analytics tool—all for free. All that on top of regular high-quality, detailed posts via his blog OK Dork&lt;/p&gt;
&lt;p&gt;How To Be A Giver&lt;/p&gt;
&lt;p&gt;I use Schedule Once, so people can easily book times directly in my calendar.&lt;/p&gt;
&lt;p&gt;Email courses on helpful topics.  Video training on YouTube or sites like Udemy.&lt;/p&gt;
&lt;p&gt;The Analyst&lt;/p&gt;
&lt;p&gt;Gathering and reporting on original data is one of the best ways to build a content marketing strategy. Why? Because it’s automatically differentiated. It’s difficult, if not impossible, for competitors to report on the same data as you.&lt;/p&gt;
&lt;p&gt;Some companies gather and report on data based on information they are already collecting. Some undertake dedicated surveys to produce unique content.&lt;/p&gt;
&lt;p&gt;How To Be An Analyst&lt;/p&gt;
&lt;p&gt;Use a survey tool like TypeForm or Google Forms to build and send out a survey. We used TypeForm, because it creates great-looking surveys and looks very professional.&lt;/p&gt;
&lt;p&gt;Create a SlideShare summary of the result for sharing and a full PDF report for your site.&lt;/p&gt;
&lt;p&gt;How To Be A Comedian&lt;/p&gt;
&lt;p&gt;Marie Forleo is a great example. She has built a business education empire by delivering serious messages in a fun and quirky way.&lt;/p&gt;
&lt;p&gt;David Nihil, author of Do You Talk Funny: 7 Comedy Habits to Become a Better (and Funnier) Public Speaker,&lt;/p&gt;
&lt;p&gt;his business, FunnyBizz, offers a service that specifically rewrites blogs posts and makes them funnier.&lt;/p&gt;
&lt;p&gt;Here are some of David’s tips: Tell a story in a relatable way, include something broad that people can specifically relate to (maybe local references), then bring it back to something that happened to you.&lt;/p&gt;
&lt;p&gt;Set the scene. Write as if you are describing something to a blind person, and be very specific with detail.&lt;/p&gt;
&lt;p&gt;Use emotive or funny words like “weird”, “crazy”, or “nuts”, and be passionate.&lt;/p&gt;
&lt;p&gt;Use present tense—“I&amp;rsquo;m walking and I see” rather than “I was walking and I saw”.&lt;/p&gt;
&lt;p&gt;Use the rule of three to create memorable content. Build tension and surprise with items one and two and something unexpected with three.  Add a callback at the end to tie it together.&lt;/p&gt;
&lt;p&gt;the safest humor involves personal stories, because they are guaranteed to be original and can be easily practiced and perfected.&lt;/p&gt;
&lt;p&gt;specific structure for making stories funny: Identity – Who are you; set the scene; who are you with; how are you feeling?  Struggle – What are you struggling with?  Discovery – What was your big discovery?  Surprise – What is a surprising twist that no one is expecting?&lt;/p&gt;
&lt;p&gt;Google AdWords Keyword Planner Visit the Google AdWords Keyword Planner.  Enter some keywords that describe the sort of content you want to create—for example, I’ll enter “Craft Beer” if I am working on Black Hops Brewing.  Click “Get ideas”.  Click the “Keyword Ideas” tab to just see the individual keyword ideas.  Use the “Keyword Filters” on the left to only show keywords with a certain amount of searches. I generally look for keywords with between 200-500 searches for a new site, or more for an established site. In the example above I can see quite a few keywords in the 1,000-2,000 searches range, including keywords like “brewing equipment”, “homebrew recipes”, “best craft beers”, and “craft beer festival”. All of these would make a good starting point for some content.&lt;/p&gt;
&lt;p&gt;Podcast – Grab some other industry experts and jump on Skype to chat about what is happening in the industry. Use Pamela for Skype or Ecamm Call Recorder to record the call, publish it on your blog, and submit the feed to iTunes. I have a podcasting guide linked up at &lt;a href=&#34;http://contentmachine.com/resources&#34;&gt;http://contentmachine.com/resources&lt;/a&gt; that will help.&lt;/p&gt;
&lt;p&gt;Video – Do the same thing as Podcasts, but use Google Hangouts or YouTube Live and publish the video to YouTube.&lt;/p&gt;
&lt;p&gt;How To Be An Artist Utilizing the power of images could mean adding some images to existing content, or it could mean creating brand new, image-heavy content. Here are eleven ways you can go about ramping up your image content.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Screenshots&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Skitch and Jing are great tools for creating screenshots.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Screenshares, Webinars, And Video Courses If you have an educational focus for your content, screenshares and videos are a great way to get the learning across.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All you need to create a decent screenshare video is a USB headset and screen capture software like Camtasia or ScreenFlow&lt;/p&gt;
&lt;p&gt;Marie Forleo is a great place to get inspiration when it comes to doing online videos well.&lt;/p&gt;
&lt;p&gt;There are three main ways to create an infographic: Use an infographic builder like Visme or Piktochart&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Animated GIFs Animated GIFs and autoplay videos stand out as a big trend at the moment. GIFs are being used regularly on websites now for things like showing you how to use software.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GifGrabber is a simple tool for putting together animated GIFs for software usage.&lt;/p&gt;
&lt;p&gt;Chapter 5: Scale: Building The Machine&lt;/p&gt;
&lt;p&gt;Defining Your Funnel&lt;/p&gt;
&lt;p&gt;A funnel is a way to transition the broad members of the community down to a smaller group of customers.&lt;/p&gt;
&lt;p&gt;There’s no “one size fits all”, but I’ve found three popular options that work well. The email funnel  The product funnel  The content funnel&lt;/p&gt;
&lt;p&gt;If you want to look at this strategy, SumoMe, OptimizePress, and LeadPages are the two leading tools for building email opt ins.&lt;/p&gt;
&lt;p&gt;The Product Funnel The product funnel is where the main call to action on the site is using your product.&lt;/p&gt;
&lt;p&gt;The Content Funnel The content funnel is my personal preference. It aims to build an email list, but it also favours content and brand over email opt ins. It requires you to create a lot of content,&lt;/p&gt;
&lt;p&gt;We put most of our content out in blog posts freely available on our site. Sometimes we’ll support those blog posts with Google Docs, frameworks, ebooks, and downloads that keen readers can grab.&lt;/p&gt;
&lt;p&gt;With larger projects where trust is a must, we’ll just give it all away publicly with no email opt in. That is what I do with my books. All of the frameworks, downloads, and resources for this book are freely available at &lt;a href=&#34;http://contentmachine.com/resources&#34;&gt;http://contentmachine.com/resources&lt;/a&gt;. This builds trust, and people are more likely to get behind the project and share it.&lt;/p&gt;
&lt;p&gt;Relevant Lead Magnets&lt;/p&gt;
&lt;p&gt;Of course, it takes a bit of effort to add a different opt in to every post—not to mention setting up the website and email sequences to support providing the lead magnet. I think the best way to do this is by checking your top posts and making sure all of them have post-specific lead magnets. If you don’t have many posts just yet, you can go on gut feeling and add them to the posts you think will be winners. If you’ve built up a good library of content, I’d suggest automating this with Zapier:&lt;/p&gt;
&lt;p&gt;The basic idea here is to use the “Schedule” zap to automatically create a task for your admin team. I have a team of Virtual Assistants in the Philippines who look after these things for me. I use Trello to manage our tasks, but Zapier integrates with lots of different tools if you aren’t a Trello user.&lt;/p&gt;
&lt;p&gt;every month the admin team is reminded to look in Google Analytics under Behaviour/Site content at a year’s worth of data to see the top 25 posts. They manually check through each post to see if there is a post-specific opt in at the end. If&lt;/p&gt;
&lt;p&gt;Five Must-Have Sequences For Content Marketers&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Content Drip Or Weekly Email&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A content drip sequence is a series of pre-written emails that will send out useful content to the person on a set schedule.&lt;/p&gt;
&lt;p&gt;The goal is to build trust and build up desire for your product/service at the same time.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Content Suggestion Sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I like to have one simple email that gets sent to subscribers asking them what they would like to hear about.&lt;/p&gt;
&lt;p&gt;If you are using content in your business and you want it to get traction, you need to learn what people want.&lt;/p&gt;
&lt;p&gt;If you let people reply to your emails, then you actually read and reply back, you will build a legion of close fans.&lt;/p&gt;
&lt;p&gt;If they suggested something you hadn’t thought of, then add it to your ideas list.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Pitch Sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To ensure I’m not pitching the same people over and over again, I like to have a pitch sequence. I use Infusionsoft, which makes this sort of thing pretty easy.&lt;/p&gt;
&lt;p&gt;Here are a few tools you might want to use to help with this step: Inkybee is a tool for reaching out to other influence content creators in your niche.&lt;/p&gt;
&lt;p&gt;Inkybee is a tool for reaching out to other influence content creators in your niche.&lt;/p&gt;
&lt;p&gt;Editing Notes Here we generate practical editing notes and list other things to look out for. Examples could include: When reviewing after first draft, keep an eye out for: Filler words like: I think, etc, things, stuff.  Long sentences with no punctuation.  Long paragraphs that aren’t broken up.  Waffling or off-topic sentences.  Double check links.  Make sure links work.  Make sure they open in a new tab.&lt;/p&gt;
&lt;p&gt;Put this information in a separate document with your final article. SEO Meta description (less than 156 chars).  Focus Keyword.  Post Tags.  A link to a dropbox folder with your images.  Please save your blog post images in this folder in the dimensions listed below.  Include a featured image.  Include a large photo of yourself to use for social sharing (we’ll put a quote from the post on the photo).  Title of each image.  Name the image with keywords spaced with underscores (Monthy_Income_Chart).  A brief, two-sentence excerpt to entice readers.  One or two tweetable quotes from your post.  An author bio if this is your first submission.&lt;/p&gt;
&lt;p&gt;Content Promotion&lt;/p&gt;
&lt;p&gt;What I find works is a simple procedure that an admin person or virtual assistant can follow and apply to all content.&lt;/p&gt;
&lt;p&gt;Lead Magnets If you think it’s going to be a popular piece of content, you might want to make a post-specific opt in.&lt;/p&gt;
&lt;p&gt;Check The Retargeting Funnel Category Remember the retargeting funnel. If you’ve set it up properly, it will automatically retarget people with ads and emails if you post content in certain categories.&lt;/p&gt;
&lt;p&gt;Mentions Tweets If we have mentioned someone in the article, we want to draft some “mentions tweets”. Log into your Twitter client of choice (I’d suggest Twitter itself, or Hootsuite or Buffer) and schedule tweets with three people per tweet like: Mentions in [post name] on [main topic] [@guest1] [@guest2] and [@guest3] [link]&lt;/p&gt;
&lt;p&gt;Scheduled Tweets We also schedule a bunch of tweets for each piece of content. We come up with a few different tweets based on the content and manually post them at intervals after the content is published. We use Hootsuite to schedule the tweets, but you can also use Buffer to auto-schedule them.&lt;/p&gt;
&lt;p&gt;Be Part Of The 5% That Gets Shit Done&lt;/p&gt;
&lt;p&gt;I’ve noticed one common trait in every successful entrepreneur I know. It’s something I don’t see in the rest of the population, and it’s what makes them entrepreneurs. It’s their relentless focus on delivering something. Getting shit done.&lt;/p&gt;
&lt;p&gt;Ninety-five percent of people will happily read a book, maybe even take notes, but they don’t measure themselves based on what they deliver. They won’t change anything.&lt;/p&gt;
&lt;p&gt;Five percent of people do. They are the entrepreneurs. It’s not enough for them to read a book. It only matters when they deliver something as a result. Maybe it’s implementing a new content strategy, testing out a new type of article, or brainstorming some new ideas for their blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eating Animals</title>
      <link>https://azharkhan.in/notes/eating-animals/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/eating-animals/</guid>
      <description>&lt;p&gt;Thoughts and notes taken from &lt;a href=&#34;https://www.goodreads.com/book/show/6604712-eating-animals?from_search=true&#34;&gt;Eating Animals&lt;/a&gt; by Jonathan Safran Foer&lt;/p&gt;
&lt;h3 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h3&gt;
&lt;p&gt;A real eye opener on the factory faming industry. This book will make you seriously consider your meet consumption. If not for ethical or environmental reasons then perhaps for the benefit of your health.&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;p&gt;Food serves two parallel purposes: it nourishes and it helps you remember.&lt;/p&gt;
&lt;p&gt;There is something about eating animals that tends to polarize: never eat them or never sincerely question eating them; become an activist or disdain activists.&lt;/p&gt;
&lt;p&gt;It raises significant philosophical questions and is a $140 billion–plus a year industry that occupies nearly a third of the land on the planet, shapes ocean ecosystems, and may well determine the future of earth’s climate.&lt;/p&gt;
&lt;p&gt;We have waged war, or rather let a war be waged, against all of the animals we eat. This war is new and has a name: factory farming.&lt;/p&gt;
&lt;p&gt;More than any set of practices, factory farming is a mind-set: reduce production costs to the absolute minimum and systematically ignore or “externalize” such costs as environmental degradation, human disease, and animal suffering. For thousands of years, farmers took their cues from natural processes. Factory farming considers nature an obstacle to be overcome.&lt;/p&gt;
&lt;p&gt;Children confront us with our paradoxes and hypocrisies, and we are exposed. You need to find an answer for every why—Why do we do this? Why don’t we do that?—and often there isn’t a good one. So you say, simply, because.&lt;/p&gt;
&lt;figure&gt;
    &lt;blockquote class=&#34;PullQuote PullQuote--right&#34;&gt;
        &lt;p&gt;
            Animal agriculture makes a 40% greater contribution to global warming than all transportation in the world combined; it is the number one cause of climate change.
            
            
        &lt;/p&gt;
        
            &lt;figcaption&gt;&amp;mdash; Jonathan Safran Foer&lt;/figcaption&gt;
        
    &lt;/blockquote&gt;
&lt;/figure&gt;

&lt;p&gt;Chickens once had a life expectancy of fifteen to twenty years, but the modern broiler is typically killed at around six weeks. Their daily growth rate has increased roughly 400 percent.)&lt;/p&gt;
&lt;p&gt;The average shrimp-trawling operation throws 80 to 90 percent of the sea animals it captures overboard, dead or dying, as bycatch. (Endangered species amount to much of this bycatch.) Shrimp account for only 2 percent of global seafood by weight, but shrimp trawling accounts for 33 percent of global bycatch.&lt;/p&gt;
&lt;p&gt;Cruelty depends on an understanding of cruelty, and the ability to choose against it. Or to choose to ignore it.&lt;/p&gt;
&lt;p&gt;How much do I value creating a socially comfortable situation, and how much do I value acting socially responsible?&lt;/p&gt;
&lt;p&gt;the livestock sector is responsible for 18 percent of greenhouse gas emissions, around 40 percent more than the entire transport sector—&lt;/p&gt;
&lt;p&gt;omnivores contribute seven times the volume of greenhouse gases that vegans do.&lt;/p&gt;
&lt;p&gt;[Animal agriculture] should be a major policy focus when dealing with problems of land degradation, climate change and air pollution, water shortage and water pollution and loss of biodiversity.&lt;/p&gt;
&lt;p&gt;We live in a world in which it’s conventional to treat an animal like a hunk of wood and extreme to treat an animal like an animal.&lt;/p&gt;
&lt;p&gt;No one fired a pistol to mark the start of the race to the bottom. The earth just tilted and everyone slid into the hole.&lt;/p&gt;
&lt;p&gt;What the industry figured out—and this was the real revolution—is that you don’t need healthy animals to make a profit. Sick animals are more profitable.&lt;/p&gt;
&lt;p&gt;The highest rates of osteoporosis are seen in countries where people consume the most dairy foods.&lt;/p&gt;
&lt;p&gt;The entire goliath of the food industry is ultimately driven and determined by the choices we make as the waiter gets impatient for our order or in the practicalities and whimsies of what we load into our shopping carts or farmers’-market bags.&lt;/p&gt;
&lt;p&gt;That is the reason the factory farm system is failing and won’t work over the long term: it’s created a food industry whose primary concern isn’t feeding people.&lt;/p&gt;
&lt;p&gt;At one level, this is the result of the normal process of corporations pursuing profit by making sure they have access to resources their competitors don’t. There is, obviously, a lot of money at stake here: billions of dollars, which could either be spread among a handful of megacorporations or among hundreds of thousands of small farmers. But&lt;/p&gt;
&lt;p&gt;The factory farm has succeeded by divorcing people from their food, eliminating farmers, and ruling agriculture by corporate fiat.&lt;/p&gt;
&lt;p&gt;Just how destructive does a culinary preference have to be before we decide to eat something else? If contributing to the suffering of billions of animals that live miserable lives and (quite often) die in horrific ways isn’t motivating, what would be? If being the number one contributor to the most serious threat facing the planet (global warming) isn’t enough, what is? And if you are tempted to put off these questions of conscience, to say not now, then when?&lt;/p&gt;
&lt;p&gt;At the end of the day, factory farming isn’t about feeding people; it’s about money.&lt;/p&gt;
&lt;p&gt;If animal agriculture has become a joke, perhaps this is the punch line: even Bill Niman has said he would no longer eat Niman Ranch beef.&lt;/p&gt;
&lt;p&gt;This is not in the end a complicated position. Nor is it a veiled argument for vegetarianism. It is an argument for vegetarianism, but it’s also an argument for another, wiser animal agriculture and more honorable omnivory.&lt;/p&gt;
&lt;p&gt;This is not in the end a complicated position. Nor is it a veiled argument for vegetarianism. It is an argument for vegetarianism, but it’s also an argument for another, wiser animal agriculture and more honorable omnivory. If we are not given the option to live without violence, we are given the choice to center our meals around harvest or slaughter, husbandry or war. We have chosen slaughter. We have chosen war. That’s the truest version of our story of eating animals. Can we tell a new story?&lt;/p&gt;
&lt;p&gt;The three years I spent writing this book, for example, saw the first documentation that livestock contribute more to global warming than anything else; saw the first major research institution (the Pew Commission) recommend the total phaseout of multiple dominant intensive-confinement practices; saw the first state (Colorado) illegalize common factory farm practices (gestation and veal crates) as a result of negotiations with industry (rather than campaigns against industry); saw the first supermarket chain of any kind (Whole Foods) commit to a systematic and extensive program of animal welfare labeling; and saw the first major national newspaper (the New York Times) editorialize against factory farming as a whole, arguing that “animal husbandry has been turned into animal abuse,” and “manure… has been turned into toxic waste.”&lt;/p&gt;
&lt;p&gt;I’ve restricted myself to mostly discussing how our food choices affect the ecology of our planet and the lives of its animals, but I could have just as easily made the entire book about public health, workers’ rights, decaying rural communities, or global poverty—all of which are profoundly affected by factory farming.&lt;/p&gt;
&lt;p&gt;To accept the factory farm feels inhuman. To accept the factory farm—to feed the food it produces to my family, to support it with my money—would make me less myself, less my grandmother’s grandson, less my son’s father. This is what my grandmother meant when she said, “If nothing matters, there’s nothing to save.”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Everybody Writes</title>
      <link>https://azharkhan.in/notes/everybody-writes/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/everybody-writes/</guid>
      <description>&lt;p&gt;Notes taken from &lt;a href=&#34;https://www.goodreads.com/book/show/23001125-everybody-writes&#34;&gt;Everybody Writes&lt;/a&gt; by Ann Handley&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note to self&lt;/strong&gt;: Look into &lt;em&gt;“The Elements of Style by Strunk and White”&lt;/em&gt; and &lt;em&gt;&amp;ldquo;On Writing by Stephen King&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Writing well is part habit, part knowledge of some fundamental rules, and part giving a damn.&lt;/p&gt;
&lt;p&gt;Choose words well, and write with economy and style and honest empathy for your reader.&lt;/p&gt;
&lt;p&gt;Think of your content, then, as any medium through which you communicate with the people who might use your products or services.&lt;/p&gt;
&lt;p&gt;Your words define your brand. If you had know branding would you still recognise your brand via the words you use.&lt;/p&gt;
&lt;p&gt;Are you telling your story from your unique perspective, with a voice and style that&amp;rsquo;s clearly all you?&lt;/p&gt;
&lt;p&gt;When you have to write your ideas out in complete sentences and complete paragraphs, it forces a deeper clarity of thinking.&lt;/p&gt;
&lt;p&gt;Words matter. Your words (what you say) and style (how you say it) are your most cherished (and, yet, undervalued) assets.&lt;/p&gt;
&lt;p&gt;Brevity and clarity matter more than ever.&lt;/p&gt;
&lt;p&gt;What matters now isn&amp;rsquo;t storytelling; what matters is telling a true story well.&lt;/p&gt;
&lt;p&gt;Quality content means content that is packed with clear &lt;strong&gt;utility&lt;/strong&gt; and is brimming with &lt;strong&gt;inspiration&lt;/strong&gt;, and it has relentless &lt;strong&gt;empathy&lt;/strong&gt; for the audience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Utility&lt;/strong&gt; — you clearly help your customers do something that matters to them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inspiration&lt;/strong&gt; — your content is inspired by data. What credible source supports your main idea? Are there examples, data, real-world stories, relevant anecdotes, timely developments, or new stories you can cite?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Empathy&lt;/strong&gt; — you relentlessly focus on your customer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Utility × Inspiration × Empathy = Quality Content&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Words are your Web currency: they are a proxy, a stand-in for the important things you want to convey to your customers, and the world.&lt;/p&gt;
&lt;p&gt;“Habits are the invisible architecture of everyday life.”&lt;/p&gt;
&lt;p&gt;“Start with empathy. Continue with utility. Improve with analysis. Optimise with love.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first words&lt;/strong&gt; of every sentence should make a friendly first impression to encourage the reader to keep going.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;. What&amp;rsquo;s your business goal? What are you trying to achieve? Anything you write should always be aligned with a larger (business or marketing) goal—even an individual blog post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reframe the idea to relate it to your readers.&lt;/strong&gt; Why does it matter to them? What&amp;rsquo;s in it for them? Why should they care? What&amp;rsquo;s the clear lesson or message you want them to take away? What value do you offer them? What questions might they have? What advice or help can you provide?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Organize.&lt;/strong&gt; What structure helps communicate your point? Some options are a list, a how-to guide, and a client narrative. Organize the outline or general architecture that suits that type of story best.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write to one person.&lt;/strong&gt; Imagine the one person you&amp;rsquo;re helping with this piece of writing. And then write directly to that person (using you, as opposed to using people or they).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Produce The Ugly First Draft.&lt;/strong&gt; Then walk away. Rewrite. Shape that mess into something that a reader wants to read. Give it a great headline or title. Have someone edit. One final look for readability.&lt;/p&gt;
&lt;p&gt;Publish, but not without answering one more reader question: what now?&lt;/p&gt;
&lt;p&gt;The more you think about what you want to say, and plan for it, the easier it is to say.&lt;/p&gt;
&lt;p&gt;“If I&amp;rsquo;m really struggling, it&amp;rsquo;s usually not about the writing—it&amp;rsquo;s about the thinking.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;“An hour with a fresh mind is worth five hours of fog.”&lt;/p&gt;
&lt;p&gt;Before you begin the writing, be sure you know the purpose or mission or objective of every piece of content that you write. What are you trying to achieve? What information, exactly, are you trying to communicate? And why should your audience care?&lt;/p&gt;
&lt;p&gt;Some writers —including me— write as a way to figure out what we think. You, too, might develop your thoughts through writing, and you might not always have a clear sense of what exactly you want to say until you&amp;rsquo;re knee-deep in the water.&lt;/p&gt;
&lt;p&gt;Helps to first jot down thoughts to try to find a focus and points in support of it.&lt;/p&gt;
&lt;p&gt;Why am I creating this? What&amp;rsquo;s my objective? What is my key take on the subject or issue? What&amp;rsquo;s my point of view?&lt;/p&gt;
&lt;p&gt;Why does it matter to the people you are trying to reach?&lt;/p&gt;
&lt;p&gt;In some cases that key point becomes the headline.&lt;/p&gt;
&lt;p&gt;You might have more supporting points in a book or longer piece of content, but you should still be able to describe the key point in a single sentence.&lt;/p&gt;
&lt;p&gt;“great writing isn&amp;rsquo;t written, as much as assembled.”&lt;/p&gt;
&lt;p&gt;“I almost always write an outline, even if it&amp;rsquo;s only a scribble on a piece of paper,” Doug Kessler said in an interview with me. “It helps me plan the arc of the story and the flow,&lt;/p&gt;
&lt;p&gt;Good writing serves the reader, not the writer. It isn&amp;rsquo;t self-indulgent. Good writing anticipates the questions that readers might have as they&amp;rsquo;re reading a piece, and it answers them.&lt;/p&gt;
&lt;p&gt;“Good writing (and therefore crafting good experiences) requires us to understand and have empathy for our audience, their situation, their needs and goals.”&lt;/p&gt;
&lt;p&gt;What matters now is creating useful content that solves customer problems, shoulders their burdens, eases their pain, enriches their lives.&lt;/p&gt;
&lt;p&gt;Watch how customers behave. See what problems they have. “Look for patterns.”&lt;/p&gt;
&lt;p&gt;Spend time with your customers or prospects.&lt;/p&gt;
&lt;p&gt;Be a natural skeptic. A powerful question is, Why? Why do you do things that way? Why do you feel that way?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use a customer-centric POV.&lt;/strong&gt; Replace I or we with you to shift the focus to the customer&amp;rsquo;s point of view.&lt;/p&gt;
&lt;p&gt;Put your reader into the story. Put your reader—or someone just like your reader—into the story. You might share an anecdote about someone grappling with a problem your piece solves, or set up a scenario your reader will recognise.&lt;/p&gt;
&lt;p&gt;Describe a problem your reader can relate to. Set a stage. Ask a question.&lt;/p&gt;
&lt;p&gt;Tell a specific, simple story really well, aligned with a bigger idea and broader strategy.&lt;/p&gt;
&lt;p&gt;Good, pathologically empathic writing strives to explain, to make things a little bit clearer, to make sense of our world—even if it&amp;rsquo;s just a straightforward product description.&lt;/p&gt;
&lt;p&gt;Clarity of writing usually follows clarity of thought. So think what you want to say, then&lt;/p&gt;
&lt;p&gt;Clarity of writing usually follows clarity of thought. So think what you want to say, then say it as simply as possible.”&lt;/p&gt;
&lt;p&gt;Simplicity comes primarily from approaching any writing with empathy and a reader-centric point of view to begin with—&lt;/p&gt;
&lt;p&gt;Designing with your words, rather than fitting words into a design.&lt;/p&gt;
&lt;p&gt;White space is a prerequisite, not a luxury. Large chunks of text are formidable and depressing.&lt;/p&gt;
&lt;p&gt;Make your words the hero of your design, rather than adding them to a completed design the way a supermarket baker pipes a name into the blank field on a prebaked birthday cake from the case. Pasting words into a blank space without respecting their role in a design is called the lorem ipsum approach,&lt;/p&gt;
&lt;p&gt;That approach treats the content as secondary to the design.&lt;/p&gt;
&lt;p&gt;For a marketer, design and content aren&amp;rsquo;t separate processes; they are actually key parts of the same process.&lt;/p&gt;
&lt;p&gt;Find a Writing Buddy&lt;/p&gt;
&lt;p&gt;good writing is more about thinking, rewriting, and keeping your focus relentlessly on the reader&lt;/p&gt;
&lt;p&gt;Know the Difference between Active and Passive Voice&lt;/p&gt;
&lt;p&gt;passive means that something is being done to something,&lt;/p&gt;
&lt;p&gt;passive means that something is being done to something, instead of that something doing the action on its own.&lt;/p&gt;
&lt;p&gt;Generally you want to use the active voice, or active writing, instead of the passive voice.&lt;/p&gt;
&lt;p&gt;Ditch weakling verbs in favor of bold action words if you want to breathe life into your writing.&lt;/p&gt;
&lt;p&gt;an adverb describes more fully what&amp;rsquo;s going on with the words around it. An adverb often (but not always) ends in ly—&lt;/p&gt;
&lt;p&gt;Often you can ditch an adverb if you also ditch a weakling verb in favor of livelier one.&lt;/p&gt;
&lt;p&gt;Use should have, not should of.&lt;/p&gt;
&lt;p&gt;Keep your verb tense consistent throughout; don&amp;rsquo;t switch around between present, future, past tenses.&lt;/p&gt;
&lt;p&gt;“If everyone is thinking alike, then somebody isn&amp;rsquo;t thinking” (George S. Patton)&lt;/p&gt;
&lt;p&gt;Use who for people, which for things, and that for either people or things.&lt;/p&gt;
&lt;p&gt;just don&amp;rsquo;t refer to a nonperson as who.&lt;/p&gt;
&lt;p&gt;your content is not about storytelling, it&amp;rsquo;s about telling a true story well.&lt;/p&gt;
&lt;p&gt;Your story should be the steel-infused backbone of whatever content or social media presence you ultimately create&lt;/p&gt;
&lt;p&gt;Incidentally, focusing on your bigger story also helps you communicate strongly what makes you truly unique. (B-school types might call this, depending on the situation, your value proposition, positioning, or unique selling proposition.)&lt;/p&gt;
&lt;p&gt;clearly communicating what makes you unique helps position you for long-term success.&lt;/p&gt;
&lt;p&gt;What is unique about our business? What is interesting about how our business was founded? About the founder? What problem is our company trying to solve? What inspired our business? What aha! moments has our company had? How has our business evolved? How do we feel about our business, our customers, ourselves? What&amp;rsquo;s an unobvious way to tell our story? Can we look to analogy instead of example? (See Rule 19.) What do we consider normal and boring that other folks would think is cool?&lt;/p&gt;
&lt;p&gt;And most important: relay your vision. How will our company change the world?&lt;/p&gt;
&lt;p&gt;Tell the Story Only You Can Tell&lt;/p&gt;
&lt;p&gt;The problem with all of these samples is that they could be describing a hundred different companies, rather than one unique company. What sets you apart? What&amp;rsquo;s unique about your story? Don&amp;rsquo;t tell me who you are—tell me why you matter to me.&lt;/p&gt;
&lt;p&gt;“Start telling the stories that only you can tell, because there&amp;rsquo;ll always be better writers than you and there&amp;rsquo;ll always be smarter writers than you. There will always be people who are much better at doing this or doing that—but you are the only you,” author Neil Gaiman&lt;/p&gt;
&lt;p&gt;“Innovation is often the act of taking something that worked over there and using it over here.”&lt;/p&gt;
&lt;p&gt;Generating brand awareness. The effort is largely centered on creating awareness of the company&amp;rsquo;s larger story, because you want people to know about and be familiar with your company—what it is and what it stands for. You&amp;rsquo;re not trying to generate sales directly from such articles.&lt;/p&gt;
&lt;p&gt;Adobe&amp;rsquo;s CMO.com. Also, American Express&amp;rsquo;s OPEN Forum, which publishes information designed to help small business owners.&lt;/p&gt;
&lt;p&gt;As much as possible, your content should show, not tell. It should show your product as it exists in the world—&lt;/p&gt;
&lt;p&gt;Be an advocate for your audience. What are you trying to get out of the interview for the benefit of your audience—the people who will consume this piece of content you&amp;rsquo;re creating as a result of an interview? If it&amp;rsquo;s something specific, make sure you open with a question that answers the biggest&lt;/p&gt;
&lt;p&gt;Converse, don&amp;rsquo;t interview. The best podcast hosts converse with their guests instead of interviewing them. They start out with a planned question or two and then let the response dictate the conversation. “Be prepared, but don&amp;rsquo;t read off a script,” suggests Kerry O&amp;rsquo;Shea Gorgone, who hosts the weekly MarketingProfs podcast, Marketing&lt;/p&gt;
&lt;p&gt;Superlatives can make for great interview fodder. Questions like, “What&amp;rsquo;s the more interesting/best/baddest/most controversial/greatest/worst” can give you some great material to work with. Other favorite questions of mine: How did you get interested in this line of work/program/etc.…or How did you wind up here?&lt;/p&gt;
&lt;p&gt;People&amp;rsquo;s journeys are always interesting—both to themselves and to others. And they can reveal some interesting bits of color about a person.&lt;/p&gt;
&lt;p&gt;Shut up already. Your job is to draw the interviewee out, so try to speak less and let the other person speak more. Try not to interrupt unless it&amp;rsquo;s to ask a clarifying question.&lt;/p&gt;
&lt;p&gt;We take the trust our community places in us very seriously. Credibility is perhaps the most important trait of great curation. So don&amp;rsquo;t worry about spreading bad info. If it says “Upworthy,” you can share it with confidence, knowing that it checks out.&lt;/p&gt;
&lt;p&gt;“Mark Twain&amp;rsquo;s 10-Sentence Course on Branding and Marketing.”&lt;/p&gt;
&lt;p&gt;Tom Bentley, “Mark Twain&amp;rsquo;s 10-Sentence Course on Branding and Marketing,” MarketingProfs, July 15, 2013, &lt;a href=&#34;http://www.marketingprofs.com/articles/2013/11152/mark-twains-10-sentence-course-on-branding-and-marketing&#34;&gt;www.marketingprofs.com/articles/2013/11152/mark-twains-10-sentence-course-on-branding-and-marketing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seek out primary, not secondary sources. A primary source is an original research project, or the originator of an idea or statement. A secondary source quotes the original source.&lt;/p&gt;
&lt;p&gt;Generally, the more recent the research, the more appealing it is. Try to avoid anything older than four years, since it&amp;rsquo;s likely to be stale. In some fast-evolving industries—mobile or social media, say—avoid anything more than two years old.&lt;/p&gt;
&lt;p&gt;Wikipedia is not a credible source&lt;/p&gt;
&lt;p&gt;If you are merely regurgitating content from elsewhere without adding your take, that&amp;rsquo;s not curation—that&amp;rsquo;s aggregation.&lt;/p&gt;
&lt;p&gt;A robot can aggregate content, but only a human can tell me why it matters.&lt;/p&gt;
&lt;p&gt;The sections you create in your own words should be longer than any sections you&amp;rsquo;re quoting. Quote short passages or a short section of the original piece only—don&amp;rsquo;t reprint the whole enchilada. You&amp;rsquo;re curating parts, not reprinting the whole. The idea is to give your readers the gist of another piece so you can share your take on why it matters, or why it&amp;rsquo;s important, or what else to consider.&lt;/p&gt;
&lt;p&gt;I were linking to an article on marketer Mack Collier&amp;rsquo;s site, I&amp;rsquo;d link his name to his main URL at MackCollier.com, and I&amp;rsquo;d separately link to the curated article as well. Even if in the future he moves content around, he likely won&amp;rsquo;t change or lose his domain name. So a reader could still click on Mack&amp;rsquo;s name, arrive on his site, and search for the article there.&lt;/p&gt;
&lt;p&gt;Ground Content in Data&lt;/p&gt;
&lt;p&gt;Data puts your content in context and gives you credibility.&lt;/p&gt;
&lt;p&gt;Google&amp;rsquo;s Ngram Viewer is more obscure, but it lets you search and graph words and phrases from a vast number of books that Google has scanned in public libraries to populate its Google Books search engine (&lt;a href=&#34;https://books.google.com/ngrams)&#34;&gt;https://books.google.com/ngrams)&lt;/a&gt;. It&amp;rsquo;s a useful (if quirky) tool for finding trends over a much longer time frame than measured in Internet time.&lt;/p&gt;
&lt;p&gt;write every tweet as you would speak it…to your girlfriend, boyfriend, significant other, dog, cat, goldfish swimming in its fishbowl—or whoever you can imagine in the room with you.&lt;/p&gt;
&lt;p&gt;Content hack: Try reading each sentence backward, instead of the usual way. Doing so jars your brain to consider each word independently, allowing you to spot typos more readily.&lt;/p&gt;
&lt;p&gt;“Follow the company you want to work for on LinkedIn and you&amp;rsquo;ll not only discover what their business goals and priorities are, but also the words and phrases they use to describe these objectives,” Nicole suggested in an email interview.&lt;/p&gt;
&lt;p&gt;“Companies want to hire people who have an understanding of who they are and what they do,”&lt;/p&gt;
&lt;p&gt;Nicole says. “If you already sound like them they&amp;rsquo;ll be more apt to reach out to you if you&amp;rsquo;re already talking their talk.”&lt;/p&gt;
&lt;p&gt;Consider the key words you want to be known for, and optimize your profile by including those words in your headline and summary.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.marketingprofs.com/opinions/2014/25214/dont-be-this-person-on-linkedin-headline-donts-and-dos&#34;&gt;www.marketingprofs.com/opinions/2014/25214/dont-be-this-person-on-linkedin-headline-donts-and-dos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It uses you and your repeatedly, which makes it clear that the email isn&amp;rsquo;t about TaskRabbit, it&amp;rsquo;s about me—how TaskRabbit can help me. Subtle difference (maybe), but a critical one (definitely).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalecommerce.com/articles/65858-E-mail-Marketing-in-2014-How-to-Avoid-Spam-Folders&#34;&gt;www.practicalecommerce.com/articles/65858-E-mail-Marketing-in-2014-How-to-Avoid-Spam-Folders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Writing Landing Pages Less Is So Often More&lt;/p&gt;
&lt;p&gt;Match the message to the promise.&lt;/p&gt;
&lt;p&gt;Yet 45 percent of the landing pages that were evaluated failed to repeat the email&amp;rsquo;s promotional copy in the headline. If you sell someone on a promise, make sure that the first thing she experiences after taking action based on your promise doesn&amp;rsquo;t tell a whole ’nother story.&lt;/p&gt;
&lt;p&gt;Keep your headline benefit-driven.&lt;/p&gt;
&lt;p&gt;A product-driven headline highlights what your product or service will do; a benefit-driven headline tells customers what your product or service will do for them.&lt;/p&gt;
&lt;p&gt;“Why the Title Matters More Than the Talk,” Upworthy Insider (blog), May, 19, 2014, blog.upworthy.com/post/26345634089/why-the-title-matters-more-than-the-talk.&lt;/p&gt;
&lt;p&gt;Speak to your audience. Who is your audience? Whom do you want to attract? And—just as important—whom do you not want to attract? All good content is rooted in a clear understanding of your audience.&lt;/p&gt;
&lt;p&gt;the main headline on your page should communicate that customer-centric value.&lt;/p&gt;
&lt;p&gt;Remember: your value is not what you do or what you sell, it&amp;rsquo;s what you do for your customers.&lt;/p&gt;
&lt;p&gt;Use words your audience uses. You don&amp;rsquo;t need to embellish what you do. Use words that are familiar to your potential customer. Did you notice that Dropbox uses stuff instead of files, data, photos, and so on? I suppose it could&amp;rsquo;ve come up with a more sophisticated sounding word (maybe assets? property? resources? content?). But stuff really does cover all the things we all have stored on our computers, phones, and tablets. And that&amp;rsquo;s how many of us refer to all those things, right?&lt;/p&gt;
&lt;p&gt;Writing the About Us Page When It&amp;rsquo;s Not Really About You The key to a successful About Us page sounds paradoxical: the best About Us pages aren&amp;rsquo;t really about the company; instead, they focus on relaying who they are in relation to the visitor. All good content puts the reader first, and that&amp;rsquo;s no different on your About Us page. In other words, About Us gives you a chance to talk about yourself, but always in the context of what you do for your customers. What burdens you help them shoulder, what problems you solve for them.&lt;/p&gt;
&lt;p&gt;The best infographics are entertaining, educational, and intrinsically useful.&lt;/p&gt;
&lt;p&gt;Infographics should be based on fact, not merely opinion.&lt;/p&gt;
&lt;p&gt;The best infographics have a hypothesis and narrative at their core. That sounds high-minded, doesn&amp;rsquo;t it? But it just means that you need to home in on the key idea you want your data to express. Write a kind of thesis statement. Then outline the main data points you want to use that support your thesis.&lt;/p&gt;
&lt;p&gt;Lay out the narrative with an eye toward information architecture. This means organizing your information in a way that flows logically, without undue complexity. Create an outline that highlights your key ideas in a narrative form. You might be tempted to skip this phase and go straight to design. But mapping is the critical step to creating an infographic that tells a meaningful story and doesn&amp;rsquo;t read as a jumble of numbers and drawings.&lt;/p&gt;
&lt;p&gt;“When you go to an art gallery, you notice little plaques next to the artwork that share crucial information to the artwork itself,” said Jarski. “Now imagine, you&amp;rsquo;re looking at Van Gogh&amp;rsquo;s Starry Night and the plaque beside offers details about the Mona Lisa. Jarring, right? The images and text need to make sense together.”&lt;/p&gt;
&lt;p&gt;Writing Better Blog Posts&lt;/p&gt;
&lt;p&gt;“This is like asking if the quality of food in a restaurant matters. Writing is the primary determinant of the success of the post.&lt;/p&gt;
&lt;p&gt;Keep headlines tight. Guy suggests headlines of four or five words.&lt;/p&gt;
&lt;p&gt;Time it well. Usually the best time for publication is between 8 and 10 a.m. weekdays, in the time zone where your readers live, Guy says.&lt;/p&gt;
&lt;p&gt;Use bullets and numbered lists.&lt;/p&gt;
&lt;p&gt;Use an interesting approach. Remember the mandate in Rule 8: good writing has logic and structure. But the structure itself can help to draw your readers in; revisit Rule 8 for some ideas about approaches and organizing.&lt;/p&gt;
&lt;p&gt;Show up. Half of blogging is consistency, or just showing up on a regular basis. As writer and content marketer Barry Feldman told me: “Write. Write now. Write a lot. Write freely. Write what you feel. Write first and edit second. If you want hits, you need to keep going up to the plate and swinging.”&lt;/p&gt;
&lt;p&gt;Buffer expanded its blogging strategy, focusing on lifehacking, business, customer service, and other topics alongside social media, because he realized it was key to getting access to a larger audience, he said.&lt;/p&gt;
&lt;p&gt;In 2014, Buffer split its blogging efforts into two blogs, refocusing on social media tips in its main blog (blog.bufferapp.com) and launching a second blog it calls Open (open.bufferapp.com) as an expanded, more general outlet to talk about company culture and lifehacking tips.&lt;/p&gt;
&lt;p&gt;“Reaching our audience&amp;rsquo;s audience is a big goal for us,” Leo said, a strategy he said was inspired by Rand Fishkin&amp;rsquo;s content marketing manifesto at Moz.com. “The reason for doing this is that ultimately it&amp;rsquo;s the best way how your brand and your audience can grow. You don&amp;rsquo;t limit yourself to just a certain audience, but you make sure that your content is relevant to your audience&amp;rsquo;s audience at all times.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.marketingprofs.com/charts/2014/25006/blog-best-practices-and-benchmarks&#34;&gt;www.marketingprofs.com/charts/2014/25006/blog-best-practices-and-benchmarks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Writing Annual Reports (or Annual Wrap-Ups)&lt;/p&gt;
&lt;p&gt;“The reader doesn&amp;rsquo;t turn the page because of a hunger to applaud.” Write something that encourages them to keep following you, and get a little more involved in your story.&lt;/p&gt;
&lt;p&gt;Start with some basics: Who did we grow to become in the past year? What changed? What didn&amp;rsquo;t? How have we evolved since our founding? What have been our biggest successes and our crushing failures? What&amp;rsquo;s commonplace to us that might be interesting to others?&lt;/p&gt;
&lt;p&gt;HubSpot&amp;rsquo;s 2013 Year-in-Review. The Boston-based technology company produced a magazine-like look back at some of its key achievements of the previous year. What it is. Produced with a tool called Uberflip, HubSpot&amp;rsquo;s 2013 Year-in-Review reads more like an issue of People magazine than a business-to-business company production.1 Magazine sections include financial information, charitable efforts, events, and so on.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.warbyparker.com/annual-report-2013&#34;&gt;www.warbyparker.com/annual-report-2013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mailchimp.com/2013/#by-the-numbers&lt;/p&gt;
&lt;p&gt;blog.bufferapp.com/from-0-to-1000000-users-the-journey-and-statistics-of-buffer&lt;/p&gt;
&lt;p&gt;Content Tools&lt;/p&gt;
&lt;p&gt;using off-line tools eliminates friction between the writer&lt;/p&gt;
&lt;p&gt;Draft (draftin.com) was started by engineer Nathan Kontny to help people become better writers. I like the on-demand copyediting feature (which is kind of like an Uber for editing). I also like the Hemingway mode (based on the line “Write drunk, edit sober” often attributed to him), which doesn&amp;rsquo;t allow you to delete anything you&amp;rsquo;ve written.&lt;/p&gt;
&lt;p&gt;Scapple (literatureandlatte.com/scapple.php) is from the folks at Scrivener. It&amp;rsquo;s designed to help you brainstorm by mapping and tracking ideas and identifying connections between them. It&amp;rsquo;s not exactly a mind-mapping tool for writers, but it&amp;rsquo;s close.&lt;/p&gt;
&lt;p&gt;Editing Tools&lt;/p&gt;
&lt;p&gt;Grammarly (grammarly.com) bills itself as an automated proofreader and “your personal grammar coach.” It&amp;rsquo;s both a Web app and a plug-in for Word and Outlook, and so it is fairly robust.&lt;/p&gt;
&lt;p&gt;ProWritingAid (prowritingaid.com) is an online writing coach that flags spelling and grammar errors, clichés, and redundancies; it also checks for plagiarism and readability.&lt;/p&gt;
&lt;p&gt;The Economist Style Guide (economist.com/styleguide) is one I fell in love with at its first line: “The first requirement of The Economist is that it should be readily understandable.” And that was only the start of our relationship. It goes on to offer great, practical, real-world advice for content of any type. Word nerds will appreciate its commentary and updates via Twitter, too (twitter.com/econstyleguide).&lt;/p&gt;
&lt;p&gt;Dragon Naturally Speaking (Nuance.com) is speech recognition software, which is a way to capture a first draft for those who either think better by talking or who can&amp;rsquo;t take the time to write something out. “It helps me write twice as fast and the writing is better because the tone is more conversational,” Paul Gillin told me.&lt;/p&gt;
&lt;p&gt;Google Authorship&lt;/p&gt;
&lt;p&gt;Although Google Authorship may not improve the rank of a page, it can increase traffic simply by making the search listing more prominent. And it&amp;rsquo;s not hard to set up. There are two links involved: (1) a link from the written page to the author&amp;rsquo;s Google+ profile page, and (2) a link from the author&amp;rsquo;s Google+ profile page to the blog or website. The first link must include a special tag, rel=“author.” The second link must appear in the Contributor To section of the author&amp;rsquo;s About page on G+. That&amp;rsquo;s it!&lt;/p&gt;
&lt;p&gt;TinEye (tineye.com) is a reverse image search engine. Upload an image and it can identify its source and how it&amp;rsquo;s being used and modified. It&amp;rsquo;s handy to identify an original photographer or source, but also handy if you&amp;rsquo;re looking for a higher-resolution version of an image you want to use.&lt;/p&gt;
&lt;p&gt;Epilogue A writer who waits for ideal conditions under which to work will die without putting a word on paper. —E. B. White Done is better than perfect.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make Good Art</title>
      <link>https://azharkhan.in/notes/good-art/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/good-art/</guid>
      <description>&lt;p&gt;Notes taken from &lt;a href=&#34;https://www.youtube.com/watch?v=plWexCID-kA&#34;&gt;Make Good Art&lt;/a&gt;, the popular 2012 Commencement Speech by Neil Gaiman.&lt;/p&gt;
&lt;p&gt;Make a list of everything you want to do. Forget the career just check things off your list. One by one.&lt;/p&gt;
&lt;p&gt;When you start out you have no idea what you&amp;rsquo;re doing. That is a good thing. People who know what they are doing know the rules and they know what is possible and impossible. The rules are made by those who have not tested the bounds of the possible by going beyond them.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t know it&amp;rsquo;s impossible it&amp;rsquo;s easier to do. Because it&amp;rsquo;s impossible there are no rules to stop you from doing it again. If you know what you want to make or do just go and do it.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s difficult to know whether what you are doing is the right thing. Imagine your goal is a mountain.. You&amp;rsquo;ll be alright if you keep walking towards it.Base your decisions on this reasoning. Take jobs which lead you in the direction of your mountain.&lt;/p&gt;
&lt;p&gt;Stop when something feels like work. Do anything that feels like an adventure.&lt;/p&gt;
&lt;p&gt;Be thick skinned. Not all your projects will survive. Put out 100s of things.&lt;/p&gt;
&lt;p&gt;Do work you&amp;rsquo;re proud of because at least you&amp;rsquo;ll have the work. Doing it for the money is rarely worth it.&lt;/p&gt;
&lt;p&gt;You wont regret doing the things that excite you. Failure is hard, success is harder.&lt;/p&gt;
&lt;p&gt;Imposter syndrome — we&amp;rsquo;re all faking it or at least feel like we are. Success is when you stop saying yes and start saying no. Don&amp;rsquo;t tie yourself into a certain lifestyle which dictates the job you choose.&lt;/p&gt;
&lt;p&gt;Start answering fewer emails to increase your productivity. Make mistakes, it means you&amp;rsquo;re out there doing something. Making good art gets you though the toughest times. Do what only you can do best. Make good art, consistently.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll only find your voice when you&amp;rsquo;ve sounded like a lot of other people. Tell your story, your vision, not someone else&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;When you feel like you&amp;rsquo;re exposing too much of your heart and your mind — showing too much of yourself — you may be starting to get it right.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll learn as much from the bad stuff as you do from the good stuff. You won&amp;rsquo;t know if it works until you put it out there.&lt;/p&gt;
&lt;p&gt;Secret freelancer knowledge - everyone is making it up as they go along. You get work by creating good work and delivering it on time.&lt;/p&gt;
&lt;p&gt;Stephen King — Enjoy your success. Stop and enjoy what you are doing. Don&amp;rsquo;t worry about it. Let go and enjoy the ride.&lt;/p&gt;
&lt;p&gt;The harder and wiser you work the luckier you will get.&lt;/p&gt;
&lt;p&gt;Make up your own rules. Pretend you are someone who can do it. Be wise or pretend to be someone who is wise. Make amazing mistakes.&lt;/p&gt;
&lt;p&gt;Make Good Art.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Smartcuts</title>
      <link>https://azharkhan.in/notes/smartcuts/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/smartcuts/</guid>
      <description>&lt;p&gt;Notes taken from &lt;a href=&#34;https://www.goodreads.com/book/show/20910174-smartcuts?from_search=true&#34;&gt;Smartcuts: How Hackers, Innovators, and Icons Accelerate Success&lt;/a&gt; by Shane Snow.&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;p&gt;Whereas by dictionary definition shortcuts can be amoral, you can think of smartcuts as shortcuts with integrity.&lt;/p&gt;
&lt;p&gt;Abagnale took shortcuts and regretted it. Franklin used smartcuts and got his face on a $100 bill.&lt;/p&gt;
&lt;p&gt;I’m convinced that true success has more to do with our becoming better people and building a better world while we do these things than it does with the size of our bank accounts.&lt;/p&gt;
&lt;p&gt;I see this book as a simultaneous hat tip and counterpoint to some of the great success and innovation literature out there (check out shanesnow.com/booklist for my recommendations). It’s a re-analysis and first codification of the ways rapid success has happened throughout history.&lt;/p&gt;
&lt;p&gt;patterns of lateral thinking (smartcuts)&lt;/p&gt;
&lt;p&gt;The players eliminated resistance by breaking the big challenge (acquire something valuable like a TV) into a series of easier, repeatable challenges (make a tiny trade).&lt;/p&gt;
&lt;p&gt;“Startups that pivot once or twice raise 2.5x more money, have 3.6x better user growth, and are 52% less likely to scale prematurely.”&lt;/p&gt;
&lt;p&gt;Mentorship is the secret of many of the highest-profile achievers throughout history.&lt;/p&gt;
&lt;p&gt;Sam Walton, founder of Walmart, studied and stole moves from master retailers fabulously well. He openly admitted it. “Most everything I’ve done, I’ve copied from someone else,” he said. The problem is that two people can study the same business model, watch the same video, or even take the same advice from a mentor, and one person might pick up critical details that the other misses. The late literary giant Saul Bellow would call someone with the ability to spot important details among noise a “first-class noticer.”&lt;/p&gt;
&lt;p&gt;Oscar Wilde once said, “Experience is the name everyone gives to their mistakes.”&lt;/p&gt;
&lt;p&gt;“If you’re not failing you are either very lucky, very good, or not pushing the boundaries enough,” Staats says.&lt;/p&gt;
&lt;p&gt;All great successes make mistakes along the way. NBA star Michael Jordan missed more than 9,000 shots and lost 300 games in his career. He was the best, and he failed a lot.&lt;/p&gt;
&lt;p&gt;Crucially, experts tended to be able to turn off the part of their egos that took legitimate feedback personally when it came to their craft, and they were confident enough to parse helpful feedback from incorrect feedback. Meanwhile novices psyched themselves out. They needed encouragement and feared failure.&lt;/p&gt;
&lt;p&gt;The tough part about negative feedback is in separating ourselves from the perceived failure and turning our experiences into objective experiments. But when we do that, feedback becomes much more powerful.&lt;/p&gt;
&lt;p&gt;They know, because they got the feedback early, and often. “Speed is an essential part of our game,” Leonard explains. “The rapid feedback . . . it’s non-stop.”&lt;/p&gt;
&lt;p&gt;In an age of platforms, creative problem solving is more valuable than computational skill.&lt;/p&gt;
&lt;p&gt;As the saying, attributed to Dr. Seuss, goes: “It is better to know how to learn than to know.”*&lt;/p&gt;
&lt;p&gt;“You can build on top of a lot of things that exist in this world,” David Heinemeier Hansson told me. “Somebody goes in and does that hard, ground level science based work. “And then on top of that,” he smiles, “you build the art.”&lt;/p&gt;
&lt;p&gt;The best way to be in the water when the wave comes is to budget time for swimming.&lt;/p&gt;
&lt;p&gt;Grant would know. He wrote the book on the subject. In his bestseller, Give and Take, he presents rigorous research showing that a disproportionate number of the most successful people in a given industry are extremely generous. From medical students to engineers to salespeople, his studies find givers at the top of the ladder.&lt;/p&gt;
&lt;p&gt;“The number one problem with networking is people are out for themselves,” says Scott Gerber, founder of the Young Entrepreneur Council, who coined the term superconnector.&lt;/p&gt;
&lt;p&gt;“Superconnecting is about learning what people need, then talking about ‘how do we create something of value.’”&lt;/p&gt;
&lt;p&gt;No matter the medium or method, giving is the timeless smartcut for harnessing superconnectors and creating serendipity.&lt;/p&gt;
&lt;p&gt;“Design for Extreme Affordability,” or how to create products for people who live on less than a dollar a&lt;/p&gt;
&lt;p&gt;Innovation is about doing something differently, rather than creating something from nothing (invention) or doing the same thing better (improvement).&lt;/p&gt;
&lt;p&gt;The key feature of disruptively innovative products is cost savings (either time or money). But the key ingredient behind the scenes of every disruptive product is simplification.&lt;/p&gt;
&lt;p&gt;Like Holmes, hackers strip the unnecessary from their lives. They zero in on what matters. Like great writers, innovators have the fortitude to cut the adverbs. This is why Apple founder Steve Jobs’s closet was filled with dozens of identical black turtlenecks and Levi’s 501 jeans—to simplify his choices. US presidents do the same thing. “You’ll see I wear only gray or blue suits,” President Barack Obama told Michael Lewis for his October 2012 Vanity Fair cover story. “I don’t want to make decisions about what I’m eating or wearing. Because I have too many other decisions to make.” I don’t want to make decisions about what I’m eating or wearing? How could that possibly make one better at governing? Or problem solving? And isn’t variety the very spice of life? What about creativity? Or not going crazy? What he’s talking about has been proven in experiments led by Dr. Kathleen Vohs of the University of Minnesota, experiments that show that making lots of tiny choices depletes one’s subsequent self-control. Students who were forced to decide between products for long periods of time had significantly less willpower afterward than classmates who answered random questions instead.&lt;/p&gt;
&lt;p&gt;Notes: 1) understanding minimalism&lt;/p&gt;
&lt;p&gt;Apparently, patience and willpower, even creativity, are exhaustible resources. That’s why so many busy and powerful people practice mind-clearing meditation and stick to rigid daily routines: to minimize distractions and maximize good decision making.&lt;/p&gt;
&lt;p&gt;Similarly, Apple’s iPod won the MP3 player war with breakthrough simplicity, both in physical design and how the company explained it. While other companies touted “4 Gigabytes and a 0.5 Gigahertz processor!” Apple simply said, “1,000 songs in your pocket.”&lt;/p&gt;
&lt;p&gt;Creativity comes easier within constraints&lt;/p&gt;
&lt;p&gt;as Musk likes to say, “The first step is to establish that something is possible; then probability will occur.”&lt;/p&gt;
&lt;p&gt;“Generally speaking, if you’re gonna make something ten percent better than the way things currently are, you better be great in sales and marketing, because you’re gonna have to talk people into changing their behavior for a very marginal increase in value,” explains Astro Teller.&lt;/p&gt;
&lt;p&gt;“If, on the other hand, you make something ten times better for a large number of people—you really produce huge amounts of new value—the money’s gonna come find you. Because it would be hard not to make money if you’re really adding that much value.” This is exactly&lt;/p&gt;
&lt;p&gt;Big causes attract big believers, big investors, big capital, big-name advisers, and big talent. They force us to rethink convention and hack the ladder of success. To engage with masters and to leverage waves and platforms and superconnectors. To swing and to simplify, to quickly turn failure into feedback. To become not just bigger, but truly better. And they remind us, once again, that together we can achieve the implausible.&lt;/p&gt;
&lt;p&gt;a first-class noticer, a master of tiny details about how shoes are put together and how consumers on the street think about them.&lt;/p&gt;
&lt;p&gt;He was in the water before the wave came.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Challenger’s Almanac</title>
      <link>https://azharkhan.in/notes/challengers/</link>
      <pubDate>Wed, 26 Oct 2016 21:34:41 +0100</pubDate>
      <author>azhar932@icloud.com (Azhar Khan)</author>
      <guid>https://azharkhan.in/notes/challengers/</guid>
      <description>&lt;p&gt;Thought’s and notes from &lt;a href=&#34;https://www.goodreads.com/book/show/28605442-the-challenger-s-almanac?ac=1&amp;amp;from_search=true&#34;&gt;The Challenger’s Almanac&lt;/a&gt; by Mark Anderson.&lt;/p&gt;
&lt;h3 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h3&gt;
&lt;p&gt;I hate to admit it — I had this book on my shelf for a few years before I finally came to read it. Wish i&amp;rsquo;d picked it up sooner.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re anything like me then the stories in this book will make a lot of sense to you.&lt;/p&gt;
&lt;p&gt;If you believe in quality over quantity. If you consider yourself a creative thinker — an artist, a maker or an entrepreneur of sorts — with a tendency to challenge the way things are done, then you&amp;rsquo;ll have a lot of time for this book.&lt;/p&gt;
&lt;p&gt;Most of the companies featured were started by people questioning the way things are done. Using lateral thinking as their weapon, they&amp;rsquo;ve made it their mission in life to solve problems personally faced. Problems they are passionate about trying to fix — and not just for the money — but because they genuinely want to do good in the world.&lt;/p&gt;
&lt;p&gt;The book is also packed full of related reading and recommended talks.&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;p&gt;Challenger brands are &lt;strong&gt;businesses with purpose&lt;/strong&gt;. Businesses who are  prepared to break the rules. Businesses that manage to blend having a positive impact on the world with being financially successful.&lt;/p&gt;
&lt;p&gt;Often naivety leads companies to new and creative ways of working.&lt;/p&gt;
&lt;p&gt;Most challenger companies begin life as &lt;strong&gt;side projects&lt;/strong&gt;, created through passion.&lt;/p&gt;
&lt;p&gt;They lack experience and a natural right to create. &lt;em&gt;&amp;ldquo;We&amp;rsquo;re not experts but why should that matter&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All successful people fail.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Transparent sense of purpose and a force of good challenging ethics and ideology.&lt;/p&gt;
&lt;p&gt;Solving problems. Seeing something that needs to be done better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof of concept&lt;/strong&gt; — &lt;em&gt;&amp;ldquo;I started telling people my idea as if it already existed. I had customers. I had a business&amp;rdquo;&lt;/em&gt;. Reminds me of &lt;!-- raw HTML omitted --&gt;Buffer&amp;rsquo;s landing page POC&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ask for help&lt;/strong&gt; — you can&amp;rsquo;t do it alone. Passion and excitement is a great bargaining tool.&lt;/p&gt;
&lt;p&gt;You need a purpose — that you love and others can believe in — and an idea to make something better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Procrastiwork&lt;/strong&gt; — work you do when you are putting off other work. &lt;em&gt;&amp;ldquo;The work you do when you&amp;rsquo;re procrastinating is probably the work you should be doing for the rest of your life&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let tiny victories pave your path. By doing so your path will present itself. Don&amp;rsquo;t set overly ambitious goals.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Procrastiwork&lt;!-- raw HTML omitted --&gt; can help you maintain momentum with client work as you switch from project to project to keep excitement high.&lt;/p&gt;
&lt;p&gt;Take time to understand what you love about the work your doing.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;The Holstee Mainifesto&lt;!-- raw HTML omitted --&gt; – a company should be built around a lifestyle rather than the other way around.&lt;/p&gt;
&lt;p&gt;Seeing business as a way to make an impact on the world and contribute to a cause you feel strongly about.&lt;/p&gt;
&lt;p&gt;The only person you should listen to is the customer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Ask for advise from other companies and people that inspire you. You&amp;rsquo;ll be surprised at how much people are willing to share about what they have learnt and the mistakes they&amp;rsquo;ve made.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Figure out your message and put your energy into getting it across.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;The most satisfying thing is knowing your business is a force of good and can make a difference to a cause you feel strongly about.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Find a mentor&lt;/strong&gt; — someone who has been there before and can stear you in the right direction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On public speaking&lt;/strong&gt; — understand your audience so you can get an idea of what they want to know.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10,000 hours&lt;/strong&gt; — in order to be an expert you have to spend 10,000 hours (approx. 10 years) practicing it. An idea taken from &lt;a href=&#34;https://www.goodreads.com/book/show/3228917-outliers&#34;&gt;Outliers by Malcom Gladwell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Trust your own judgement. Have faith in your decisions. Take advise from people you respect an be prepared to act on it.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Behind most Challenger brands there is usually someone on a mission to solve a problem they have encountered in their lives.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Challengers change the way we think, act, feel, see and behave using design to express their vision.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not about building it fast, but building it right.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;It&amp;rsquo;s not the government who is going to solve our environmental issues, it&amp;rsquo;s business.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Everytime I&amp;rsquo;ve done the right thing for the environment, i&amp;rsquo;ve made a profit&amp;rdquo;&lt;/em&gt; — Yvon Chouinard.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Business is the most powerful man-made force on the planet, so it is important for businesses to use that power to do the most good. It doesn&amp;rsquo;t matter if a business is the biggest. It doesn&amp;rsquo;t matter if it&amp;rsquo;s the fastest growing. It matters if a business is the best in the world at being the best for the world.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;What matters most is not simply the ability to make money, but the ability of a business to create value for its customers, employees, community, the environment and other stakeholders.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Share your mission with your employees. This creates more engaged employees and spurs innovative thinking.&lt;/p&gt;
&lt;p&gt;Expand your network. Share your results. Put your practices and policies into writing, this helps everyone adhere to goals as the company grows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Anyone Paradigm&lt;/strong&gt; — &lt;em&gt;&amp;ldquo;We are full service, and or company will serve anyone&amp;rdquo;&lt;/em&gt;.  Don&amp;rsquo;t try and serve everyone, this approach isn&amp;rsquo;t strategic enough. Focus on serving quality customers, not a quantity of customers. It&amp;rsquo;s better to know who you will not serve, and what services you will not perform.&lt;/p&gt;
&lt;p&gt;A company can become strategic by narrowly defining who it is they serve best.&lt;/p&gt;
&lt;p&gt;Recognising you have limitations is strategic, not weak.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Business strategy is to know your greatest skill, and offer the world only that.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &amp;ldquo;what we believe&amp;rdquo; in document&lt;/strong&gt; — helps to keep the wrong customers out. If they do not align with your beliefs, they might not be the best fit for your company. A good way to find the right clients. Alignment is key.&lt;/p&gt;
&lt;p&gt;The goal of enterprise is to produce value for customers.&lt;/p&gt;
&lt;p&gt;If you care more about customers than profit, then you can take a limited number of clients.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be honest.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make products that last&lt;/strong&gt; — simple sustainable design. Design that matters.&lt;/p&gt;
&lt;p&gt;People remember good stories.&lt;/p&gt;
&lt;p&gt;Learn the rules in order to break them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pursue passion projects.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most valuable currency is &lt;strong&gt;time not money&lt;/strong&gt;. Don&amp;rsquo;t strive for the biggest profits but instead find the time for things that matter to you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pursue and develop creative ideas.&lt;/strong&gt; &lt;em&gt;&amp;ldquo;Creativity is our currency; something we promise and our clients expect&amp;rdquo;. Get away from you desk if you want this to work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;We all need time and space to experiment and cultivate creativity if our ideas are really going to be fresh&amp;rdquo;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Allowing time and space for incidental thoughts, ideas, conversations that you only get from actually meeting someone really does reap rewards and nurture lasting, valuable relationships.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Profit with principles. It&amp;rsquo;s not just economic profit, but a positive social and environmental impact.&lt;/p&gt;
&lt;p&gt;Have a vision. Consider the type of Culture you want to create.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t command but collaborate.&lt;/p&gt;
&lt;p&gt;Nurture and develop individuals.&lt;/p&gt;
&lt;p&gt;Make money not your only priority.&lt;/p&gt;
&lt;p&gt;Be honest and transparent with your communication.&lt;/p&gt;
&lt;p&gt;Without purpose you have no meaning.&lt;/p&gt;
&lt;p&gt;Great achievement is talent plus preparation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Practice isn&amp;rsquo;t the thing you do once you&amp;rsquo;re good. It&amp;rsquo;s the thing you do that makes you good&amp;rdquo;&lt;/em&gt; - Malcolm Gladwell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t be afraid to prototype in public&lt;/strong&gt;- &lt;em&gt;&amp;ldquo;put yourself out there and see where the velcro sticks&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;A brand is not a logo, or a pantone colour. A brand ius a promise.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;How much can I give, rather than How much can I take.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Know what it is you&amp;rsquo;re trying to say, say clearly, and then do what you said you were going to do, when you said you were going to do it. That is the rule for business.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;They [Entrepreneurs] are not just risk takers, they are believers in the unproven, untested, and the unlikely&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;A misconception of business is that you need bags of experience to start.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Naïve Optimism&lt;/strong&gt;: To not get sidetracked by what can&amp;rsquo;t be done. There are no rules. Only opportunities.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;All too often, leaders of companies are willing to Sacrifice people to save the numbers, rather than sacrificing the numbers to save the people.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Leadership is the choice to offer protection to those in our care. It&amp;rsquo;s simply, &amp;lsquo;I will risk my life for the good of my people&amp;rsquo;. That&amp;rsquo;s why you own the title of leader.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;The genius of one never sold anything. As human beings, we&amp;rsquo;re better together.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Why you do what you do, not what you do. That&amp;rsquo;s a good place to start.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;*&amp;ldquo;We all have to question, and be willing to break the rules.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;If you want to remain number 1 you have to think like number 2.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Fear regret, not failure.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;..find your &amp;lsquo;why&amp;rsquo;, identify your mission, define your belief, write your manifesto. Do all these things, and then build upon them.&amp;quot;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>